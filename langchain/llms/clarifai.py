"""Wrapper around Cohere APIs."""
import logging
from typing import Any, Dict, List, Optional

from pydantic import Extra, root_validator

from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env

logger = logging.getLogger(__name__)


class Clarifai(LLM):
    """Wrapper around Cohere large language models.

    To use, you should have the ``cohere`` python package installed, and the
    environment variable ``COHERE_API_KEY`` set with your API key, or pass
    it as a named parameter to the constructor.

    Example:
        .. code-block:: python

            from langchain.llms import Cohere
            cohere = Cohere(model="gptd-instruct-tft", cohere_api_key="my-api-key")
    """

    stub: Any  #: :meta private:
    request: Any
    metadata: Any
    model_id: Optional[str] = None
    """Model id to use."""

    model_version_id: Optional[str] = None
    """Model version id to use."""

    app_id: Optional[str] = None
    """Clarifai application id to use."""

    user_id: Optional[str] = None
    """Clarifai user id to use."""

    clarifai_pat_key: Optional[str] = None

    stop: Optional[List[str]] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        clarifai_pat_key = values.get("clarifai_pat_key")
        user_id = values.get("user_id")
        app_id = values.get("app_id")
        model_id = values.get("model_id")
        model_version_id = values.get("model_version_id")

        try:
            from clarifai_grpc.channel.clarifai_channel import ClarifaiChannel
            from clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc

            channel = ClarifaiChannel.get_grpc_channel()
            values["stub"] = service_pb2_grpc.V2Stub(channel)

            userDataObject = resources_pb2.UserAppIDSet(user_id=user_id, app_id=app_id)
            values["request"] = service_pb2.PostModelOutputsRequest(
                user_app_id=userDataObject,  # The userDataObject is created in the overview and is required when using a PAT
                model_id=model_id,
                version_id=model_version_id,  # This is optional. Defaults to the latest model version
                inputs=[],
            )
            values["metadata"] = (("authorization", "Key " + clarifai_pat_key),)

        except ImportError:
            raise ImportError(
                "Could not import cohere python package. " "Please install it with `pip install clarifai`."
            )
        return values

    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for calling Cohere API."""
        return {}

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        """Get the identifying parameters."""
        return {**{"model_id": self.model_id}}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "clarifai"

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
    ) -> str:
        """Call out to Cohere's generate endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = cohere("Tell me a joke.")
        """

        try:
            from clarifai_grpc.channel.clarifai_channel import ClarifaiChannel
            from clarifai_grpc.grpc.api import resources_pb2, service_pb2, service_pb2_grpc
        except ImportError:
            raise ImportError(
                "Could not import cohere python package. " "Please install it with `pip install clarifai`."
            )

        params = self._default_params
        if self.stop is not None and stop is not None:
            raise ValueError("`stop` found in both the input and default params.")
        elif self.stop is not None:
            params["stop_sequences"] = self.stop
        else:
            params["stop_sequences"] = stop

        self.request.inputs.add(data=resources_pb2.Data(text=resources_pb2.Text(raw=prompt)))
        post_model_outputs_response = self.stub.PostModelOutputs(self.request, metadata=self.metadata)

        if post_model_outputs_response.status.code != 10000:
            print(post_model_outputs_response.status)
            raise Exception("Post model outputs failed, status: " + post_model_outputs_response.status.description)

        text = post_model_outputs_response.outputs[0].data.text.raw

        # If stop tokens are provided, Cohere's endpoint returns them.
        # In order to make this consistent with other endpoints, we strip them.
        if stop is not None or self.stop is not None:
            text = enforce_stop_tokens(text, params["stop_sequences"])
        return text
