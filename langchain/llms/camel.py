"""Wrapper around Camel API"""

from typing import Any, List, Mapping, Optional

from pydantic import Extra
import requests
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens


class Camel(LLM):
    """Wrapper around Writer's Camel large language model.

    To use, you should have the environment variable ``WRITER_API_KEY``
    set with your API key.

    Example:
        .. code-block:: python

            from langchain import Camel
            camel = Camel()
            output = camel("I like cake because")
    """

    model_id: str = "camel-5b-hf"
    """Model name to use."""

    base_url: Optional[str] = None
    """Base API URL to use, if None decides based on model name"""

    # Model parameters
    top_k: Optional[int] = None
    """(Default: None). Integer to define the top tokens considered within the sample operation to create new text."""

    top_p: Optional[float] = None
    """(Default: None). Float to define the tokens that are within the sample operation of text generation. Add tokens in the sample for more probable to least probable until the sum of the probabilities is greater than top_p."""

    temperature: float = 1.0
    """(Default: 1.0). Float (0.0-100.0). The temperature of the sampling operation. 1 means regular sampling, 0 means always take the highest score, 100.0 is getting closer to uniform probability."""

    repetition_penalty: Optional[float] = None
    """(Default: None). Float (0.0-100.0). The more a token is used within generation the more it is penalized to not be picked in successive generation passes."""

    max_new_tokens: Optional[int] = None
    """	(Default: None). Int (0-250). The amount of new tokens to be generated, this does not include the input length; it is an estimate of the size of generated text you want. Each new tokens slows down the request, so look for balance between response times and length of text generated."""

    max_time: Optional[float] = None
    """(Default: None). Float (0-120.0). The amount of time in seconds that the query should take maximum. Network can cause some overhead so it will be a soft limit. Use that in combination with max_new_tokens for best results."""

    return_full_text: bool = True
    """(Default: True). Bool. If set to False, the return results will not contain the original query making it easier for prompting."""

    num_return_sequences: int = 1
    """(Default: 1). Integer. The number of propositions you want to be returned."""

    do_sample: bool = True
    """(Default: True). Bool. Whether or not to use sampling, use greedy decoding otherwise."""

    # Huggingface API options
    use_cache: bool = True
    """(Default: True). Boolean. There is a cache layer on the inference API to speedup requests we have already seen. Most models can use those results as is as models are deterministic (meaning the results will be the same anyway). However if you use a non deterministic model, you can set this parameter to prevent the caching mechanism from being used resulting in a real new query."""

    wait_for_model: bool = False
    """	(Default: False) Boolean. If the model is not ready, wait for it instead of receiving 503. It limits the number of requests required to get your inference done. It is advised to only set this flag to true after receiving a 503 error as it will limit hanging in your application to known places."""

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @property
    def _default_params(self) -> Mapping[str, Any]:
        """Get the default parameters for Camel API"""
        return {
            "top_k": self.top_k,
            "top_p": self.top_p,
            "temperature": self.temperature,
            "repetition_penalty": self.repetition_penalty,
            "max_new_tokens": self.max_new_tokens,
            "max_time": self.max_time,
            "return_full_text": self.return_full_text,
            "num_return_sequences": self.num_return_sequences,
            "do_sample": self.do_sample,
        }

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        return {**{"model_id": self.model_id}, **self._default_params}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "camel"

    def _call(self, prompt: str, stop: Optional[List[str]] = None):
        """Call out to Camel API

        Args:
            prompt: The prompt to pass into the model.

        Returns:
            The string generated by the model.
        """

        if self.base_url is not None:
            base_url = self.base_url
        else:
            base_url = (
                f"https://api-inference.huggingface.co/models/Writer/{self.model_id}"
            )

        options = {"use_cache": self.use_cache, "wait_for_model": self.wait_for_model}

        response = requests.post(
            url=base_url,
            headers={
                "Content-Type": "application/json",
            },
            json={
                "inputs": prompt,
                "parameters": self._default_params,
                "options": options,
            },
        )

        text = response.text
        if stop is not None:
            # Everyone else is doing this so it must be important
            text = enforce_stop_tokens(text, stop)
        return text


if __name__ == "__main__":
    camel = Camel(wait_for_model=True)
    output = camel._call("test this")
    print(output)
