"""Wrapper around Anyscale"""
from typing import Any, Dict, List, Mapping, Optional

from pydantic import Extra, root_validator

from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env
import requests

class AnyscaleLLM(LLM):
    """Wrapper around Anyscale Services.
    To use, you should have the environment variable ``ANYSCALE_SERVICE_URL`` set with your Anyscale Service URL, or pass it as a named parameter to the constructor.
    
    Example:
        .. code-block:: python
            from langchain.llms import AnyscaleLLM
            anyscalellm = AnyscaleLLM(anyscale_service_url="SERVICE_URL",
                                anyscale_service_route="SERVICE_ROUTE",
                                anyscale_service_token="SERVICE_TOKEM")
            # To leverage Ray for parallel processing
	    import ray
	    prompt_list=[]
            @ray.remote
            def send_query(llm, prompt):
                resp = llm(text)
                return resp
            futures = [send_query.remote(anyscalellm, prompt) for promt in prompt_list]
            results = ray.get(futures)
    """

    client: Any  #: :meta private:
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""

    anyscale_service_url: Optional[str] = None
    anyscale_service_route: Optional[str] = None
    anyscale_service_token: Optional[str] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        anyscale_service_url = get_from_dict_or_env(
            values, "anyscale_service_url", "ANYSCALE_SERVICE_URL"
        )
        anyscale_service_route = get_from_dict_or_env(
            values, "anyscale_service_route", "ANYSCALE_SERVICE_ROUTE"
        )
        anyscale_service_token = get_from_dict_or_env(
            values, "anyscale_service_token", "ANYSCALE_SERVICE_TOKEN"
        )
        try:
            anyscale_service_endpoint = f'{anyscale_service_url}/-/route'
            headers = {'Authorization': f'Bearer {anyscale_service_token}'}
            resp = requests.get(anyscale_service_endpoint, headers=headers)
        except requests.exceptions.RequestException as e:  # This is the correct syntax
            raise ValueError(e)
        values['anyscale_service_url'] = anyscale_service_url
        values['anyscale_service_route'] = anyscale_service_route
        values['anyscale_service_token'] = anyscale_service_token
        return values

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        return {
            "anyscale_service_url": self.anyscale_service_url,
            "anyscale_service_route": self.anyscale_service_route
            #**{"model_kwargs": _model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "Anyscale LLM"

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
    ) -> str:
        """Call out to HuggingFace Hub's inference endpoint.
        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.
        Returns:
            The string generated by the model.
        Example:
            .. code-block:: python
                response = hf("Tell me a joke.")
        """
        
        anyscale_service_endpoint = f'{self.anyscale_service_url}/{self.anyscale_service_route}'
        headers = {'Authorization': f'Bearer {self.anyscale_service_token}'}
        params = {'prompt':prompt}
        resp = requests.get(anyscale_service_endpoint, headers=headers, params=params)
            
        if resp.status_code != 200:
            raise ValueError(f"Error returned by service")
        text = resp.text
        
        if stop is not None:
            # This is a bit hacky, but I can't figure out a better way to enforce
            # stop tokens when making calls to huggingface_hub.
            text = enforce_stop_tokens(text, stop)
        return text
