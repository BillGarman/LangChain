"""Wrapper around custom APIs."""
from typing import Any, Dict, List, Mapping, Optional

import requests
import asyncio
from functools import partial
from pydantic import Extra, root_validator

from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env

VALID_TASKS = ("text2text-generation", "text-generation")


class CustomEndpoint(LLM):
    """Wrapper around custom Inference Endpoints, related to HuggingFaceHub Inference Endpoints.

    Only supports `text-generation` and `text2text-generation` for now.

    Example:
        .. code-block:: python

            from langchain.llms import CustomEndpoint
            endpoint_url = "https://api/endpoint/
            llm = CustomEndpoint(
                endpoint_url=endpoint_url,
                api_key="my-api-key"
            )
    """

    endpoint_url: str = ""
    """Endpoint URL to use."""
    task: Optional[str] = None
    """Task to call the model with. Should be a task that returns `generated_text`."""
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""

    api_key: Optional[str] = None
    """API key."""
    api_authorization_header: Optional[str] = None
    """
    Authorization header that will be formatted with `format`.
    
    Example:
        'Api-Key {api_key}'
    Header compute:
        .. code-block:: python
            authorization_header = self.api_authorization_header.format(api_key=self.api_key)
    """
    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"endpoint_url": self.endpoint_url, "task": self.task},
            **{"model_kwargs": _model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "custom_endpoint"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to custom inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = llm("Tell me a joke.")
        """
        _model_kwargs = self.model_kwargs or {}

        # payload samples
        parameter_payload = {"inputs": prompt, "parameters": _model_kwargs}

        # HTTP headers for authorization
        headers = {
            "Content-Type": "application/json",
        }
        if self.api_authorization_header is not None:
            authorization_header = self.api_authorization_header.format(api_key=self.api_key)
        elif self.api_key is not None:
            authorization_header = self.api_key
        else:
            authorization_header = None
        if authorization_header is not None:
            headers.update({"Authorization": authorization_header})

        # send request
        try:
            response = requests.post(
                self.endpoint_url, headers=headers, json=parameter_payload
            )
        except requests.exceptions.RequestException as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")
        generated_text = response.json()
        if "error" in generated_text:
            raise ValueError(
                f"Error raised by inference API: {generated_text['error']}"
            )
        if self.task == "text-generation":
            # Text generation return includes the starter text.
            text = generated_text[0]["generated_text"][len(prompt) :]
        elif self.task == "text2text-generation":
            text = generated_text[0]["generated_text"]
        else:
            raise ValueError(
                f"Got invalid task {self.task}, "
                f"currently only {VALID_TASKS} are supported"
            )
        if stop is not None:
            text = enforce_stop_tokens(text, stop)
        return text
        
    async def _acall(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to custom inference endpoint."""
        func = partial(self._call, prompt, stop)
        return await asyncio.get_event_loop().run_in_executor(None, func)        
        
