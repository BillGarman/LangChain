"""Wrapper around custom APIs."""
import asyncio
from functools import partial
from typing import Any, Dict, List, Mapping, Optional

import requests
from pydantic import Extra, root_validator

from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens

VALID_TASKS = ("text2text-generation", "text-generation")


class LocalHuggingFaceEndpoint(LLM):
    """Wrapper around local HuggingFace Inference Endpoints.

    Only supports `text-generation` and `text2text-generation` for now.

    Example:
        .. code-block:: python

            from langchain.llms import LocalHuggingFaceEndpoint
            endpoint_url = "https://api/endpoint/"
            llm = LocalHuggingFaceEndpoint(
                endpoint_url=endpoint_url,
                headers = {"Content-Type": "application/json"}
            )
    """

    endpoint_url: str
    """Endpoint URL to use."""
    task: Optional[str] = None
    """Task to call the model with. Should be a task that returns `generated_text`."""
    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""
    headers: Optional[dict] = None
    """Endpoint specific headers."""

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate the task and endpoint url."""
        if cls.task not in VALID_TASKS:
            raise ValueError(
                f"Got invalid task {cls.task}, "
                f"currently only {VALID_TASKS} are supported"
            )
        try:
            response = requests.get(cls.endpoint_url, headers=cls.headers)
            response.raise_for_status()
        except Exception as e:
            raise ValueError(f"Could not connect to {cls.endpoint_url} with error {e}")
        return values

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"endpoint_url": self.endpoint_url, "task": self.task},
            **{"model_kwargs": _model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "local_huggingface_endpoint"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to local Huggingface Inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = llm("Tell me a joke.")
        """
        _model_kwargs = self.model_kwargs or {}

        # payload samples
        parameter_payload = {"inputs": prompt, "parameters": _model_kwargs}

        # send request
        try:
            response = requests.post(
                self.endpoint_url, headers=self.headers, json=parameter_payload
            )
        except requests.exceptions.RequestException as e:
            raise ValueError(f"Error raised by inference endpoint: {e}")
        response_dict = response.json()
        if "error" in response_dict:
            raise ValueError(f"Error raised by inference API: {response_dict['error']}")
        if self.task == "text-generation":
            # Text generation return includes the starter text.
            text = response_dict[0]["generated_text"][len(prompt) :]
        elif self.task == "text2text-generation":
            text = response_dict[0]["generated_text"]
        else:
            raise ValueError(
                f"Got invalid task {self.task}, "
                f"currently only {VALID_TASKS} are supported"
            )
        if stop is not None:
            text = enforce_stop_tokens(text, stop)
        return text

    async def _acall(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to custom inference endpoint."""
        func = partial(self._call, prompt, stop)
        return await asyncio.get_event_loop().run_in_executor(None, func)
