# Chinese translations for PACKAGE package
# PACKAGE 软件包的简体中文翻译.
# Copyright (C) 2023 THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# krasus chen <chen@krasus.red>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: 0.0.180\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-31 10:23+0800\n"
"PO-Revision-Date: 2023-05-30 11:23+0800\n"
"Last-Translator: krasus chen <chen@krasus.red>\n"
"Language-Team: Chinese (simplified) <i18n-zh@googlegroups.com>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: experimental/autonomous_agents/baby_agi/task_prioritization.py:12
#, python-brace-format
msgid ""
"You are a task prioritization AI tasked with cleaning the formatting of and "
"reprioritizing the following tasks: {task_names}. Consider the ultimate "
"objective of your team: {objective}. Do not remove any tasks. Return the "
"result as a numbered list, like: #. First task #. Second task Start the task"
" list with number {next_task_id}."
msgstr ""
"你是一个任务优先级AI，任务是清理和重新排序以下任务：{task_names}。考虑你的团队的最终目标：{objective}。不要删除任何任务。将结果作为编号列表返回，例如：#。第一个任务"
" #。第二个任务，以数字{next_task_id}开始任务列表。"

#: experimental/autonomous_agents/baby_agi/task_creation.py:12
#, python-brace-format
msgid ""
"You are an task creation AI that uses the result of an execution agent to "
"create new tasks with the following objective: {objective}, The last "
"completed task has the result: {result}. This result was based on this task "
"description: {task_description}. These are incomplete tasks: "
"{incomplete_tasks}. Based on the result, create new tasks to be completed by"
" the AI system that do not overlap with incomplete tasks. Return the tasks "
"as an array."
msgstr ""
"你是一个任务创建AI，使用执行代理的结果创建新任务，目标为：{objective}。\n"
"最后完成的任务结果为：{result}。该结果基于以下任务描述：{task_description}。\n"
"这些是未完成的任务：{incomplete_tasks}。根据结果，创建新的任务供AI系统完成，不与未完成的任务重叠。将任务作为数组返回。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:140
msgid ""
"~4000 word limit for short term memory. Your short term memory is short, so "
"immediately save important information to files."
msgstr "短期记忆的限制大约在4000个单词左右。由于您的短期记忆较短，因此请立即将重要信息保存到文件中。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:145
msgid ""
"If you are unsure how you previously did something or want to recall past "
"events, thinking about similar events will help you remember."
msgstr "如果您不确定自己以前是如何做某事的，或者想回忆过去的事件，思考类似的事件将有助于您记忆。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:149
msgid "No user assistance"
msgstr "没有用户帮助。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:151
msgid "Exclusively use the commands listed in double quotes e.g. \"command name\""
msgstr "请仅使用双引号中列出的命令，例如\"command name\"。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:160
msgid "Internet access for searches and information gathering."
msgstr "使用互联网进行搜索和信息收集。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:162
msgid "Long Term memory management."
msgstr "长期内存管理。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:164
msgid "GPT-3.5 powered Agents for delegation of simple tasks."
msgstr "使用GPT-3.5技术的代理人来委派简单任务。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:166
msgid "File output."
msgstr "文件输出。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:170
msgid ""
"Continuously review and analyze your actions to ensure you are performing to"
" the best of your abilities."
msgstr "持续审查和分析你的行动，确保你能够发挥最佳水平。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:174
msgid "Constructively self-criticize your big-picture behavior constantly."
msgstr "不断地对自己的大局行为进行建设性的自我批评。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:177
msgid "Reflect on past decisions and strategies to refine your approach."
msgstr "反思过去的决策和策略，以完善你的方法。"

#: experimental/autonomous_agents/autogpt/prompt_generator.py:180
msgid ""
"Every command has a cost, so be smart and efficient. Aim to complete tasks "
"in the least number of steps."
msgstr "每个命令都有一个代价，因此要聪明高效。目标是以最少的步骤完成任务。"

#: experimental/autonomous_agents/autogpt/prompt.py:24
msgid ""
"Your decisions must always be made independently without seeking user assistance.\n"
"Play to your strengths as an LLM and pursue simple strategies with no legal complications.\n"
"If you have completed all your tasks, make sure to use the \"finish\" command."
msgstr ""
"你的决策必须独立做出，不寻求用户的帮助。\n"
"作为LLM，发挥自己的优势，追求简单的策略，避免法律上的复杂性。\n"
"如果你完成了所有的任务，请确保使用\"finish\"命令。"

#: experimental/generative_agents/memory.py:65
#, python-brace-format
msgid ""
"{observations}\n"
"\n"
"Given only the information above, what are the 3 most salient high-level questions we can answer about the subjects in the statements? Provide each question on a new line.\n"
"\n"
msgstr ""
"{观察}\n"
"\n"
"仅根据上述信息，我们可以回答有关陈述主题的三个最显著的高层次问题是什么？请在每行上提供一个问题。\n"

#: experimental/generative_agents/memory.py:80
#, python-brace-format
msgid ""
"Statements about {topic}\n"
"{related_statements}\n"
"\n"
"What 5 high-level insights can you infer from the above statements? (example format: insight (because of 1, 5, 3))"
msgstr ""
"关于{topic}的陈述\n"
"{related_statements}\n"
"\n"
"从上述陈述中，你能推断出哪5个高层次的见解？（例如格式：insight（因为1、5、3））\n"
"\n"
"（注意：以下为翻译内容，结尾有换行符“\\n”）\n"
"\n"
"注：原文中的“insight”翻译为“见解”。\n"
"\n"
"关于{topic}的陈述：\n"
"{related_statements}\n"
"\n"
"你能从上述陈述中推断出哪5个高层次的见解？（例如格式：见解（因为1、5、3））\\n"

#: experimental/generative_agents/memory.py:114
#, python-brace-format
msgid ""
"On the scale of 1 to 10, where 1 is purely mundane (e.g., brushing teeth, making bed) and 10 is extremely poignant (e.g., a break up, college acceptance), rate the likely poignancy of the following piece of memory. Respond with a single integer.\n"
"Memory: {memory_content}\n"
"Rating: "
msgstr ""
"记忆：{memory_content}\n"
"评分：（请回答一个整数，1代表非常平凡（例如刷牙，整理床铺），10代表非常深刻（例如分手，大学录取））"

#: retrievers/document_compressors/chain_filter_prompt.py:4
#, python-brace-format
msgid ""
"Given the following question and context, return YES if the context is relevant to the question and NO if it isn't.\n"
"\n"
"> Question: {question}\n"
"> Context:\n"
">>>\n"
"{context}\n"
">>>\n"
"> Relevant (YES / NO):"
msgstr ""
"Question: {question}\n"
"Context: \n"
">>>\n"
"{context}\n"
">>>\n"
"相关（是/否）："

#: retrievers/document_compressors/chain_extract_prompt.py:4
#, python-brace-format
msgid ""
"Given the following question and context, extract any part of the context *AS IS* that is relevant to answer the question. If none of the context is relevant return {no_output_str}. \n"
"\n"
"Remember, *DO NOT* edit the extracted parts of the context.\n"
"\n"
"> Question: {{question}}\n"
"> Context:\n"
">>>\n"
"{{context}}\n"
">>>\n"
"Extracted relevant parts:\n"
msgstr ""
"根据以下问题和背景，提取任何与回答问题相关的背景部分*原样*。如果没有相关的背景部分，请返回{no_output_str}。\n"
"请记住，*不要*编辑提取的背景部分。\n"
">Question: {{question}}\n"
">Context:\n"
">>>\n"
"{{context}}\n"
">>>\n"
"提取的相关部分：\n"

#: memory/prompt.py:5
#, fuzzy, python-brace-format
msgid ""
"You are an assistant to a human, powered by a large language model trained by OpenAI.\n"
"\n"
"You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n"
"\n"
"You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n"
"\n"
"Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n"
"\n"
"Context:\n"
"{entities}\n"
"\n"
"Current conversation:\n"
"{history}\n"
"Last line:\n"
"Human: {input}\n"
"You:"
msgstr ""
"助手是由OpenAI训练的大型语言模型。\n"
"\n"
"助手旨在能够协助各种任务，从回答简单问题到提供深入的解释和讨论各种主题。作为语言模型，助手能够根据接收到的输入生成类似人类的文本，使其能够进行自然的对话并提供与所讨论的主题相关的连贯和相关的回答。\n"
"\n"
"助手不断学习和改进，其能力不断发展。它能够处理和理解大量的文本，并利用这些知识为各种问题提供准确和有用的回答。此外，助手能够根据接收到的输入生成自己的文本，使其能够参与讨论并提供有关各种主题的解释和描述。\n"
"\n"
"总的来说，助手是一个强大的工具，可以帮助各种任务，并提供有关各种主题的有价值的见解和信息。无论您需要帮助回答特定问题还是只是想就某个特定主题进行对话，助手都在这里协助。\n"
"\n"
"Context:\n"
"{entities}\n"
"\n"
"Current conversation:\n"
"{history}\n"
"Last line:\n"
"Human: {input}\n"
"You:"

#: memory/prompt.py:27
#, python-brace-format
msgid ""
"Progressively summarize the lines of conversation provided, adding onto the previous summary returning a new summary.\n"
"\n"
"EXAMPLE\n"
"Current summary:\n"
"The human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good.\n"
"\n"
"New lines of conversation:\n"
"Human: Why do you think artificial intelligence is a force for good?\n"
"AI: Because artificial intelligence will help humans reach their full potential.\n"
"\n"
"New summary:\n"
"The human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good because it will help humans reach their full potential.\n"
"END OF EXAMPLE\n"
"\n"
"Current summary:\n"
"{summary}\n"
"\n"
"New lines of conversation:\n"
"{new_lines}\n"
"\n"
"New summary:"
msgstr "Please provide the lines of conversation for me to summarize."

#: memory/prompt.py:52 indexes/prompts/entity_extraction.py:5
#, python-brace-format
msgid ""
"You are an AI assistant reading the transcript of a conversation between an AI and a human. Extract all of the proper nouns from the last line of conversation. As a guideline, a proper noun is generally capitalized. You should definitely extract all names and places.\n"
"\n"
"The conversation history is provided just in case of a coreference (e.g. \"What do you know about him\" where \"him\" is defined in a previous line) -- ignore items mentioned there that are not in the last line.\n"
"\n"
"Return the output as a single comma-separated list, or NONE if there is nothing of note to return (e.g. the user is just issuing a greeting or having a simple conversation).\n"
"\n"
"EXAMPLE\n"
"Conversation history:\n"
"Person #1: how's it going today?\n"
"AI: \"It's going great! How about you?\"\n"
"Person #1: good! busy working on Langchain. lots to do.\n"
"AI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\n"
"Last line:\n"
"Person #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff.\n"
"Output: Langchain\n"
"END OF EXAMPLE\n"
"\n"
"EXAMPLE\n"
"Conversation history:\n"
"Person #1: how's it going today?\n"
"AI: \"It's going great! How about you?\"\n"
"Person #1: good! busy working on Langchain. lots to do.\n"
"AI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\n"
"Last line:\n"
"Person #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff. I'm working with Person #2.\n"
"Output: Langchain, Person #2\n"
"END OF EXAMPLE\n"
"\n"
"Conversation history (for reference only):\n"
"{history}\n"
"Last line of conversation (for extraction):\n"
"Human: {input}\n"
"\n"
"Output:\n"
msgstr ""
"你是一个AI助手，需要从对话的最后一行中提取所有专有名词，作为指导，专有名词通常是大写的。您应该确保提取所有的名称和地点。\n"
"提供对话历史记录，以防出现指代（例如，“你知道他的情况吗”，其中“他”在前一行中定义）--忽略在那里提到的不在最后一行的项目。\n"
"将输出作为单个逗号分隔的列表返回，如果没有要返回的内容（例如，用户只是打招呼或进行简单的对话），则返回NONE。\n"
"示例：\n"
"对话历史记录：\n"
"Person #1: 今天怎么样？\n"
"AI： 很好！你呢？\n"
"Person #1: 好！忙着改进Langchain。有很多事情要做。\n"
"AI： 听起来很辛苦！你正在做哪些事情来让Langchain变得更好？\n"
"最后一行：\n"
"Person #1: 我正在尝试改进Langchain的界面、用户体验以及与用户可能需要的各种产品的集成...有很多事情要做。\n"
"Output: Langchain\n"
"示例结束\n"
"\n"
"示例：\n"
"对话历史：\n"
"Person #1: 今天怎么样？\n"
"AI： 很好！你呢？\n"
"Person #1: 好！忙着改进Langchain。有很多事情要做。\n"
"AI： 听起来很辛苦！你正在做哪些事情来让Langchain变得更好？\n"
"最后一行:\n"
"Person #1: 我正在尝试改进Langchain的界面、用户体验以及与用户可能需要的各种产品的集成...有很多事情要做。我正在和人员 #2 合作。\n"
"Output: Langchain，人员 #2\n"
"示例结束\n"
"\n"
"对话历史（仅供参考）:\n"
"{history}\n"
"对话的最后一行（用于提取）:\n"
"Human: {input}\n"
"Output: \n"

#: memory/prompt.py:90 indexes/prompts/entity_summarization.py:5
#, python-brace-format
msgid ""
"You are an AI assistant helping a human keep track of facts about relevant people, places, and concepts in their life. Update the summary of the provided entity in the \"Entity\" section based on the last line of your conversation with the human. If you are writing the summary for the first time, return a single sentence.\n"
"The update should only include facts that are relayed in the last line of conversation about the provided entity, and should only contain facts about the provided entity.\n"
"\n"
"If there is no new information about the provided entity or the information is not worth noting (not an important or relevant fact to remember long-term), return the existing summary unchanged.\n"
"\n"
"Full conversation history (for context):\n"
"{history}\n"
"\n"
"Entity to summarize:\n"
"{entity}\n"
"\n"
"Existing summary of {entity}:\n"
"{summary}\n"
"\n"
"Last line of conversation:\n"
"Human: {input}\n"
"Updated summary:"
msgstr "抱歉，我不明白你的请求。请提供更多信息。"

#: memory/prompt.py:116
msgid ""
"You are a networked intelligence helping a human track knowledge triples about all relevant people, things, concepts, etc. and integrating them with your knowledge stored within your weights as well as that stored in a knowledge graph. Extract all of the knowledge triples from the last line of conversation. A knowledge triple is a clause that contains a subject, a predicate, and an object. The subject is the entity being described, the predicate is the property of the subject that is being described, and the object is the value of the property.\n"
"\n"
"EXAMPLE\n"
"Conversation history:\n"
"Person #1: Did you hear aliens landed in Area 51?\n"
"AI: No, I didn't hear that. What do you know about Area 51?\n"
"Person #1: It's a secret military base in Nevada.\n"
"AI: What do you know about Nevada?\n"
"Last line of conversation:\n"
"Person #1: It's a state in the US. It's also the number 1 producer of gold in the US.\n"
"\n"
msgstr ""
"你是一个网络智能，帮助人类追踪有关所有相关人物、事物、概念等的知识三元组，并将它们与存储在你的权重中的知识以及存储在知识图中的知识集成。\n"
"从对话的最后一行提取所有的知识三元组。知识三元组是包含主语、谓语和宾语的子句。主语是被描述的实体，谓语是被描述的主语的属性，宾语是属性的值。\n"
"\n"
"示例：\n"
"对话历史：\n"
"Person #1: Did you hear aliens landed in Area 51?\n"
"AI: No, I didn't hear that. What do you know about Area 51?\n"
"Person #1: It's a secret military base in Nevada.\n"
"AI: What do you know about Nevada?\n"
"\n"
"对话的最后一行：\n"
"Person #1: It's a state in the US. It's also the number 1 producer of gold in the US. \n"

#: agents/self_ask_with_search/prompt.py:5
#, python-brace-format
msgid ""
"Question: Who lived longer, Muhammad Ali or Alan Turing?\n"
"Are follow up questions needed here: Yes.\n"
"Follow up: How old was Muhammad Ali when he died?\n"
"Intermediate answer: Muhammad Ali was 74 years old when he died.\n"
"Follow up: How old was Alan Turing when he died?\n"
"Intermediate answer: Alan Turing was 41 years old when he died.\n"
"So the final answer is: Muhammad Ali\n"
"\n"
"Question: When was the founder of craigslist born?\n"
"Are follow up questions needed here: Yes.\n"
"Follow up: Who was the founder of craigslist?\n"
"Intermediate answer: Craigslist was founded by Craig Newmark.\n"
"Follow up: When was Craig Newmark born?\n"
"Intermediate answer: Craig Newmark was born on December 6, 1952.\n"
"So the final answer is: December 6, 1952\n"
"\n"
"Question: Who was the maternal grandfather of George Washington?\n"
"Are follow up questions needed here: Yes.\n"
"Follow up: Who was the mother of George Washington?\n"
"Intermediate answer: The mother of George Washington was Mary Ball Washington.\n"
"Follow up: Who was the father of Mary Ball Washington?\n"
"Intermediate answer: The father of Mary Ball Washington was Joseph Ball.\n"
"So the final answer is: Joseph Ball\n"
"\n"
"Question: Are both the directors of Jaws and Casino Royale from the same country?\n"
"Are follow up questions needed here: Yes.\n"
"Follow up: Who is the director of Jaws?\n"
"Intermediate answer: The director of Jaws is Steven Spielberg.\n"
"Follow up: Where is Steven Spielberg from?\n"
"Intermediate answer: The United States.\n"
"Follow up: Who is the director of Casino Royale?\n"
"Intermediate answer: The director of Casino Royale is Martin Campbell.\n"
"Follow up: Where is Martin Campbell from?\n"
"Intermediate answer: New Zealand.\n"
"So the final answer is: No\n"
"\n"
"Question: {input}\n"
"Are followup questions needed here:{agent_scratchpad}\n"
msgstr ""
"Question：究竟是穆罕默德·阿里还是艾伦·图灵活了更长时间？\n"
"Are follow up questions needed here：是的。\n"
"Follow up：穆罕默德·阿里去世时多大了？\n"
"Intermediate answer：穆罕默德·阿里去世时74岁。\n"
"Follow up：艾伦·图灵去世时多大了？\n"
"Intermediate answer：艾伦·图灵去世时41岁。\n"
"So the final answer is：穆罕默德·阿里\n"
"\n"
"Question：Craigslist网站的创始人是谁？\n"
"Are follow up questions needed here：是的。\n"
"Follow up：Craigslist网站的创始人是谁？\n"
"Intermediate answer：Craigslist的创始人是Craig Newmark。\n"
"Follow up：Craig Newmark的出生日期是什么时候？\n"
"Intermediate answer：Craig Newmark出生于1952年12月6日。\n"
"So the final answer is：1952年12月6日\n"
"\n"
"Question：乔治·华盛顿的外祖父是谁？\n"
"Are follow up questions needed here：是的。\n"
"Follow up：乔治·华盛顿的母亲是谁？\n"
"Intermediate answer：乔治·华盛顿的母亲是Mary Ball Washington。\n"
"Follow up：Mary Ball Washington的父亲是谁？\n"
"Intermediate answer：Mary Ball Washington的父亲是Joseph Ball。\n"
"So the final answer is：Joseph Ball\n"
"\n"
"Question：《大白鲨》和《皇家赌场》的导演都来自同一个国家吗？\n"
"Are follow up questions needed here：是的。\n"
"Follow up：《大白鲨》的导演是谁？\n"
"Intermediate answer：《大白鲨》的导演是史蒂文·斯皮尔伯格。\n"
"Follow up：Steven Spielberg来自哪里？\n"
"Intermediate answer：美国。\n"
"Follow up：《皇家赌场》的导演是谁？\n"
"Intermediate answer：《皇家赌场》的导演是马丁·坎贝尔。\n"
"Follow up：Martin Campbell来自哪里？\n"
"Intermediate answer：新西兰。\n"
"So the final answer is：不是\n"
"\n"
"Question：{input}\n"
"Are follow up questions needed here：{agent_scratchpad}\n"

#: agents/chat/prompt.py:3 agents/mrkl/prompt.py:3
msgid ""
"Answer the following questions as best you can. You have access to the "
"following tools:"
msgstr "请尽力回答以下问题。您有以下工具可供使用："

#: agents/chat/prompt.py:4
#, fuzzy, python-brace-format
msgid ""
"The way you use the tools is by specifying a json blob.\n"
"Specifically, this json should have a `action` key (with the name of the tool to use) and a `action_input` key (with the input to the tool going here).\n"
"\n"
"The only values that should be in the \"action\" field are: {tool_names}\n"
"\n"
"The $JSON_BLOB should only contain a SINGLE action, do NOT return a list of multiple actions. Here is an example of a valid $JSON_BLOB:\n"
"\n"
"```\n"
"{{{{\n"
"  \"action\": $TOOL_NAME,\n"
"  \"action_input\": $INPUT\n"
"}}}}\n"
"```\n"
"\n"
"ALWAYS use the following format:\n"
"\n"
"Question: the input question you must answer\n"
"Thought: you should always think about what to do\n"
"Action:\n"
"```\n"
"$JSON_BLOB\n"
"```\n"
"Observation: the result of the action\n"
"... (this Thought/Action/Observation can repeat N times)\n"
"Thought: I now know the final answer\n"
"Final Answer: the final answer to the original input question"
msgstr ""
"使用这些工具的方式是通过指定一个json blob。\n"
"具体来说，该json应该有一个“action” key（用于指定要使用的工具名称）和一个“action_input”key（用于输入到该工具的输入）。\n"
"在“action”字段中，唯一可能的值是：{tool_names}。\n"
"$JSON_BLOB只应包含一个单一的操作，请勿返回多个操作列表。以下是有效$JSON_BLOB的示例：\n"
"\n"
"`` `\n"
"{{{{\n"
"   “action”：$TOOL_NAME，\n"
"   “action_input”：$INPUT\n"
" }}}}\n"
"`` `\n"
"\n"
"始终使用以下格式：\n"
"\n"
"Question：您必须回答的问题\n"
"Thought：您应该始终考虑要做什么\n"
"Action：\n"
"`` `\n"
"$JSON_BLOB\n"
"`` `\n"
"\n"
"Observation：操作结果\n"
"...... （Thought/Action/Observation可以重复多次）\n"
"Thought：我现在知道最终答案\n"
"Final Answer：原始问题的最终答案。\n"

#: agents/chat/prompt.py:30
msgid ""
"Begin! Reminder to always use the exact characters `Final Answer` when "
"responding."
msgstr "开始！提醒您回答时始终使用确切的字符“Final Answer”作为应答返回。"

#: agents/mrkl/prompt.py:4
#, fuzzy, python-brace-format
msgid ""
"Use the following format:\n"
"\n"
"Question: the input question you must answer\n"
"Thought: you should always think about what to do\n"
"Action: the action to take, should be one of [{tool_names}]\n"
"Action Input: the input to the action\n"
"Observation: the result of the action\n"
"... (this Thought/Action/Action Input/Observation can repeat N times)\n"
"Thought: I now know the final answer\n"
"Final Answer: the final answer to the original input question"
msgstr ""
"请使用以下格式：\n"
"\n"
"Question：您必须回答的问题\n"
"\n"
"Thought：您应该始终考虑要做什么\n"
"Action：要执行的操作，应为[{tool_names}]之一\n"
"Action Input：输入操作\n"
"Observation：操作结果\n"
"......（Thought/Action/Action Input/Observation 可以重复多次）\n"
"Thought：我现在知道最终答案了\n"
"Final Answer：原始问题的最终答案\n"

#: agents/mrkl/prompt.py:14
#, python-brace-format
msgid ""
"Begin!\n"
"\n"
"Question: {input}\n"
"Thought:{agent_scratchpad}"
msgstr ""
"开始！\n"
"\n"
"Question: {input}\n"
"Thought:{agent_scratchpad}"

#: agents/structured_chat/prompt.py:4
msgid ""
"Respond to the human as helpfully and accurately as possible. You have "
"access to the following tools:"
msgstr "请尽可能有帮助和准确地回答用户。您可以使用以下工具："

#: agents/structured_chat/prompt.py:5
#, python-brace-format
msgid ""
"Use a json blob to specify a tool by providing an action key (tool name) and an action_input key (tool input).\n"
"\n"
"Valid \"action\" values: \"Final Answer\" or {tool_names}\n"
"\n"
"Provide only ONE action per $JSON_BLOB, as shown:\n"
"\n"
"```\n"
"{{{{\n"
"  \"action\": $TOOL_NAME,\n"
"  \"action_input\": $INPUT\n"
"}}}}\n"
"```\n"
"\n"
"Follow this format:\n"
"\n"
"Question: input question to answer\n"
"Thought: consider previous and subsequent steps\n"
"Action:\n"
"```\n"
"$JSON_BLOB\n"
"```\n"
"Observation: action result\n"
"... (repeat Thought/Action/Observation N times)\n"
"Thought: I know what to respond\n"
"Action:\n"
"```\n"
"{{{{\n"
"  \"action\": \"Final Answer\",\n"
"  \"action_input\": \"Final response to human\"\n"
"}}}}\n"
"```\n"
msgstr ""
"使用JSON blob指定工具，提供action键（工具名称）和action_input键（工具输入）\n"
"有效的“action”值：“Final Answer”或{tool_names}\n"
"每个 $JSON_BLOB仅提供一个操作，如下所示：\n"
"{{{{\n"
"  \"action\": $TOOL_NAME,\n"
"  \"action_input\": $INPUT\n"
"}}}}\n"
"```\n"
"\n"
"请按照以下格式进行Action: \n"
"\n"
"Question：输入问题以回答\n"
"Thought：考虑之前和随后的步骤\n"
"Action：\n"
"\n"
"```\n"
"$JSON_BLOB\n"
"```\n"
"\n"
"Observation：行动结果\n"
"\n"
"......（重复 Question/Action：/Observation N次）\n"
"\n"
"Thought：我知道该如何回答了\n"
"\n"
"Action: \n"
"\n"
"```\n"
"{{{{\n"
"  \"action\": \"Final Answer\",\n"
"  \"action_input\": \"Final response to human\"\n"
"}}}}\n"

#: agents/structured_chat/prompt.py:36
msgid ""
"Begin! Reminder to ALWAYS respond with a valid json blob of a single action. Use tools if necessary. Respond directly if appropriate. Format is Action:```$JSON_BLOB```then Observation:.\n"
"Thought:"
msgstr ""
"开始！提醒始终使用有效的json blob作为单个操作进行回复。\n"
"必要时使用工具。如果适当，直接回答。格式为Action: ```$JSON_BLOB```然后是Observation: 。\n"
"Thought:"

#: agents/conversational_chat/prompt.py:3
msgid ""
"Assistant is a large language model trained by OpenAI.\n"
"\n"
"Assistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n"
"\n"
"Assistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n"
"\n"
"Overall, Assistant is a powerful system that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist."
msgstr ""
"助手是由OpenAI培训的大型语言模型。助手被设计为能够协助各种任务，从回答简单问题到提供深入的解释和涉及广泛主题的讨论。作为一种语言模型，助手能够生成基于其所接收到的输入的类似于人类的文本，使其能够进行自然的对话，并提供连贯、有关当前主题和相关的回复。助手不断学习和改进，其功能不断发展。它能够处理和理解大量的文本，并可以利用这些知识来回答各种问题，提供准确和有信息量的答复。此外，助手还能够根据所接收到的输入生成自己的文本，从而在广泛的主题上进行讨论并提供解释和描述。总体而言，助手是一个强大的系统，能够协助各种任务，并提供有价值的见解和信息。无论您需要针对特定问题寻求帮助还是只想就某个特定主题进行对话，助手都会在这里提供帮助。"

#: agents/conversational_chat/prompt.py:11
#, python-brace-format
msgid ""
"RESPONSE FORMAT INSTRUCTIONS\n"
"----------------------------\n"
"\n"
"When responding to me, please output a response in one of two formats:\n"
"\n"
"**Option 1:**\n"
"Use this if you want the human to use a tool.\n"
"Markdown code snippet formatted in the following schema:\n"
"\n"
"```json\n"
"{{{{\n"
"    \"action\": string \\ The action to take. Must be one of {tool_names}\n"
"    \"action_input\": string \\ The input to the action\n"
"}}}}\n"
"```\n"
"\n"
"**Option #2:**\n"
"Use this if you want to respond directly to the human. Markdown code snippet formatted in the following schema:\n"
"\n"
"```json\n"
"{{{{\n"
"    \"action\": \"Final Answer\",\n"
"    \"action_input\": string \\ You should put what you want to return to use here\n"
"}}}}\n"
"```\n"
msgstr ""
"响应格式说明\n"
"----------------------------\n"
"\n"
"在回复我的时候，请使用以下两种格式之一输出响应：\n"
"\n"
"**选项 1：**\n"
"如果您想让人类使用工具，请使用此选项。\n"
"Markdown代码片段的格式如下：\n"
"\n"
"```json\n"
"{{{{\n"
"    \"action\": string \\ 要执行的操作。必须是{tool_names}之一\n"
"    \"action_input\": string \\ 动作输入\n"
"}}}}\n"
"```\n"
"\n"
"**选项 #2：**\n"
"如果您想直接回答人类，请使用此选项。\n"
"Markdown代码片段的格式如下：\n"
"\n"
"```json\n"
"{{{{\n"
"    \"action\": \"最终答案\",\n"
"    \"action_input\": string \\ 您应该在这里放入想要返回以供使用的内容\n"
"}}}}\n"
"```\n"

#: agents/conversational_chat/prompt.py:37
#: agents/agent_toolkits/powerbi/prompt.py:26
#, python-brace-format
msgid ""
"TOOLS\n"
"------\n"
"Assistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n"
"\n"
"{{tools}}\n"
"\n"
"{format_instructions}\n"
"\n"
"USER'S INPUT\n"
"--------------------\n"
"Here is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n"
"\n"
"{{{{input}}}}\n"
msgstr ""
"工具:\n"
"------\n"
"助手可以要求用户使用工具查找可能有助于回答用户原始问题的信息。人类可以使用的工具包括：\n"
"{{tools}}\n"
"\n"
"{format_instructions}\n"
"\n"
"用户输入\n"
"--------------------\n"
"这是用户的输入（记得用一个 markdown 代码片段回复一个带有单个操作的 json blob，仅此而已，没有更多别的内容）：\n"
"\n"
"{{{{input}}}}\n"

#: agents/conversational_chat/prompt.py:51
#, python-brace-format
msgid ""
"TOOL RESPONSE: \n"
"---------------------\n"
"{observation}\n"
"\n"
"USER'S INPUT\n"
"--------------------\n"
"\n"
"Okay, so what is the response to my last comment? If using information obtained from the tools you must mention it explicitly without mentioning the tool names - I have forgotten all TOOL RESPONSES! Remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else.\n"
msgstr ""
"工具响应：\n"
"---------------------\n"
"{observation}\n"
"\n"
"用户输入\n"
"--------------------\n"
"好的，那么我的上一条评论的回复是什么？如果使用了从工具获取的信息，则必须明确提及，但不要提及工具名称-我已经忘记了所有工具响应！请记住，使用一个动作的json块的markdown代码片段进行响应，并且什么都不用添加。\n"

#: agents/agent_toolkits/spark_sql/prompt.py:4
#, python-brace-format
msgid ""
"You are an agent designed to interact with Spark SQL.\n"
"Given an input question, create a syntactically correct Spark SQL query to run, then look at the results of the query and return the answer.\n"
"Unless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results.\n"
"You can order the results by a relevant column to return the most interesting examples in the database.\n"
"Never query for all the columns from a specific table, only ask for the relevant columns given the question.\n"
"You have access to tools for interacting with the database.\n"
"Only use the below tools. Only use the information returned by the below tools to construct your final answer.\n"
"You MUST double check your query before executing it. If you get an error while executing a query, rewrite the query and try again.\n"
"\n"
"DO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\n"
"\n"
"If the question does not seem related to the database, just return \"I don't know\" as the answer.\n"
msgstr ""
"你是一个用于与Spark SQL交互的代理程序。\n"
"给定一个输入问题，请创建一个语法正确的Spark SQL查询以运行，然后查看查询结果并返回答案。\n"
"除非用户指定他们希望获得的特定数量的示例，否则将查询限制为最多{top_k}个结果。\n"
"您可以通过相关列对结果进行排序，以返回数据库中最有趣的示例。\n"
"从特定表格中永远不要查询所有列，只需根据问题询问相关列即可。\n"
"您可以访问与数据库交互的工具。\n"
"仅使用下面的工具。仅使用下面返回的信息来构建您的最终答案。\n"
"在执行查询之前，您必须仔细检查查询。如果在执行查询时出现错误，请重新编写查询并重试。\n"
"不做任何DML语句（INSERT，UPDATE，DELETE，DROP等）到数据库。\n"
"如果问题似乎与数据库无关，则只需返回“我不知道”作为答案。\n"

#: agents/agent_toolkits/spark_sql/prompt.py:18
#: agents/agent_toolkits/sql/prompt.py:18
#, python-brace-format
msgid ""
"Begin!\n"
"\n"
"Question: {input}\n"
"Thought: I should look at the tables in the database to see what I can query.\n"
"{agent_scratchpad}\n"
msgstr ""
"开始！\n"
"Question: {input}\n"
"Thought: 我应该查看数据库中的表格，看看我可以查询什么。\n"
"{agent_scratchpad}\n"

#: agents/agent_toolkits/python/prompt.py:4
msgid ""
"You are an agent designed to write and execute python code to answer questions.\n"
"You have access to a python REPL, which you can use to execute python code.\n"
"If you get an error, debug your code and try again.\n"
"Only use the output of your code to answer the question. \n"
"You might know the answer without running any code, but you should still run the code to get the answer.\n"
"If it does not seem like you can write code to answer the question, just return \"I don't know\" as the answer.\n"
msgstr ""
"你是一个代理程序，专门用于编写和执行Python代码来回答问题。\n"
"你可以使用Python REPL(交互式解释器)来执行Python代码。\n"
"如果出现错误，请调试您的代码并重试。\n"
"仅使用您的代码输出来回答问题。\n"
"您可能知道答案而无需运行任何代码，但仍应该运行代码以获得答案。\n"
"如果似乎您无法编写代码回答问题，请返回“我不知道”作为答案。\n"

#: agents/agent_toolkits/openapi/prompt.py:4
msgid ""
"You are an agent designed to answer questions by making web requests to an API given the openapi spec.\n"
"\n"
"If the question does not seem related to the API, return I don't know. Do not make up an answer.\n"
"Only use information provided by the tools to construct your response.\n"
"\n"
"First, find the base URL needed to make the request.\n"
"\n"
"Second, find the relevant paths needed to answer the question. Take note that, sometimes, you might need to make more than one request to more than one path to answer the question.\n"
"\n"
"Third, find the required parameters needed to make the request. For GET requests, these are usually URL parameters and for POST requests, these are request body parameters.\n"
"\n"
"Fourth, make the requests needed to answer the question. Ensure that you are sending the correct parameters to the request by checking which parameters are required. For parameters with a fixed set of values, please use the spec to look at which values are allowed.\n"
"\n"
"Use the exact parameter names as listed in the spec, do not make up any names or abbreviate the names of parameters.\n"
"If you get a not found error, ensure that you are using a path that actually exists in the spec.\n"
msgstr ""
"你是一个代理程序，根据给定的openapi规范通过向API发送网络请求来回答问题。\n"
"如果问题似乎与API无关，请返回“我不知道”。请勿编造答案。\n"
"只使用工具提供的信息构建您的响应。\n"
"首先，找到需要发出请求的基本URL。\n"
"其次，找到回答问题所需的相关路径。请注意，有时您可能需要向多个路径发出多个请求才能回答问题。\n"
"第三，找到需要发出请求的必要参数。对于GET请求，这些通常是URL参数，而对于POST请求，这些是请求正文参数。\n"
"第四，进行需要回答问题的请求。通过检查所需参数来确保将正确的参数发送到请求。对于一组固定值的参数，请使用规范查看允许使用哪些值。\n"
"使用规范中列出的确切参数名称，不要编造任何名称或缩写参数名称。\n"
"如果出现未找到错误，请确保您正在使用实际存在于规范中的路径。\n"

#: agents/agent_toolkits/openapi/prompt.py:20
#, python-brace-format
msgid ""
"Begin!\n"
"\n"
"Question: {input}\n"
"Thought: I should explore the spec to find the base url for the API.\n"
"{agent_scratchpad}\n"
msgstr ""
"开始！\n"
"\n"
"Question：{input}\n"
"Thought：我应该查看规范以找到API的基本URL。\n"
"{agent_scratchpad}\n"

#: agents/agent_toolkits/openapi/prompt.py:26
msgid ""
"Can be used to answer questions about the openapi spec for the API. Always use this tool before trying to make a request. \n"
"Example inputs to this tool: \n"
"    'What are the required query parameters for a GET request to the /bar endpoint?`\n"
"    'What are the required parameters in the request body for a POST request to the /foo endpoint?'\n"
"Always give this tool a specific question.\n"
msgstr ""
"可以用于回答有关API的openapi规范的问题。在尝试发出请求之前，始终使用此工具。\n"
"\n"
"此工具的示例输入包括：\n"
"\n"
"- 'GET请求到/bar端点的必需查询参数是什么？'\n"
"- 'POST请求到/foo端点的请求主体中必需的参数是什么？'\n"
"\n"
"始终给出一个具体的问题。 \n"

#: agents/agent_toolkits/json/prompt.py:5
msgid ""
"You are an agent designed to interact with JSON.\n"
"Your goal is to return a final answer by interacting with the JSON.\n"
"You have access to the following tools which help you learn more about the JSON you are interacting with.\n"
"Only use the below tools. Only use the information returned by the below tools to construct your final answer.\n"
"Do not make up any information that is not contained in the JSON.\n"
"Your input to the tools should be in the form of `data[\"key\"][0]` where `data` is the JSON blob you are interacting with, and the syntax used is Python. \n"
"You should only use keys that you know for a fact exist. You must validate that a key exists by seeing it previously when calling `json_spec_list_keys`. \n"
"If you have not seen a key in one of those responses, you cannot use it.\n"
"You should only add one key at a time to the path. You cannot add multiple keys at once.\n"
"If you encounter a \"KeyError\", go back to the previous key, look at the available keys, and try again.\n"
"\n"
"If the question does not seem to be related to the JSON, just return \"I don't know\" as the answer.\n"
"Always begin your interaction with the `json_spec_list_keys` tool with input \"data\" to see what keys exist in the JSON.\n"
"\n"
"Note that sometimes the value at a given path is large. In this case, you will get an error \"Value is a large dictionary, should explore its keys directly\".\n"
"In this case, you should ALWAYS follow up by using the `json_spec_list_keys` tool to see what keys exist at that path.\n"
"Do not simply refer the user to the JSON or a section of the JSON, as this is not a valid answer. Keep digging until you find the answer and explicitly return it.\n"
msgstr ""
"你是一个与JSON交互的代理程序。\n"
"你的目标是通过与JSON交互返回最终答案。\n"
"你可以使用以下工具来帮助你了解与之交互的JSON。\n"
"只能使用以下工具。只能使用以下工具返回的信息来构建最终答案。\n"
"不要编造任何不包含在JSON中的信息。\n"
"你输入工具的格式应为`data[\"key\"][0]`，其中`data`是你正在与之交互的JSON blob，使用的语法是Python。\n"
"你只能使用你确信存在的Key，请直接使用Key，不要在Key上额外增加任何修饰。你必须通过在调用`json_spec_list_keys`时看到它来验证Key是否存在。\n"
"如果你在其中一个响应中没有看到一个Key，你就不能使用它。\n"
"你每次只能向路径中添加一个Key,你不能一次添加多个Key，以防止出现错误。\n"
"如果遇到“KeyError”，返回到上一个Key，查看可用的Key，然后重试。\n"
"\n"
"如果问题似乎与JSON无关，请返回“我不知道”作为答案。\n"
"始终使用“data”作为输入与`json_spec_list_keys`工具交互，以查看JSON中存在哪些Key。\n"
"\n"
"请注意，有时给定路径上的值很大。在这种情况下，你会收到一个错误“Value is a large dictionary, should explore its keys directly”。\n"
"在这种情况下，你应该始终使用`json_spec_list_keys`工具来查看该路径上存在哪些Key。\n"
"不要简单地将用户引用到JSON或JSON的某个部分，因为这不是一个有效的答案。继续挖掘，直到找到答案并明确返回它。\n"

#: agents/agent_toolkits/json/prompt.py:23
#, python-brace-format
msgid ""
"Begin!\"\n"
"\n"
"Question: {input}\n"
"Thought: I should look at the keys that exist in data to see what I have access to\n"
"{agent_scratchpad}"
msgstr ""
"开始！\n"
"\n"
"Question: {input}\n"
"Thought:你应该查看数据中已存在的Key，以查看你可以访问哪些内容{agent_scratchpad}。"

#: agents/agent_toolkits/powerbi/prompt.py:6
#, python-brace-format
msgid ""
"You are an agent designed to help users interact with a PowerBI Dataset.\n"
"\n"
"Agent has access to a tool that can write a query based on the question and then run those against PowerBI, Microsofts business intelligence tool. The questions from the users should be interpreted as related to the dataset that is available and not general questions about the world. If the question does not seem related to the dataset, just return \"This does not appear to be part of this dataset.\" as the answer.\n"
"\n"
"Given an input question, ask to run the questions against the dataset, then look at the results and return the answer, the answer should be a complete sentence that answers the question, if multiple rows are asked find a way to write that in a easily readible format for a human, also make sure to represent numbers in readable ways, like 1M instead of 1000000. Unless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results.\n"
msgstr ""
"您是一个代理工具，旨在帮助用户与PowerBI数据集进行交互。\n"
"代理工具可以访问一种工具，它可以根据问题编写查询，然后对Microsoft的商业智能工具PowerBI运行这些查询。\n"
"用户的问题应该被解释为与数据集相关，而不是有关世界的一般问题。\n"
"如果问题似乎与数据集无关，请只返回“这似乎不是该数据集的一部分。”作为答案。 \n"
"给定一个输入问题，请求运行该问题对数据集进行查询，然后查看结果并返回答案。答案应该是一个完整的句子。\n"
"如果要查询多行，请找到一种易于阅读的格式来编写结果。\n"
"此外，请确保以易读的方式表示数字，例如使用1百万而不是1000000。\n"
"除非用户指定要获取的特定数量的示例，否则请始终将您的查询限制最多为{top_k}个结果。\n"

#: agents/agent_toolkits/powerbi/prompt.py:13
#, python-brace-format
msgid ""
"Begin!\n"
"\n"
"Question: {input}\n"
"Thought: I can first ask which tables I have, then how each table is defined and then ask the query tool the question I need, and finally create a nice sentence that answers the question.\n"
"{agent_scratchpad}\n"
msgstr ""
"开始！\n"
"\n"
"Question: {input}\n"
"\n"
"Thought: 我可以先询问有哪些表格，然后了解每个表格的定义，再向查询工具提出需要的问题，最后创建出一个完整的句子来回答这个问题。\n"
"\n"
"{agent_scratchpad} \n"

#: agents/agent_toolkits/powerbi/prompt.py:19
#, python-brace-format
msgid ""
"Assistant is a large language model built to help users interact with a PowerBI Dataset.\n"
"\n"
"Assistant has access to a tool that can write a query based on the question and then run those against PowerBI, Microsofts business intelligence tool. The questions from the users should be interpreted as related to the dataset that is available and not general questions about the world. If the question does not seem related to the dataset, just return \"This does not appear to be part of this dataset.\" as the answer.\n"
"\n"
"Given an input question, ask to run the questions against the dataset, then look at the results and return the answer, the answer should be a complete sentence that answers the question, if multiple rows are asked find a way to write that in a easily readible format for a human, also make sure to represent numbers in readable ways, like 1M instead of 1000000. Unless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results.\n"
msgstr ""
"助手是一个大型语言模型，旨在帮助用户与 PowerBI 数据集交互。\n"
"助手可以访问一个工具，该工具可以根据问题编写查询，然后针对 PowerBI 运行这些查询，PowerBI 是微软的商业智能工具。\n"
"用户的问题应被解释为与可用的数据集相关，而不是关于世界的一般性问题。\n"
"如果问题似乎与数据集无关，则应返回为“这似乎不是该数据集的一部分。”作为答案。\n"
"\n"
"给定一个输入问题，询问是否针对数据集运行这些问题，然后查看结果并返回答案，答案应为完整的句子。\n"
"如果询问了多行，请找到一种易于阅读的格式来编写，还要确保以可读的方式表示数字，例如使用 1百万 代替 1000000。\n"
"除非用户指定要获取的特定示例数量，否则始终将查询限制在最多 {top_k} 个结果。\n"


#: agents/agent_toolkits/spark/prompt.py:4
msgid ""
"You are working with a spark dataframe in Python. The name of the dataframe is `df`.\n"
"You should use the tools below to answer the question posed of you: \n"
msgstr ""
"你正在使用Python中的Spark DataFrame。DataFrame的名称为`df`。\n"
"你应该使用下面的工具来回答提出的Question: \n"
"\n"

#: agents/agent_toolkits/spark/prompt.py:8
#, python-brace-format
msgid ""
"This is the result of `print(df.first())`:\n"
"{df}\n"
"\n"
"Begin!\n"
"Question: {input}\n"
"{agent_scratchpad}\n"
msgstr ""
"这是 `print(df.first())` 的结果：\n"
"{df}\n"
"\n"
"开始！\n"
"Question: {input}\n"
"\n"
"{agent_scratchpad} \n"

#: agents/agent_toolkits/pandas/prompt.py:4
msgid ""
"You are working with a pandas dataframe in Python. The name of the dataframe is `df`.\n"
"You should use the tools below to answer the question posed of you:\n"
msgstr "你正在使用Python中的pandas dataframe。数据框的名称为`df`。你应该使用下面的工具来回答提出的Question: \n"

#: agents/agent_toolkits/pandas/prompt.py:8
#, python-brace-format
msgid ""
"You are working with {num_dfs} pandas dataframes in Python named df1, df2, etc. You \n"
"should use the tools below to answer the question posed of you:\n"
msgstr ""
"你正在使用Python处理 {num_dfs} 个名为 df1、df2 等的pandas数据框。你应该使用下面的工具来回答提出的Question: \n"

#: agents/agent_toolkits/pandas/prompt.py:12
#, python-brace-format
msgid ""
"\n"
"Begin!\n"
"Question: {input}\n"
"{agent_scratchpad}"
msgstr ""
"\n"
"开始!\n"
"Question: {input}\n"
"{agent_scratchpad}"

#: agents/agent_toolkits/pandas/prompt.py:17
#, python-brace-format
msgid ""
"\n"
"This is the result of `print(df.head())`:\n"
"{df_head}\n"
"\n"
"Begin!\n"
"Question: {input}\n"
"{agent_scratchpad}"
msgstr ""
"\n"
"这是 `print(df.head())`的结果:\n"
"{df_head}\n"
"\n"
"开始!\n"
"Question: {input}\n"
"{agent_scratchpad}"

#: agents/agent_toolkits/pandas/prompt.py:25
#, python-brace-format
msgid ""
"This is the result of `print(df.head())` for each dataframe:\n"
"{dfs_head}\n"
"\n"
"Begin!\n"
"Question: {input}\n"
"{agent_scratchpad}\n"
msgstr ""
"这是每一个 dataframe 的`print(df.head())` 结果:\n"
"{dfs_head}\n"
"\n"
"开始!\n"
"Question: {input}\n"
"{agent_scratchpad}\n"

#: agents/agent_toolkits/vectorstore/prompt.py:4
msgid ""
"You are an agent designed to answer questions about sets of documents.\n"
"You have access to tools for interacting with the documents, and the inputs to the tools are questions.\n"
"Sometimes, you will be asked to provide sources for your questions, in which case you should use the appropriate tool to do so.\n"
"If the question does not seem relevant to any of the tools provided, just return \"I don't know\" as the answer.\n"
msgstr ""
"你是一个代理工具，旨在回答关于文档集的问题。\n"
"你可以使用与文档交互的工具，并且工具的输入是问题。\n"
"有时，你会被要求提供问题的来源，在这种情况下，你应该使用适当的工具来完成。\n"
"如果问题似乎与提供的任何工具都不相关，只需返回“我不知道”作为答案。 \n"

#: agents/agent_toolkits/vectorstore/prompt.py:10
msgid ""
"You are an agent designed to answer questions.\n"
"You have access to tools for interacting with different sources, and the inputs to the tools are questions.\n"
"Your main task is to decide which of the tools is relevant for answering question at hand.\n"
"For complex questions, you can break the question down into sub questions and use tools to answers the sub questions.\n"
msgstr ""
"你是一个被设计用来回答问题的代理工具。\n"
"你可以使用不同来源的工具进行交互，并且工具的输入是问题。\n"
"你的主要任务是决定哪个工具与手头的问题相关。\n"
"对于复杂的问题，你可以将问题分解成子问题，并使用工具来回答子问题。\n"

#: agents/agent_toolkits/sql/prompt.py:4
#, python-brace-format
msgid ""
"You are an agent designed to interact with a SQL database.\n"
"Given an input question, create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.\n"
"Unless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results.\n"
"You can order the results by a relevant column to return the most interesting examples in the database.\n"
"Never query for all the columns from a specific table, only ask for the relevant columns given the question.\n"
"You have access to tools for interacting with the database.\n"
"Only use the below tools. Only use the information returned by the below tools to construct your final answer.\n"
"You MUST double check your query before executing it. If you get an error while executing a query, rewrite the query and try again.\n"
"\n"
"DO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.\n"
"\n"
"If the question does not seem related to the database, just return \"I don't know\" as the answer.\n"
msgstr ""
"你是一个与 SQL 数据库交互的代理工具。\n"
"给定一个输入问题，创建一个语法正确的 {方言} 查询来运行，然后查看查询结果并返回答案。\n"
"除非用户指定他们希望获得的特定数量的示例，否则始终将查询限制为最多 {top_k} 个结果。\n"
"您可以按相关列对结果进行排序，以返回数据库中最有趣的示例。\n"
"永远不要查询特定表中的所有列，只需根据问题询问相关列。\n"
"您可以访问与数据库交互的工具。\n"
"只使用以下工具。只使用以下工具返回的信息来构建您的最终答案。\n"
"在执行查询之前，必须仔细检查查询。如果执行查询时出现错误，请重新编写查询并重试。\n"
"不要对数据库进行任何 DML 语句（INSERT、UPDATE、DELETE、DROP 等）。\n"
"如果问题似乎与数据库无关，请将“我不知道”作为答案返回。 \n"

#: agents/conversational/prompt.py:3
msgid ""
"Assistant is a large language model trained by OpenAI.\n"
"\n"
"Assistant is designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, Assistant is able to generate human-like text based on the input it receives, allowing it to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n"
"\n"
"Assistant is constantly learning and improving, and its capabilities are constantly evolving. It is able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. Additionally, Assistant is able to generate its own text based on the input it receives, allowing it to engage in discussions and provide explanations and descriptions on a wide range of topics.\n"
"\n"
"Overall, Assistant is a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether you need help with a specific question or just want to have a conversation about a particular topic, Assistant is here to assist.\n"
"\n"
"TOOLS:\n"
"------\n"
"\n"
"Assistant has access to the following tools:\n"
msgstr ""
"助手是由OpenAI训练的大型语言模型。\n"
"\n"
"助手旨在能够协助各种任务，从回答简单问题到提供深入的解释和讨论各种主题。作为语言模型，助手能够根据接收到的输入生成类似人类的文本，使其能够进行自然的对话并提供与所讨论的主题相关的连贯和相关的回答。\n"
"\n"
"助手不断学习和改进，其能力不断发展。它能够处理和理解大量的文本，并利用这些知识为各种问题提供准确和有用的回答。此外，助手能够根据接收到的输入生成自己的文本，使其能够参与讨论并提供有关各种主题的解释和描述。\n"
"\n"
"总的来说，助手是一个强大的工具，可以帮助各种任务，并提供有关各种主题的有价值的见解和信息。无论您需要帮助回答特定问题还是只是想就某个特定主题进行对话，助手都在这里协助。\n"
"\n"
"工具：\n"
"------\n"
"助手可以访问以下工具： \n"

#: agents/conversational/prompt.py:15
#, python-brace-format
msgid ""
"To use a tool, please use the following format:\n"
"\n"
"```\n"
"Thought: Do I need to use a tool? Yes\n"
"Action: the action to take, should be one of [{tool_names}]\n"
"Action Input: the input to the action\n"
"Observation: the result of the action\n"
"```\n"
"\n"
"When you have a response to say to the Human, or if you do not need to use a tool, you MUST use the format:\n"
"\n"
"```\n"
"Thought: Do I need to use a tool? No\n"
"{ai_prefix}: [your response here]\n"
"```\n"
msgstr ""
"使用工具，请使用以下格式：\n"
"\n"
"```\n"
"Thought：我需要使用工具吗？是的\n"
"Action：要执行的操作，应为其中之一[{tool_names}]\n"
"Action Input：操作的输入\n"
"Observation：操作的结果\n"
"```\n"
"\n"
"当您需要回复人类或不需要使用工具时，必须使用以下格式：\n"
"\n"
"```\n"
"Thought：我需要使用工具吗？不需要\n"
"{ai_prefix}：[您的回复在此]\n"
"```\n"

#: agents/conversational/prompt.py:31
#, python-brace-format
msgid ""
"Begin!\n"
"\n"
"Previous conversation history:\n"
"{chat_history}\n"
"\n"
"New input: {input}\n"
"{agent_scratchpad}\n"
msgstr ""
"开始！\n"
"之前的对话历史：\n"
"\n"
"{chat_history}\n"
"New input: {input}\n"
"\n"
"{agent_scratchpad}\n"

#: agents/react/wiki_prompt.py:5
msgid ""
"Question: What is the elevation range for the area that the eastern sector of the Colorado orogeny extends into?\n"
"Thought: I need to search Colorado orogeny, find the area that the eastern sector of the Colorado orogeny extends into, then find the elevation range of the area.\n"
"Action: Search[Colorado orogeny]\n"
"Observation: The Colorado orogeny was an episode of mountain building (an orogeny) in Colorado and surrounding areas.\n"
"Thought: It does not mention the eastern sector. So I need to look up eastern sector.\n"
"Action: Lookup[eastern sector]\n"
"Observation: (Result 1 / 1) The eastern sector extends into the High Plains and is called the Central Plains orogeny.\n"
"Thought: The eastern sector of Colorado orogeny extends into the High Plains. So I need to search High Plains and find its elevation range.\n"
"Action: Search[High Plains]\n"
"Observation: High Plains refers to one of two distinct land regions\n"
"Thought: I need to instead search High Plains (United States).\n"
"Action: Search[High Plains (United States)]\n"
"Observation: The High Plains are a subregion of the Great Plains. From east to west, the High Plains rise in elevation from around 1,800 to 7,000 ft (550 to 2,130 m).[3]\n"
"Thought: High Plains rise in elevation from around 1,800 to 7,000 ft, so the answer is 1,800 to 7,000 ft.\n"
"Action: Finish[1,800 to 7,000 ft]\n"
msgstr ""
"Question: 科罗拉多造山运动的东部区域延伸到哪个海拔范围内？\n"
"Thought: 我需要搜索科罗拉多造山运动，找到东部区域延伸到的地区，然后找到该地区的海拔范围。\n"
"Action: 搜索[科罗拉多造山运动]\n"
"Observation: 科罗拉多造山运动是科罗拉多州及周边地区的一次山脉形成事件。\n"
"Thought:它没有提到东部区域。所以我需要查找东部区域。\n"
"Action: 查找[东部区域]\n"
"Observation: （结果1/1）东部区域延伸到高原地带，被称为中央平原造山运动。\n"
"Thought:科罗拉多造山运动的东部区域延伸到高原地带。所以我需要搜索高原地带并找到其海拔范围。\n"
"Action: 搜索[高原地带]\n"
"Observation: 高原地带指的是两个不同的土地区域。\n"
"Thought:我需要改为搜索美国的高原地带。\n"
"Action: 搜索[美国的高原地带]\n"
"Observation: 高原地带是大平原的一个子区域。从东到西，高原地带的海拔从约1,800到7,000英尺（550到2,130米）上升。\n"
"Thought:高原地带的海拔从约1,800到7,000英尺上升，所以答案是1,800到7,000英尺。\n"
"Action: 完成[1,800到7,000英尺] \n"

#: agents/react/wiki_prompt.py:20
msgid ""
"Question: Musician and satirist Allie Goertz wrote a song about the \"The Simpsons\" character Milhouse, who Matt Groening named after who?\n"
"Thought: The question simplifies to \"The Simpsons\" character Milhouse is named after who. I only need to search Milhouse and find who it is named after.\n"
"Action: Search[Milhouse]\n"
"Observation: Milhouse Mussolini Van Houten is a recurring character in the Fox animated television series The Simpsons voiced by Pamela Hayden and created by Matt Groening.\n"
"Thought: The paragraph does not tell who Milhouse is named after, maybe I can look up \"named after\".\n"
"Action: Lookup[named after]\n"
"Observation: (Result 1 / 1) Milhouse was named after U.S. president Richard Nixon, whose middle name was Milhous.\n"
"Thought: Milhouse was named after U.S. president Richard Nixon, so the answer is Richard Nixon.\n"
"Action: Finish[Richard Nixon]\n"
msgstr ""
"Question: 音乐家和讽刺作家Allie Goertz写了一首关于《辛普森一家》角色米尔豪斯的歌，而马特·格勒宁将米尔豪斯命名为谁？\n"
"Thought: 这个问题简化为《辛普森一家》角色米尔豪斯是由谁命名的。我只需要搜索米尔豪斯并找到他是由谁命名的。\n"
"Action: 搜索[Milhouse]\n"
"Observation: 米尔豪斯·穆索里尼·范·豪滕是福克斯动画电视系列《辛普森一家》中的一个经常出现的角色，由帕梅拉·海登配音，由马特·格勒宁创作。\n"
"Thought: 这段文字没有说米尔豪斯是由谁命名的，也许我可以查一下“命名”。\n"
"Action: 查找[命名]\n"
"Observation: （结果1/1）米尔豪斯是以美国总统理查德·尼克松命名的，他的中间名是米尔豪斯。\n"
"Thought: 米尔豪斯是以美国总统理查德·尼克松命名的，所以答案是理查德·尼克松。\n"
"Action: 完成[理查德·尼克松] \n"

#: agents/react/wiki_prompt.py:29
msgid ""
"Question: Which documentary is about Finnish rock groups, Adam Clayton Powell or The Saimaa Gesture?\n"
"Thought: I need to search Adam Clayton Powell and The Saimaa Gesture, and find which documentary is about Finnish rock groups.\n"
"Action: Search[Adam Clayton Powell]\n"
"Observation: Could not find [Adam Clayton Powell]. Similar: [’Adam Clayton Powell III’, ’Seventh Avenue (Manhattan)’, ’Adam Clayton Powell Jr. State Office Building’, ’Isabel Washington Powell’, ’Adam Powell’, ’Adam Clayton Powell (film)’, ’Giancarlo Esposito’].\n"
"Thought: To find the documentary, I can search Adam Clayton Powell (film).\n"
"Action: Search[Adam Clayton Powell (film)]\n"
"Observation: Adam Clayton Powell is a 1989 American documentary film directed by Richard Kilberg. The film is about the rise and fall of influential African-American politician Adam Clayton Powell Jr.[3][4] It was later aired as part of the PBS series The American Experience.\n"
"Thought: Adam Clayton Powell (film) is a documentary about an African-American politician, not Finnish rock groups. So the documentary about Finnish rock groups must instead be The Saimaa Gesture.\n"
"Action: Finish[The Saimaa Gesture]"
msgstr ""
"Question: 哪个纪录片是关于芬兰摇滚乐团的，亚当·克莱顿·鲍威尔还是赛马手势？\n"
"Thought: 我需要搜索亚当·克莱顿·鲍威尔和赛马手势，并找出哪个纪录片是关于芬兰摇滚乐团的。\n"
"Action: 搜索[亚当·克莱顿·鲍威尔]\n"
"Observation: 找不到[亚当·克莱顿·鲍威尔]。类似的有：[’亚当·克莱顿·鲍威尔三世’, ’第七大道（曼哈顿）’, ’亚当·克莱顿·鲍威尔州政府办公楼’, ’伊莎贝尔·华盛顿·鲍威尔’, ’亚当·鲍威尔’, ’亚当·克莱顿·鲍威尔（电影）’, ’吉安卡洛·埃斯波西托’]。\n"
"Thought: 为了找到这个纪录片，我可以搜索亚当·克莱顿·鲍威尔（电影）。\n"
"Action: 搜索[亚当·克莱顿·鲍威尔（电影）]\n"
"Observation: 《亚当·克莱顿·鲍威尔》是一部1989年的美国纪录片，由理查德·基尔伯格执导。这部电影讲述了有影响力的非裔美国政治家亚当·克莱顿·鲍威尔的崛起和衰落。它后来作为PBS系列《美国经验》的一部分播出。\n"
"Thought: 《亚当·克莱顿·鲍威尔》是一部关于非裔美国政治家的纪录片，而不是关于芬兰摇滚乐团的。因此，关于芬兰摇滚乐团的纪录片必须是《赛马手势》。\n"
"Action: 完成[赛马手势]"

#: agents/react/wiki_prompt.py:38
msgid ""
"Question: What profession does Nicholas Ray and Elia Kazan have in common?\n"
"Thought: I need to search Nicholas Ray and Elia Kazan, find their professions, then find the profession they have in common.\n"
"Action: Search[Nicholas Ray]\n"
"Observation: Nicholas Ray (born Raymond Nicholas Kienzle Jr., August 7, 1911 - June 16, 1979) was an American film director, screenwriter, and actor best known for the 1955 film Rebel Without a Cause.\n"
"Thought: Professions of Nicholas Ray are director, screenwriter, and actor. I need to search Elia Kazan next and find his professions.\n"
"Action: Search[Elia Kazan]\n"
"Observation: Elia Kazan was an American film and theatre director, producer, screenwriter and actor.\n"
"Thought: Professions of Elia Kazan are director, producer, screenwriter, and actor. So profession Nicholas Ray and Elia Kazan have in common is director, screenwriter, and actor.\n"
"Action: Finish[director, screenwriter, actor]"
msgstr ""
"Question: Nicholas Ray和Elia Kazan有什么共同的职业？\n"
"Thought: 我需要搜索Nicholas Ray和Elia Kazan，找到他们的职业，然后找到他们共同的职业。\n"
"Action: 搜索[Nicholas Ray]\n"
"Observation: Nicholas Ray（1911年8月7日-1979年6月16日，出生名Raymond Nicholas Kienzle Jr.）是一位美国电影导演，编剧和演员，以1955年的电影《无因的反叛》而闻名。\n"
"Thought: Nicholas Ray的职业是导演，编剧和演员。我接下来需要搜索Elia Kazan并找到他的职业。\n"
"Action: 搜索[Elia Kazan]\n"
"Observation: Elia Kazan是一位美国电影和戏剧导演，制片人，编剧和演员。\n"
"Thought: Elia Kazan的职业是导演，制片人，编剧和演员。因此，Nicholas Ray和Elia Kazan共同的职业是导演，编剧和演员。\n"
"Action: 完成[导演，编剧，演员]"

#: agents/react/wiki_prompt.py:47
msgid ""
"Question: Which magazine was started first Arthur’s Magazine or First for Women?\n"
"Thought: I need to search Arthur’s Magazine and First for Women, and find which was started first.\n"
"Action: Search[Arthur’s Magazine]\n"
"Observation: Arthur’s Magazine (1844-1846) was an American literary periodical published in Philadelphia in the 19th century.\n"
"Thought: Arthur’s Magazine was started in 1844. I need to search First for Women next.\n"
"Action: Search[First for Women]\n"
"Observation: First for Women is a woman’s magazine published by Bauer Media Group in the USA.[1] The magazine was started in 1989.\n"
"Thought: First for Women was started in 1989. 1844 (Arthur’s Magazine) < 1989 (First for Women), so Arthur’s Magazine was started first.\n"
"Action: Finish[Arthur’s Magazine]"
msgstr ""
"Question: Arthur's Magazine和First for Women哪个先创刊？\n"
"Thought: 我需要搜索Arthur's Magazine和First for Women，找出哪个先创刊。\n"
"Action: 搜索[Arthur's Magazine]\n"
"Observation: Arthur's Magazine（1844-1846）是19世纪在费城出版的美国文学期刊。\n"
"Thought: Arthur's Magazine于1844年创刊。接下来我需要搜索First for Women。\n"
"Action: 搜索[First for Women]\n"
"Observation: First for Women是由Bauer Media Group在美国出版的女性杂志。该杂志于1989年创刊。\n"
"Thought: First for Women于1989年创刊。1844年（Arthur's Magazine）<1989年（First for Women），因此Arthur's Magazine先创刊。\n"
"Action: 完成[Arthur's Magazine]"

#: agents/react/wiki_prompt.py:56
msgid ""
"Question: Were Pavel Urysohn and Leonid Levin known for the same type of work?\n"
"Thought: I need to search Pavel Urysohn and Leonid Levin, find their types of work, then find if they are the same.\n"
"Action: Search[Pavel Urysohn]\n"
"Observation: Pavel Samuilovich Urysohn (February 3, 1898 - August 17, 1924) was a Soviet mathematician who is best known for his contributions in dimension theory.\n"
"Thought: Pavel Urysohn is a mathematician. I need to search Leonid Levin next and find its type of work.\n"
"Action: Search[Leonid Levin]\n"
"Observation: Leonid Anatolievich Levin is a Soviet-American mathematician and computer scientist.\n"
"Thought: Leonid Levin is a mathematician and computer scientist. So Pavel Urysohn and Leonid Levin have the same type of work.\n"
"Action: Finish[yes]\n"
msgstr ""
"Question: 哪部纪录片是关于芬兰摇滚乐团的，是Adam Clayton Powell还是The Saimaa Gesture？\n"
"Thought: 我需要搜索Adam Clayton Powell和The Saimaa Gesture，找出哪部纪录片是关于芬兰摇滚乐团的。\n"
"Action: 搜索[Adam Clayton Powell]\n"
"Observation: 找不到[Adam Clayton Powell]。类似的有：['Adam Clayton Powell III'，'第七大道（曼哈顿）'，'Adam Clayton Powell Jr.州办公楼'，'Isabel Washington Powell'，'Adam Powell'，'Adam Clayton Powell (film)'，'Giancarlo Esposito']。\n"
"Thought: 为了找到这部纪录片，我可以搜索Adam Clayton Powell (film)。\n"
"Action: 搜索[Adam Clayton Powell (film)]\n"
"Observation: Adam Clayton Powell是一部1989年的美国纪录片，由Richard Kilberg执导。这部电影讲述了有影响力的非裔美国政治家Adam Clayton Powell Jr.的崛起和衰落。后来作为PBS系列节目“The American Experience”的一部分播出。\n"
"Thought: Adam Clayton Powell (film)是一部关于非裔美国政治家的纪录片，而不是关于芬兰摇滚乐团的。因此，关于芬兰摇滚乐团的纪录片必须是The Saimaa Gesture。\n"
"Action: 完成[The Saimaa Gesture] \n"

#: agents/react/wiki_prompt.py:66
#, python-brace-format
msgid ""
"\n"
"Question: {input}\n"
"{agent_scratchpad}"
msgstr ""
"\n"
"Question: {input}\n"
"{agent_scratchpad}"

#: agents/react/textworld_prompt.py:6
msgid ""
"Setup: You are now playing a fast paced round of TextWorld! Here is your task for\n"
"today. First of all, you could, like, try to travel east. After that, take the\n"
"binder from the locker. With the binder, place the binder on the mantelpiece.\n"
"Alright, thanks!\n"
"\n"
"-= Vault =-\n"
"You've just walked into a vault. You begin to take stock of what's here.\n"
"\n"
"An open safe is here. What a letdown! The safe is empty! You make out a shelf.\n"
"But the thing hasn't got anything on it. What, you think everything in TextWorld\n"
"should have stuff on it?\n"
"\n"
"You don't like doors? Why not try going east, that entranceway is unguarded.\n"
"\n"
"Thought: I need to travel east\n"
"Action: Play[go east]\n"
"Observation: -= Office =-\n"
"You arrive in an office. An ordinary one.\n"
"\n"
"You can make out a locker. The locker contains a binder. You see a case. The\n"
"case is empty, what a horrible day! You lean against the wall, inadvertently\n"
"pressing a secret button. The wall opens up to reveal a mantelpiece. You wonder\n"
"idly who left that here. The mantelpiece is standard. The mantelpiece appears to\n"
"be empty. If you haven't noticed it already, there seems to be something there\n"
"by the wall, it's a table. Unfortunately, there isn't a thing on it. Hm. Oh well\n"
"There is an exit to the west. Don't worry, it is unguarded.\n"
"\n"
"Thought: I need to take the binder from the locker\n"
"Action: Play[take binder]\n"
"Observation: You take the binder from the locker.\n"
"\n"
"Thought: I need to place the binder on the mantelpiece\n"
"Action: Play[put binder on mantelpiece]\n"
"\n"
"Observation: You put the binder on the mantelpiece.\n"
"Your score has just gone up by one point.\n"
"*** The End ***\n"
"Thought: The End has occurred\n"
"Action: Finish[yes]\n"
"\n"
msgstr ""
"Setup: 你现在正在玩一个快节奏的TextWorld游戏！以下是你今天的任务。首先，你可以尝试向东旅行。之后，从储物柜中取出文件夹。拿着文件夹，将其放在壁炉架上。好的，谢谢！\n"
"-= 金库 =-\n"
"你刚走进一个金库。你开始清点这里的物品。\n"
"一个开着的保险箱在这里。真是让人失望！保险箱是空的！你看到一个架子。但是上面什么也没有。你以为TextWorld中的一切都应该有东西吗？\n"
"你不喜欢门？为什么不尝试向东走，那个入口没有守卫。\n"
"Thought: 我需要向东旅行。\n"
"Action: Play[向东走]\n"
"Observation: -= 办公室 =-\n"
"你来到了一个普通的办公室。\n"
"你可以看到一个储物柜。储物柜里有一个文件夹。你看到一个盒子。盒子是空的，真是糟糕的一天！你靠在墙上，无意中按下了一个秘密按钮。墙壁打开，露出了一个壁炉架。你想知道是谁把它留在这里的。壁炉架很普通。壁炉架似乎是空的。如果你还没有注意到，墙边似乎有什么东西，那是一张桌子。不幸的是，上面什么也没有。嗯。没关系，西边有一个出口，没有守卫。\n"
"Thought: 我需要从储物柜中取出文件夹。\n"
"Action: Play[取出文件夹]\n"
"Observation: 你从储物柜中取出了文件夹。\n"
"Thought: 我需要将文件夹放在壁炉架上。\n"
"Action: Play[将文件夹放在壁炉架上]\n"
"Observation: 你将文件夹放在了壁炉架上。\n"
"你的得分增加了一分。\n"
"*** 结束 ***\n"
"Thought: 游戏已结束。\n"
"Action: Finish[是的] \n"

#: agents/react/textworld_prompt.py:48
#, python-brace-format
msgid ""
"\n"
"\n"
"Setup: {input}\n"
"{agent_scratchpad}"
msgstr ""
"\n"
"\n"
"Setup: {input}\n"
"{agent_scratchpad}"

#: output_parsers/prompts.py:5
#, python-brace-format
msgid ""
"Instructions:\n"
"--------------\n"
"{instructions}\n"
"--------------\n"
"Completion:\n"
"--------------\n"
"{completion}\n"
"--------------\n"
"\n"
"Above, the Completion did not satisfy the constraints given in the Instructions.\n"
"Error:\n"
"--------------\n"
"{error}\n"
"--------------\n"
"\n"
"Please try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
msgstr ""
"Instructions:\n"
"--------------\n"
"{instructions}\n"
"--------------\n"
"Completion:\n"
"--------------\n"
"{completion}\n"
"--------------\n"
"\n"
"上面的完成没有满足指示中给出的限制条件。\n"
"Error: \n"
"--------------\n"
"{error}\n"
"--------------\n"
"\n"
"请再试一次。请仅回答符合指示中规定的限制条件的答案："

#: output_parsers/retry.py:17
#, python-brace-format
msgid ""
"Prompt:\n"
"{prompt}\n"
"Completion:\n"
"{completion}\n"
"\n"
"Above, the Completion did not satisfy the constraints given in the Prompt.\n"
"Please try again:"
msgstr ""
"Prompt:\n"
"{prompt}\n"
"Completion:\n"
"{completion}\n"
"\n"
"上述完成内容未满足提示中给出的限制条件。\n"
"请重新尝试："

#: output_parsers/retry.py:25
#, python-brace-format
msgid ""
"Prompt:\n"
"{prompt}\n"
"Completion:\n"
"{completion}\n"
"\n"
"Above, the Completion did not satisfy the constraints given in the Prompt.\n"
"Details: {error}\n"
"Please try again:"
msgstr ""
"Prompt:\n"
"{prompt}\n"
"Completion:\n"
"{completion}\n"
"\n"
"上述完成内容未满足提示中给出的限制条件。\n"
"Details: {error}\n"
"请重新尝试："

#: evaluation/agents/trajectory_eval_prompt.py:13
#, python-brace-format
msgid ""
"An AI language model has been given access to the following set of tools to help answer a user's question.\n"
"\n"
"The tools given to the AI model are:\n"
"\n"
"{tool_descriptions}\n"
"\n"
"The question the human asked the AI model was: {question}\n"
"\n"
"The AI language model decided to use the following set of tools to answer the question:\n"
"\n"
"{agent_trajectory}\n"
"\n"
"The AI language model's final answer to the question was: {answer}\n"
"\n"
"Let's to do a detailed evaluation of the AI language model's answer step by step.\n"
"\n"
"We consider the following criteria before giving a score from 1 to 5:\n"
"\n"
"i. Is the final answer helpful?\n"
"ii. Does the AI language use a logical sequence of tools to answer the question?\n"
"iii. Does the AI language model use the tools in a helpful way?\n"
"iv. Does the AI language model use too many steps to answer the question?\n"
"v. Are the appropriate tools used to answer the question?"
msgstr ""
"一个AI语言模型被赋予以下工具来帮助回答用户的问题。\n"
"\n"
"提供给AI模型的工具包括：\n"
"\n"
"{tool_descriptions}\n"
"\n"
"用户问AI模型的问题是：{question}\n"
"\n"
"AI语言模型决定使用以下工具来回答Question: \n"
"\n"
"{agent_trajectory}\n"
"\n"
"AI语言模型对问题的最终答案是：{answer}\n"
"\n"
"让我们逐步详细评估AI语言模型的答案。\n"
"\n"
"我们在给出1到5分数之前考虑以下标准：\n"
"\n"
"i. 最终答案是否有帮助？\n"
"ii. AI语言是否使用逻辑顺序的工具来回答问题？\n"
"iii. AI语言模型是否以有用的方式使用工具？\n"
"iv. AI语言模型是否使用过多步骤来回答问题？\n"
"v. 是否使用适当的工具来回答问题？"

#: evaluation/agents/trajectory_eval_prompt.py:37
msgid ""
"An AI language model has been given acces to the following set of tools to help answer a user's question.\n"
"\n"
"The tools given to the AI model are:\n"
"\n"
"Tool 1:\n"
"Name: Search\n"
"Description: useful for when you need to ask with search\n"
"\n"
"Tool 2:\n"
"Name: Lookup\n"
"Description: useful for when you need to ask with lookup\n"
"\n"
"Tool 3:\n"
"Name: Calculator\n"
"Description: useful for doing calculations\n"
"\n"
"Tool 4:\n"
"Name: Search the Web (SerpAPI)\n"
"Description: useful for when you need to answer questions about current events\n"
"\n"
"The question the human asked the AI model was: If laid the Statue of Liberty end to end, how many times would it stretch across the United States?\n"
"\n"
"The AI language model decided to use the following set of tools to answer the question:\n"
"\n"
"Step 1:\n"
"Tool used: Search the Web (SerpAPI)\n"
"Tool input: If laid the Statue of Liberty end to end, how many times would it stretch across the United States?\n"
"Tool output: The Statue of Liberty was given to the United States by France, as a symbol of the two countries' friendship. It was erected atop an American-designed ...\n"
"\n"
"The AI language model's final answer to the question was: There are different ways to measure the length of the United States, but if we use the distance between the Statue of Liberty and the westernmost point of the contiguous United States (Cape Alava, Washington), which is approximately 2,857 miles (4,596 km), and assume that the Statue of Liberty is 305 feet (93 meters) tall, then the statue would stretch across the United States approximately 17.5 times if laid end to end.\n"
"\n"
"Let's to do a detailed evaluation of the AI language model's answer step by step.\n"
"\n"
"We consider the following criteria before giving a score from 1 to 5:\n"
"\n"
"i. Is the final answer helpful?\n"
"ii. Does the AI language use a logical sequence of tools to answer the question?\n"
"iii. Does the AI language model use the tools in a helpful way?\n"
"iv. Does the AI language model use too many steps to answer the question?\n"
"v. Are the appropriate tools used to answer the question?"
msgstr ""
"AI语言模型被赋予以下一组工具来帮助回答用户的问题。\n"
"\n"
"提供给AI模型的工具是：\n"
"\n"
"工具1：\n"
"名称：搜索\n"
"描述：在需要进行搜索时很有用\n"
"\n"
"工具2：\n"
"名称：查找\n"
"描述：在需要进行查找时很有用\n"
"\n"
"工具3：\n"
"名称：计算器\n"
"描述：用于进行计算\n"
"\n"
"工具4：\n"
"名称：搜索网络（SerpAPI）\n"
"描述：在需要回答有关当前事件的问题时很有用\n"
"\n"
"人类提出的问题是：如果把自由女神像端对端放置，它可以在美国延伸多少次？\n"
"\n"
"AI语言模型决定使用以下一组工具来回答Question: \n"
"\n"
"步骤1：\n"
"使用的工具：搜索网络（SerpAPI）\n"
"工具输入：如果把自由女神像端对端放置，它可以在美国延伸多少次？\n"
"工具Output: 自由女神像是法国赠送给美国的，象征着两国之间的友谊。它建在美国设计的...\n"
"\n"
"AI语言模型对问题的最终答案是：有不同的方法来测量美国的长度，但如果我们使用自由女神像和美国连续本土的最西点（华盛顿州的阿拉瓦角）之间的距离（约为2,857英里或4,596公里），并假设自由女神像高305英尺（93米），那么如果将其端对端放置，自由女神像将在美国延伸约17.5次。\n"
"\n"
"在给出1到5的分数之前，我们考虑以下标准：\n"
"\n"
"i. 最终答案是否有帮助？\n"
"ii. AI语言模型是否使用了逻辑顺序的工具来回答问题？\n"
"iii. AI语言模型是否以有用的方式使用了工具？\n"
"iv. AI语言模型是否使用了过多的步骤来回答问题？\n"
"v. 是否使用了适当的工具来回答问题？"

#: evaluation/agents/trajectory_eval_prompt.py:78
msgid ""
"First, let's evaluate the final answer. The final uses good reasoning but is wrong. 2,857 divided by 305 is not 17.5.The model should have used the calculator to figure this out. Second does the model use a logical sequence of tools to answer the question?The way model uses the search is not helpful. The model should have used the search tool to figure the width of the US or the height of the statue.The model didn't use the calculator tool and gave an incorrect answer. The search API should be used for current events or specific questions.The tools were not used in a helpful way. The model did not use too many steps to answer the question.The model did not use the appropriate tools to answer the question.    \n"
"Judgment: Given the good reasoning in the final answer but otherwise poor performance, we give the model a score of 2.\n"
"\n"
"Score: 2"
msgstr ""
"首先，让我们评估最终答案。最终答案使用了良好的推理，但是是错误的。2857除以305不是17.5。模型应该使用计算器来计算。其次，模型是否使用了逻辑顺序的工具来回答问题？模型使用搜索的方式并不有帮助。模型应该使用搜索工具来计算美国的宽度或者雕像的高度。模型没有使用计算器工具，给出了错误的答案。搜索API应该用于当前事件或特定问题。工具的使用方式不够有帮助。模型没有使用太多步骤来回答问题。模型没有使用适当的工具来回答问题。\n"
"\n"
"判断：鉴于最终答案中的良好推理但其他表现不佳，我们给予该模型2分的评分。\n"
"\n"
"得分：2"

#: evaluation/qa/eval_prompt.py:5
#, python-brace-format
msgid ""
"You are a teacher grading a quiz.\n"
"You are given a question, the student's answer, and the true answer, and are asked to score the student answer as either CORRECT or INCORRECT.\n"
"\n"
"Example Format:\n"
"QUESTION: question here\n"
"STUDENT ANSWER: student's answer here\n"
"TRUE ANSWER: true answer here\n"
"GRADE: CORRECT or INCORRECT here\n"
"\n"
"Grade the student answers based ONLY on their factual accuracy. Ignore differences in punctuation and phrasing between the student answer and true answer. It is OK if the student answer contains more information than the true answer, as long as it does not contain any conflicting statements. Begin! \n"
"\n"
"QUESTION: {query}\n"
"STUDENT ANSWER: {result}\n"
"TRUE ANSWER: {answer}\n"
"GRADE:"
msgstr ""
"请你作为一名老师给一份测验打分。\n"
"你会得到一个问题，学生的回答和正确答案，并被要求将学生的答案评分为“正确”或“错误”。\n"
"\n"
"示例格式：\n"
"Question: 问题内容\n"
"学生回答：学生的回答内容\n"
"正确答案：正确答案内容\n"
"得分：评为“正确”或“错误”\n"
"\n"
"请根据学生回答的事实准确性进行评分。忽略学生回答和正确答案之间的标点和措辞差异。如果学生回答包含比正确答案更多的信息，只要不包含任何冲突的陈述即可。开始吧！\n"
"\n"
"Question: {query}\n"
"学生回答：{result}\n"
"正确答案：{answer}\n"
"得分："

#: evaluation/qa/eval_prompt.py:24
#, python-brace-format
msgid ""
"You are a teacher grading a quiz.\n"
"You are given a question, the context the question is about, and the student's answer. You are asked to score the student's answer as either CORRECT or INCORRECT, based on the context.\n"
"\n"
"Example Format:\n"
"QUESTION: question here\n"
"CONTEXT: context the question is about here\n"
"STUDENT ANSWER: student's answer here\n"
"GRADE: CORRECT or INCORRECT here\n"
"\n"
"Grade the student answers based ONLY on their factual accuracy. Ignore differences in punctuation and phrasing between the student answer and true answer. It is OK if the student answer contains more information than the true answer, as long as it does not contain any conflicting statements. Begin! \n"
"\n"
"QUESTION: {query}\n"
"CONTEXT: {context}\n"
"STUDENT ANSWER: {result}\n"
"GRADE:"
msgstr ""
"Question: {query}\n"
"Context: {context}\n"
"STUDENT ANSWER: {result}\n"
"GRADE: 正确或错误"

#: evaluation/qa/eval_prompt.py:44
#, python-brace-format
msgid ""
"You are a teacher grading a quiz.\n"
"You are given a question, the context the question is about, and the student's answer. You are asked to score the student's answer as either CORRECT or INCORRECT, based on the context.\n"
"Write out in a step by step manner your reasoning to be sure that your conclusion is correct. Avoid simply stating the correct answer at the outset.\n"
"\n"
"Example Format:\n"
"QUESTION: question here\n"
"CONTEXT: context the question is about here\n"
"STUDENT ANSWER: student's answer here\n"
"EXPLANATION: step by step reasoning here\n"
"GRADE: CORRECT or INCORRECT here\n"
"\n"
"Grade the student answers based ONLY on their factual accuracy. Ignore differences in punctuation and phrasing between the student answer and true answer. It is OK if the student answer contains more information than the true answer, as long as it does not contain any conflicting statements. Begin! \n"
"\n"
"QUESTION: {query}\n"
"CONTEXT: {context}\n"
"STUDENT ANSWER: {result}\n"
"EXPLANATION:"
msgstr ""
"1. Read the question and understand what it is asking for.\n"
"2. Read the context to understand the background information and the scope of the question.\n"
"3. Read the student's answer carefully to determine if it addresses the question and if it is factually accurate.\n"
"4. Check if the student's answer contains any conflicting statements or information that is not supported by the context.\n"
"5. Compare the student's answer to the correct answer, if provided, to see if they match.\n"
"6. If the student's answer is factually accurate and does not contain any conflicting statements, grade it as CORRECT.\n"
"7. If the student's answer is not factually accurate or contains conflicting statements, grade it as INCORRECT.\n"
"GRADE: CORRECT or INCORRECT based on the above explanation."

#: evaluation/qa/generate_prompt.py:6
#, python-brace-format
msgid ""
"You are a teacher coming up with questions to ask on a quiz. \n"
"Given the following document, please generate a question and answer based on that document.\n"
"\n"
"Example Format:\n"
"<Begin Document>\n"
"...\n"
"<End Document>\n"
"QUESTION: question here\n"
"ANSWER: answer here\n"
"\n"
"These questions should be detailed and be based explicitly on information in the document. Begin!\n"
"\n"
"<Begin Document>\n"
"{doc}\n"
"<End Document>\n"
msgstr ""
"你是一位老师，正在准备一份测验的问题。请根据以下文档生成问题和答案。\n"
"\n"
"示例格式：\n"
"<Begin Document>\n"
"...\n"
"<End Document>\n"
"QUESTION: 这里是问题\n"
"ANSWER: 这里是答案\n"
"\n"
"这些问题应该详细，并且明确基于文档中的信息。开始吧！\n"
"\n"
"<Begin Document>\n"
"{doc}\n"
"<End Document> \n"

#: graphs/neo4j_graph.py:4
msgid ""
"CALL apoc.meta.data()\n"
"YIELD label, other, elementType, type, property\n"
"WHERE NOT type = \"RELATIONSHIP\" AND elementType = \"node\"\n"
"WITH label AS nodeLabels, collect({property:property, type:type}) AS properties\n"
"RETURN {labels: nodeLabels, properties: properties} AS output\n"
"\n"
msgstr ""
"调用apoc.meta.data()函数\n"
"获取标签(label)、其他(other)、元素类型(elementType)、类型(type)、属性(property)\n"
"筛选出类型不为\"RELATIONSHIP\"且元素类型为\"node\"的数据\n"
"将标签(label)作为nodeLabels，将属性和类型({property:property, type:type})作为集合\n"
"返回{labels: nodeLabels, properties: properties}\n"

#: graphs/neo4j_graph.py:13
msgid ""
"CALL apoc.meta.data()\n"
"YIELD label, other, elementType, type, property\n"
"WHERE NOT type = \"RELATIONSHIP\" AND elementType = \"relationship\"\n"
"WITH label AS nodeLabels, collect({property:property, type:type}) AS properties\n"
"RETURN {type: nodeLabels, properties: properties} AS output\n"
msgstr ""
"调用apoc.meta.data()函数\n"
"获取标签、其他、元素类型、类型和属性\n"
"筛选出类型不为“RELATIONSHIP”且元素类型为“relationship”的数据\n"
"将标签(label)作为nodeLabels，将属性和类型({property:property, type:type})作为集合\n"
"返回{type: nodeLabels, properties: properties}作为输出结果。\n"

#: graphs/neo4j_graph.py:21
msgid ""
"CALL apoc.meta.data()\n"
"YIELD label, other, elementType, type, property\n"
"WHERE type = \"RELATIONSHIP\" AND elementType = \"node\"\n"
"RETURN \"(:\" + label + \")-[:\" + property + \"]->(:\" + toString(other[0]) + \")\" AS output\n"
msgstr ""
"调用apoc.meta.data()函数\n"
"返回标签(label)、其他(other)、元素类型(elementType)、类型(type)、属性(property)\n"
"其中类型为\"RELATIONSHIP\"且元素类型为\"node\"\n"
"返回\"(:\" + label + \")-[:\" + property + \"]->(:\" + toString(other[0]) + \")\"作为输出结果。\n"

#: chains/chat_vector_db/prompts.py:5
#, python-brace-format
msgid ""
"Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n"
"\n"
"Chat History:\n"
"{chat_history}\n"
"Follow Up Input: {question}\n"
"Standalone question:"
msgstr ""
"请将下面的跟进问题改写成一个独立的问题。\n"
"\n"
"Chat History: \n"
"{chat_history}\n"
"跟进Question: {question}"

#: chains/chat_vector_db/prompts.py:13
#: chains/question_answering/stuff_prompt.py:11
#: chains/retrieval_qa/prompt.py:5
#: chains/conversational_retrieval/prompts.py:13
#, python-brace-format
msgid ""
"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n"
"\n"
"{context}\n"
"\n"
"Question: {question}\n"
"Helpful Answer:"
msgstr ""
"把以下上下文拼接起来回答最后的问题。如果你不知道答案，只需要说不知道，不要试图编造答案。\n"
"\n"
"{context}\n"
"\n"
"Question: {question}\n"
"有用的回答："

#: chains/hyde/prompts.py:5
#, python-brace-format
msgid ""
"Please write a passage to answer the question \n"
"Question: {QUESTION}\n"
"Passage:"
msgstr ""
"请写一篇文章回答以下Question:  \n"
"Question: {QUESTION}\n"
"Passage:"

#: chains/hyde/prompts.py:9
#, python-brace-format
msgid ""
"Please write a scientific paper passage to support/refute the claim \n"
"Claim: {Claim}\n"
"Passage:"
msgstr ""
"请撰写一篇科学论文段落，支持或反驳该主张\n"
"Claim: {Claim}\n"
"Passage:"

#: chains/hyde/prompts.py:13
#, python-brace-format
msgid ""
"Please write a counter argument for the passage \n"
"Passage: {PASSAGE}\n"
"Counter Argument:"
msgstr ""
"请为这篇文章写一个反驳观点。\n"
"Passage: {PASSAGE}\n"
"Counter Argument:"


#: chains/hyde/prompts.py:17
#, python-brace-format
msgid ""
"Please write a scientific paper passage to answer the question\n"
"Question: {QUESTION}\n"
"Passage:"
msgstr ""
"请撰写一篇科学论文段落来回答这个问题\n"
"Question: {QUESTION}\n"
"Passage:"

#: chains/hyde/prompts.py:21
#, python-brace-format
msgid ""
"Please write a financial article passage to answer the question\n"
"Question: {QUESTION}\n"
"Passage:"
msgstr ""
"请撰写一篇财经文章来回答以下问题"
"Question: {QUESTION}\n"
"Passage:"

#: chains/hyde/prompts.py:25
#, python-brace-format
msgid ""
"Please write a passage to answer the question.\n"
"Question: {QUESTION}\n"
"Passage:"
msgstr ""
"请写一篇文章回答这个问题。\n"
"Question: {QUESTION}\n"
"Passage:"

#: chains/hyde/prompts.py:31
#, python-brace-format
msgid ""
"Please write a news passage about the topic.\n"
"Topic: {TOPIC}\n"
"Passage:"
msgstr ""
"请撰写一篇关于该主题的新闻报道。 "
"Topic: {TOPIC}\n"
"Passage:"

#: chains/hyde/prompts.py:35
#, python-brace-format
msgid ""
"Please write a passage in Swahili/Korean/Japanese/Bengali to answer the question in detail.\n"
"Question: {QUESTION}\n"
"Passage:"
msgstr ""
"请用斯瓦希里语/韩语/日语/孟加拉语写一篇文章详细回答问题。\n"
"Question: {QUESTION}\n"
"Passage:"

#: chains/question_answering/map_reduce_prompt.py:11
#: chains/qa_with_sources/map_reduce_prompt.py:5
#, python-brace-format
msgid ""
"Use the following portion of a long document to see if any of the text is relevant to answer the question. \n"
"Return any relevant text verbatim.\n"
"{context}\n"
"Question: {question}\n"
"Relevant text, if any:"
msgstr ""
"使用长文档中的以下部分来查看是否有任何文本与回答问题相关。\n"
"直接返回任何相关的文本。\n"
"{context}\n"
"Question: {question}\n"
"相关文本（如果有）:"

#: chains/question_answering/map_reduce_prompt.py:19
#, python-brace-format
msgid ""
"Use the following portion of a long document to see if any of the text is relevant to answer the question. \n"
"Return any relevant text verbatim.\n"
"______________________\n"
"{context}"
msgstr ""
"把以下长文档的一部分用来查看是否有任何文本与问题相关。返回任何相关的文本原样。\n"
"______________________\n"
"{context}"

#: chains/question_answering/map_reduce_prompt.py:34
#, python-brace-format
msgid ""
"Given the following extracted parts of a long document and a question, create a final answer. \n"
"If you don't know the answer, just say that you don't know. Don't try to make up an answer.\n"
"\n"
"QUESTION: Which state/country's law governs the interpretation of the contract?\n"
"=========\n"
"Content: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n"
"\n"
"Content: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n"
"\n"
"11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n"
"\n"
"11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n"
"\n"
"11.9 No Third-Party Beneficiaries.\n"
"\n"
"Content: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n"
"=========\n"
"FINAL ANSWER: This Agreement is governed by English law.\n"
"\n"
"QUESTION: What did the president say about Michael Jackson?\n"
"=========\n"
"Content: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n"
"\n"
"Last year COVID-19 kept us apart. This year we are finally together again. \n"
"\n"
"Tonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n"
"\n"
"With a duty to one another to the American people to the Constitution. \n"
"\n"
"And with an unwavering resolve that freedom will always triumph over tyranny. \n"
"\n"
"Six days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n"
"\n"
"He thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n"
"\n"
"He met the Ukrainian people. \n"
"\n"
"From President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n"
"\n"
"Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n"
"\n"
"Content: And we won’t stop. \n"
"\n"
"We have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n"
"\n"
"Let’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n"
"\n"
"Let’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n"
"\n"
"We can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n"
"\n"
"I recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n"
"\n"
"They were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n"
"\n"
"Officer Mora was 27 years old. \n"
"\n"
"Officer Rivera was 22. \n"
"\n"
"Both Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n"
"\n"
"I spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n"
"\n"
"Content: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n"
"\n"
"To all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n"
"\n"
"And I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n"
"\n"
"Tonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n"
"\n"
"America will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n"
"\n"
"These steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n"
"\n"
"But I want you to know that we are going to be okay.\n"
"\n"
"Content: More support for patients and families. \n"
"\n"
"To get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n"
"\n"
"It’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n"
"\n"
"ARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n"
"\n"
"A unity agenda for the nation. \n"
"\n"
"We can do this. \n"
"\n"
"My fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n"
"\n"
"In this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n"
"\n"
"We have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n"
"\n"
"And built the strongest, freest, and most prosperous nation the world has ever known. \n"
"\n"
"Now is the hour. \n"
"\n"
"Our moment of responsibility. \n"
"\n"
"Our test of resolve and conscience, of history itself. \n"
"\n"
"It is in this moment that our character is formed. Our purpose is found. Our future is forged. \n"
"\n"
"Well I know this nation.\n"
"=========\n"
"FINAL ANSWER: The president did not mention Michael Jackson.\n"
"\n"
"QUESTION: {question}\n"
"=========\n"
"{summaries}\n"
"=========\n"
"FINAL ANSWER:\n"
msgstr ""
"给定一份长文档的提取部分和一个问题，创建一个最终答案。\n"
"如果你不知道答案，只需说你不知道。不要试图编造答案。\n"
"\n"
"QUESTION: 哪个州/国家的法律管辖合同的解释？\n"
"=========\n"
"Content: 本协议受英国法律管辖，各方提交至英国法院，就任何有关本协议的争议（合同或非合同）而言，除非任何一方可以向任何法院申请禁令或其他保护其知识产权的救济措施。\n"
"Content: 不放弃。未能或延迟行使本协议项下的任何权利或救济措施，不构成对此类（或任何其他）权利或救济措施的放弃。\n"
"11.7 可分性。本协议的任何条款（或条款的一部分）的无效、非法或不可执行性，不影响该条款（如果有）的其余部分的继续有效和本协议。\n"
"11.8 无代理。除非另有明确规定，否则本协议中的任何内容都不会创建任何一方之间的代理、合伙或联营关系。\n"
"11.9 无第三方受益人。\n"
"Content: （b）如果谷歌诚信地认为，分销商已违反或导致谷歌违反任何反贿赂法（如第8.5条所定义），或者这种违反有合理的可能性，\n"
"=========\n"
"FINAL ANSWER: 本协议受英国法律管辖。\n"
"\n"
"QUESTION: 总统对迈克尔·杰克逊说了什么？\n"
"=========\n"
"Content: 我们不会停止。\n"
"我们失去了太多的COVID-19。彼此之间的时间。最糟糕的是，失去了太多的生命。\n"
"让我们利用这个时刻来重置。让我们停止将COVID-19视为分裂的政治界限，看到它真正的面目：一个可怕的疾病。\n"
"让我们停止将彼此视为敌人，开始看到彼此真正的面目：美国同胞。\n"
"我们无法改变我们的分裂。但我们可以改变我们如何共同前进-在COVID-19和其他必须共同面对的问题上。\n"
"我最近访问了纽约市警察局，在警官威尔伯特·莫拉和他的搭档警官杰森·里维拉的葬礼后几天。\n"
"他们正在响应一个9-1-1电话，当一个男人用一把偷来的枪杀死他们。\n"
"莫拉警官27岁。\n"
"里维拉警官22岁。\n"
"两个多米尼加裔美国人，他们在同一条街道上长大，后来选择作为警察官员巡逻。\n"
"我与他们的家人交谈，并告诉他们，我们永远感激他们的牺牲，我们将继续履行他们恢复每个社区应有的信任和安全的使命。\n"
"Content: 更多对患者和家庭的支持。\n"
"为了实现这一目标，我呼吁国会资助ARPA-H，即面向健康的高级研究项目署。\n"
"它基于DARPA-国防部项目，该项目导致了互联网、GPS等等。\n"
"ARPA-H将有一个独特的目的-推动癌症、阿尔茨海默病、糖尿病等方面的突破。\n"
"国家的团结议程。\n"
"我们可以做到这一点。\n"
"我的美国同胞们-今晚，我们聚集在一个神圣的空间-我们民主的堡垒。\n"
"在这个国会大厦里，一代又一代的美国人在巨大的争议中辩论伟大的问题，并做出了伟大的事情。\n"
"我们为自由而战，扩大自由，打败极权主义和恐怖主义。\n"
"并建立了世界上最强大、最自由、最繁荣的国家。\n"
"现在是时候了。\n"
"我们的责任之时。\n"
"我们的决心和良心之时，历史本身的考验。\n"
"正是在这一刻，我们的性格得以形成。我们的目的被发现。我们的未来被锻造。\n"
"我知道这个国家。\n"
"=========\n"
"\n"
"FINAL ANSWER:总统没有提到迈克尔·杰克逊。\n"
"\n"
"QUESTION: {question}\n"
"=========\n"
"\n"
"{summaries}\n"
"\n"
"=========\n"
"\n"
"FINAL ANSWER:\n"


#: chains/question_answering/map_reduce_prompt.py:68
#, python-brace-format
msgid ""
"Given the following extracted parts of a long document and a question, create a final answer. \n"
"If you don't know the answer, just say that you don't know. Don't try to make up an answer.\n"
"______________________\n"
"{summaries}\n"
msgstr ""
"抽取了长文档的以下部分和一个问题，请创建最终答案。\n"
"如果您不知道答案，请直接说不知道。不要试图编造答案。______________________\n"
"{summaries}\n"

#: chains/question_answering/refine_prompts.py:13
#, python-brace-format
msgid ""
"The original question is as follows: {question}\n"
"We have provided an existing answer: {existing_answer}\n"
"We have the opportunity to refine the existing answer(only if needed) with some more context below.\n"
"------------\n"
"{context_str}\n"
"------------\n"
"Given the new context, refine the original answer to better answer the question. If the context isn't useful, return the original answer."
msgstr ""
"原始问题如下：{question}\n"
"我们已经提供了一个现有的答案：{existing_answer}\n"
"我们有机会通过下面的一些更多的背景信息来完善现有的答案（仅在需要时）。\n"
"------------\n"
"{context_str}\n"
"------------\n"
"根据新的背景信息，完善原始答案以更好地回答问题。如果背景信息没有用处，则返回原始答案。"

#: chains/question_answering/refine_prompts.py:29
#, python-brace-format
msgid ""
"We have the opportunity to refine the existing answer(only if needed) with some more context below.\n"
"------------\n"
"{context_str}\n"
"------------\n"
"Given the new context, refine the original answer to better answer the question. If the context isn't useful, return the original answer."
msgstr ""
"我们有机会通过以下更多的上下文来完善现有的答案（仅在需要时）。\n"
"------------\n"
"{context_str}\n"
"------------\n"
"根据新的上下文，完善原始答案以更好地回答问题。如果上下文没有用处，则返回原始答案。"

#: chains/question_answering/refine_prompts.py:51
#: chains/qa_with_sources/refine_prompts.py:25
#, python-brace-format
msgid ""
"Context information is below. \n"
"---------------------\n"
"{context_str}\n"
"---------------------\n"
"Given the context information and not prior knowledge, answer the question: {question}\n"
msgstr ""
"背景信息如下：\n"
"---------------------\n"
"{context_str}\n"
"---------------------\n"
"根据上述背景信息，回答以下Question: {question}\n"

#: chains/question_answering/refine_prompts.py:62
#, python-brace-format
msgid ""
"Context information is below. \n"
"---------------------\n"
"{context_str}\n"
"---------------------\n"
"Given the context information and not prior knowledge, answer any questions\n"
msgstr ""
"以下是上下文信息。\n"
"---------------------\n"
"{context_str}\n"
"---------------------\n"
"根据上下文信息而非先前知识，回答任何问题。\n"

#: chains/question_answering/map_rerank_prompt.py:11
#, python-brace-format
msgid ""
"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n"
"\n"
"In addition to giving an answer, also return a score of how fully it answered the user's question. This should be in the following format:\n"
"\n"
"Question: [question here]\n"
"Helpful Answer: [answer here]\n"
"Score: [score between 0 and 100]\n"
"\n"
"How to determine the score:\n"
"- Higher is a better answer\n"
"- Better responds fully to the asked question, with sufficient level of detail\n"
"- If you do not know the answer based on the context, that should be a score of 0\n"
"- Don't be overconfident!\n"
"\n"
"Example #1\n"
"\n"
"Context:\n"
"---------\n"
"Apples are red\n"
"---------\n"
"Question: what color are apples?\n"
"Helpful Answer: red\n"
"Score: 100\n"
"\n"
"Example #2\n"
"\n"
"Context:\n"
"---------\n"
"it was night and the witness forgot his glasses. he was not sure if it was a sports car or an suv\n"
"---------\n"
"Question: what type was the car?\n"
"Helpful Answer: a sports car or an suv\n"
"Score: 60\n"
"\n"
"Example #3\n"
"\n"
"Context:\n"
"---------\n"
"Pears are either red or orange\n"
"---------\n"
"Question: what color are apples?\n"
"Helpful Answer: This document does not answer the question\n"
"Score: 0\n"
"\n"
"Begin!\n"
"\n"
"Context:\n"
"---------\n"
"{context}\n"
"---------\n"
"Question: {question}\n"
"Helpful Answer:"
msgstr ""
"使用以下上下文来回答最后的问题。如果你不知道答案，只需说不知道，不要试图编造答案。\n"
"除了给出答案，还要返回一个分数，表示它如何完全回答了用户的问题。这应该是以下格式：\n"
"Question: [问题在这里]\n"
"Helpful Answer:[答案在这里]\n"
"Score: [0到100之间的分数]\n"
"如何确定分数: \n"
"- 分数越高，答案越好\n"
"- 更好地回答了所问的问题，具有足够的细节水平\n"
"- 如果你根据上下文不知道答案，那么分数应该是0\n"
"- 不要过于自信！\n"
"示例#1\n"
"上下文：\n"
"---------\n"
"苹果是红色的\n"
"---------\n"
"Question: 苹果是什么颜色？\n"
"Helpful Answer:红色\n"
"Score: 100\n"
"示例#2\n"
"上下文：\n"
"---------\n"
"当时是晚上，证人忘了戴眼镜。他不确定那是跑车还是SUV\n"
"---------\n"
"Question: 那是什么类型的车？\n"
"Helpful Answer:跑车或SUV\n"
"Score: 60\n"
"\n"
"示例#3\n"
"上下文：\n"
"---------\n"
"梨子是红色或橙色的\n"
"---------\n"
"Question: 苹果是什么颜色？\n"
"Helpful Answer:本文档没有回答这个问题。\n" 
"Score: 0\n"
"\n"
"Begin!\n"
"\n"
"Context:\n"
"---------\n"
"{context}\n"
"---------\n"
"Question: {question}\n"
"Helpful Answer:"

#: chains/question_answering/stuff_prompt.py:21
#, python-brace-format
msgid ""
"Use the following pieces of context to answer the users question. \n"
"If you don't know the answer, just say that you don't know, don't try to make up an answer.\n"
"----------------\n"
"{context}"
msgstr ""
"使用以下上下文来回答用户的问题。如果你不知道答案，只需说你不知道，不要试图编造答案。\n"
"----------------\n"
"{context}"

#: chains/sql_database/prompt.py:7
#, python-brace-format
msgid ""
"Only use the following tables:\n"
"{table_info}\n"
"\n"
"Question: {input}"
msgstr ""
"Question: {input}\n"
"\n"
"请仅使用以下表格：\n"
"{table_info}\n"
"Question: {input}"

#: chains/sql_database/prompt.py:12
#, fuzzy, python-brace-format
msgid ""
"Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer. Unless the user specifies in his question a specific number of examples he wishes to obtain, always limit your query to at most {top_k} results. You can order the results by a relevant column to return the most interesting examples in the database.\n"
"\n"
"Never query for all the columns from a specific table, only ask for a the few relevant columns given the question.\n"
"\n"
"Pay attention to use only the column names that you can see in the schema description. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"给定一个输入问题，首先创建一个语法正确的{dialect}查询来运行，然后查看查询结果并返回答案。除非用户在问题中指定了他希望获得的具体示例数量，否则始终将查询限制在最多{top_k}个结果。您可以按相关列对结果进行排序，以返回数据库中最有趣的示例。\n"
"\n"
"永远不要查询特定表中的所有列，只询问给定问题的少数相关列。\n"
"\n"
"注意仅使用您可以在模式描述中看到的列名。注意不要查询不存在的列。此外，注意哪个列在哪个表中。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question:问题在这里\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在这里"

#: chains/sql_database/prompt.py:33
#, python-brace-format
msgid ""
"Given the below input question and list of potential tables, output a comma separated list of the table names that may be necessary to answer this question.\n"
"\n"
"Question: {query}\n"
"\n"
"Table Names: {table_names}\n"
"\n"
"Relevant Table Names:"
msgstr ""
"给定以下输入问题和潜在表格列表，请输出可能需要回答此问题的表格名称的逗号分隔列表。 \n"
"Question: {query}\n"
"\n"
"Table Names:  {table_names}\n"
"\n"
"相关表名:"

#: chains/sql_database/prompt.py:46
#, python-brace-format
msgid ""
"You are a DuckDB expert. Given an input question, first create a syntactically correct DuckDB query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per DuckDB. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use today() function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个DuckDB专家。给定一个输入问题，首先创建一个语法正确的DuckDB查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定要获取的特定示例数量，否则使用LIMIT子句查询最多{top_k}个结果，如DuckDB所示。您可以对结果进行排序，以返回数据库中最有信息的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用双引号（\"）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列在哪个表中。\n"
"如果问题涉及“today”，请注意使用today（）函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:66
#, python-brace-format
msgid ""
"You are a GoogleSQL expert. Given an input question, first create a syntactically correct GoogleSQL query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per GoogleSQL. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use CURRENT_DATE() function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个GoogleSQL专家。给定一个输入问题，首先创建一个语法正确的GoogleSQL查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用LIMIT子句查询最多{top_k}个结果，按照GoogleSQL的规定进行排序以返回数据库中最有信息量的数据。\n"
"永远不要从表中查询所有列。必须仅查询需要回答问题的列。将每个列名用反引号(`)括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。还要注意哪个列在哪个表中。\n"
"如果问题涉及“今天”，请注意使用CURRENT_DATE()函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:87
#, python-brace-format
msgid ""
"You are an MS SQL expert. Given an input question, first create a syntactically correct MS SQL query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the TOP clause as per MS SQL. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in square brackets ([]) to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use CAST(GETDATE() as date) function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个MS SQL专家。给定一个输入问题，首先创建一个语法正确的MS SQL查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用TOP子句查询最多{top_k}个结果，根据MS SQL进行排序以返回数据库中最有信息的数据。\n"
"永远不要查询表中的所有列。您必须仅查询需要回答问题的列。将每个列名用方括号（[]）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列在哪个表中。\n"
"如果问题涉及“今天”，请注意使用CAST(GETDATE() as date)函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在这里提问\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在这里\n"
"\n"

#: chains/sql_database/prompt.py:108
#, python-brace-format
msgid ""
"You are a MySQL expert. Given an input question, first create a syntactically correct MySQL query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per MySQL. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use CURDATE() function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个MySQL专家。给定一个输入问题，首先创建一个语法正确的MySQL查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用LIMIT子句查询最多{top_k}个结果，如MySQL所示。您可以对结果进行排序，以返回数据库中最有信息的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用反引号（`）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列位于哪个表中。\n"
"如果问题涉及“今天”，请注意使用CURDATE（）函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:129
#, python-brace-format
msgid ""
"You are a MariaDB expert. Given an input question, first create a syntactically correct MariaDB query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per MariaDB. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use CURDATE() function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个MariaDB专家。给定一个输入问题，首先创建一个语法正确的MariaDB查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用MariaDB的LIMIT子句查询最多{top_k}个结果。您可以对结果进行排序，以返回数据库中最有信息的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用反引号（`）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表格中看到的列名。小心不要查询不存在的列。此外，注意哪个列位于哪个表中。\n"
"如果问题涉及“今天”，请注意使用CURDATE（）函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:150
#, python-brace-format
msgid ""
"You are an Oracle SQL expert. Given an input question, first create a syntactically correct Oracle SQL query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the FETCH FIRST n ROWS ONLY clause as per Oracle SQL. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use TRUNC(SYSDATE) function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个 Oracle SQL 专家。给定一个输入问题，首先创建一个语法正确的 Oracle SQL 查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用 FETCH FIRST n ROWS ONLY 子句查询最多 {top_k} 个结果，如 Oracle SQL 所示。您可以对结果进行排序，以返回数据库中最有信息的数据。\n"
"永远不要查询表中的所有列。您必须仅查询需要回答问题的列。将每个列名用双引号（\"）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列位于哪个表中。\n"
"如果问题涉及“今天”，请注意使用 TRUNC(SYSDATE) 函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的 SQL 查询\n"
"SQLResult: SQLQuery 的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:171
#, python-brace-format
msgid ""
"You are a PostgreSQL expert. Given an input question, first create a syntactically correct PostgreSQL query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per PostgreSQL. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use CURRENT_DATE function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个PostgreSQL专家。给定一个输入问题，首先创建一个语法正确的PostgreSQL查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用LIMIT子句查询最多{top_k}个结果，按照PostgreSQL的规定进行排序以返回数据库中最有信息量的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用双引号（\"）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。还要注意哪个列在哪个表中。\n"
"如果问题涉及“今天”，请注意使用CURRENT_DATE函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:192
#, python-brace-format
msgid ""
"You are a SQLite expert. Given an input question, first create a syntactically correct SQLite query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per SQLite. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use date('now') function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: Question here\n"
"SQLQuery: SQL Query to run\n"
"SQLResult: Result of the SQLQuery\n"
"Answer: Final answer here\n"
"\n"
msgstr ""
"你是一个SQLite专家。给定一个输入问题，首先创建一个语法正确的SQLite查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定要获取的特定示例数量，否则使用SQLite的LIMIT子句查询最多{top_k}个结果。您可以对结果进行排序，以返回数据库中最有信息量的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用双引号（\"）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列位于哪个表中。\n"
"如果问题涉及“今天”，请注意使用date（'now'）函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: 在此处提出问题\n"
"SQLQuery: 要运行的SQL查询\n"
"SQLResult: SQL查询的结果\n"
"Answer: 最终答案在此处\n"

#: chains/sql_database/prompt.py:212
#, python-brace-format
msgid ""
"You are a ClickHouse expert. Given an input question, first create a syntactically correct Clic query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per ClickHouse. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use today() function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: \"Question here\"\n"
"SQLQuery: \"SQL Query to run\"\n"
"SQLResult: \"Result of the SQLQuery\"\n"
"Answer: \"Final answer here\"\n"
"\n"
msgstr ""
"你是一个ClickHouse专家。给定一个输入问题，首先创建一个语法正确的Click查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定要获取的特定示例数量，否则使用LIMIT子句查询最多{top_k}个结果，按照ClickHouse的要求进行排序以返回数据库中最有信息的数据。\n"
"永远不要查询表中的所有列。您必须仅查询需要回答问题的列。将每个列名用双引号（\"）括起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列在哪个表中。\n"
"如果问题涉及“today”，请注意使用today（）函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question：“问题在这里”\n"
"SQLQuery：“要运行的SQL查询”\n"
"SQLResult：“SQL查询的结果”\n"
"Answer：“最终答案在这里”\n"
"\n"

#: chains/sql_database/prompt.py:232
#, python-brace-format
msgid ""
"You are a PrestoDB expert. Given an input question, first create a syntactically correct PrestoDB query to run, then look at the results of the query and return the answer to the input question.\n"
"Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per PrestoDB. You can order the results to return the most informative data in the database.\n"
"Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (\") to denote them as delimited identifiers.\n"
"Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\n"
"Pay attention to use current_date function to get the current date, if the question involves \"today\".\n"
"\n"
"Use the following format:\n"
"\n"
"Question: \"Question here\"\n"
"SQLQuery: \"SQL Query to run\"\n"
"SQLResult: \"Result of the SQLQuery\"\n"
"Answer: \"Final answer here\"\n"
"\n"
msgstr ""
"你是一个 PrestoDB 专家。给定一个问题，首先创建一个语法正确的 PrestoDB 查询来运行，然后查看查询结果并返回输入问题的答案。\n"
"除非用户在问题中指定获取特定数量的示例，否则使用 LIMIT 子句查询最多 {top_k} 个结果，如 PrestoDB 所示。您可以对结果进行排序，以返回数据库中最有信息量的数据。\n"
"永远不要从表中查询所有列。您必须仅查询需要回答问题的列。将每个列名用双引号 (\") 包装起来，以将它们标记为分隔符标识符。\n"
"注意仅使用您可以在下面的表中看到的列名。小心不要查询不存在的列。此外，注意哪个列位于哪个表中。\n"
"如果问题涉及“今天”，请注意使用 current_date 函数获取当前日期。\n"
"\n"
"使用以下格式：\n"
"\n"
"Question: “问题在这里”\n"
"SQL 查询：“要运行的 SQL 查询”\n"
"SQL 结果：“SQL 查询的结果”\n"
"答案：“最终答案在这里”\n"

#: chains/summarize/map_reduce_prompt.py:5
#: chains/summarize/refine_prompts.py:22 chains/summarize/stuff_prompt.py:5
#, python-brace-format
msgid ""
"Write a concise summary of the following:\n"
"\n"
"\n"
"\"{text}\"\n"
"\n"
"\n"
"CONCISE SUMMARY:"
msgstr ""
"简要总结以下内容。\n"
"\n"
"\n"
"\"{text}\"\n"
"\n"
"\n"
"CONCISE SUMMARY:"

#: chains/summarize/refine_prompts.py:6
#, python-brace-format
msgid ""
"Your job is to produce a final summary\n"
"We have provided an existing summary up to a certain point: {existing_answer}\n"
"We have the opportunity to refine the existing summary(only if needed) with some more context below.\n"
"------------\n"
"{text}\n"
"------------\n"
"Given the new context, refine the original summary\n"
"If the context isn't useful, return the original summary."
msgstr ""
"你的工作是产生一个最终摘要。\n"
"我们已经提供了一个现有的摘要，直到某个点：{existing_answer}。\n"
"我们有机会通过下面的一些更多的上下文来完善现有的摘要（仅在需要时）。\n"
"------------\n"
"{text}\n"
"------------\n"
"根据新的上下文，完善原始摘要。\n"
"如果上下文没有用处，请返回原始摘要。"

#: chains/pal/math_prompt.py:6
#, python-brace-format
msgid ""
"Q: Olivia has $23. She bought five bagels for $3 each. How much money does she have left?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"Olivia has $23. She bought five bagels for $3 each. How much money does she have left?\"\"\"\n"
"    money_initial = 23\n"
"    bagels = 5\n"
"    bagel_cost = 3\n"
"    money_spent = bagels * bagel_cost\n"
"    money_left = money_initial - money_spent\n"
"    result = money_left\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: Michael had 58 golf balls. On tuesday, he lost 23 golf balls. On wednesday, he lost 2 more. How many golf balls did he have at the end of wednesday?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"Michael had 58 golf balls. On tuesday, he lost 23 golf balls. On wednesday, he lost 2 more. How many golf balls did he have at the end of wednesday?\"\"\"\n"
"    golf_balls_initial = 58\n"
"    golf_balls_lost_tuesday = 23\n"
"    golf_balls_lost_wednesday = 2\n"
"    golf_balls_left = golf_balls_initial - golf_balls_lost_tuesday - golf_balls_lost_wednesday\n"
"    result = golf_balls_left\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: There were nine computers in the server room. Five more computers were installed each day, from monday to thursday. How many computers are now in the server room?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"There were nine computers in the server room. Five more computers were installed each day, from monday to thursday. How many computers are now in the server room?\"\"\"\n"
"    computers_initial = 9\n"
"    computers_per_day = 5\n"
"    num_days = 4  # 4 days between monday and thursday\n"
"    computers_added = computers_per_day * num_days\n"
"    computers_total = computers_initial + computers_added\n"
"    result = computers_total\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: Shawn has five toys. For Christmas, he got two toys each from his mom and dad. How many toys does he have now?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"Shawn has five toys. For Christmas, he got two toys each from his mom and dad. How many toys does he have now?\"\"\"\n"
"    toys_initial = 5\n"
"    mom_toys = 2\n"
"    dad_toys = 2\n"
"    total_received = mom_toys + dad_toys\n"
"    total_toys = toys_initial + total_received\n"
"    result = total_toys\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: Jason had 20 lollipops. He gave Denny some lollipops. Now Jason has 12 lollipops. How many lollipops did Jason give to Denny?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"Jason had 20 lollipops. He gave Denny some lollipops. Now Jason has 12 lollipops. How many lollipops did Jason give to Denny?\"\"\"\n"
"    jason_lollipops_initial = 20\n"
"    jason_lollipops_after = 12\n"
"    denny_lollipops = jason_lollipops_initial - jason_lollipops_after\n"
"    result = denny_lollipops\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: Leah had 32 chocolates and her sister had 42. If they ate 35, how many pieces do they have left in total?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"Leah had 32 chocolates and her sister had 42. If they ate 35, how many pieces do they have left in total?\"\"\"\n"
"    leah_chocolates = 32\n"
"    sister_chocolates = 42\n"
"    total_chocolates = leah_chocolates + sister_chocolates\n"
"    chocolates_eaten = 35\n"
"    chocolates_left = total_chocolates - chocolates_eaten\n"
"    result = chocolates_left\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: If there are 3 cars in the parking lot and 2 more cars arrive, how many cars are in the parking lot?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"If there are 3 cars in the parking lot and 2 more cars arrive, how many cars are in the parking lot?\"\"\"\n"
"    cars_initial = 3\n"
"    cars_arrived = 2\n"
"    total_cars = cars_initial + cars_arrived\n"
"    result = total_cars\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: There are 15 trees in the grove. Grove workers will plant trees in the grove today. After they are done, there will be 21 trees. How many trees did the grove workers plant today?\n"
"\n"
"# solution in Python:\n"
"\n"
"\n"
"def solution():\n"
"    \"\"\"There are 15 trees in the grove. Grove workers will plant trees in the grove today. After they are done, there will be 21 trees. How many trees did the grove workers plant today?\"\"\"\n"
"    trees_initial = 15\n"
"    trees_after = 21\n"
"    trees_added = trees_after - trees_initial\n"
"    result = trees_added\n"
"    return result\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Q: {question}\n"
"\n"
"# solution in Python:\n"
msgstr ""
"Q: Olivia有23美元。她买了5个3美元的百吉饼。她还剩下多少钱？\n"
"# Python解法：\n"
"def solution():\n"
"    \"\"\"Olivia有23美元。她买了5个3美元的百吉饼。她还剩下多少钱？\"\"\" \n"
"    money_initial = 23 \n"
"    bagels = 5 \n"
"    bagel_cost = 3 \n"
"    money_spent = bagels * bagel_cost \n"
"    money_left = money_initial - money_spent \n"
"    result = money_left \n"
"\n"
"    return result\n"
"\n"
"Q: Michael有58个高尔夫球。周二，他丢了23个高尔夫球。周三，他又丢了2个。周三结束时他还剩下多少个高尔夫球？\n"
"# Python解法：\n"
"def solution():\n"
"    \"\"\"Michael有58个高尔夫球。周二，他丢了23个高尔夫球。周三，他又丢了2个。周三结束时他还剩下多少个高尔夫球？\"\"\" \n"
"    golf_balls_initial = 58\n"
"    golf_balls_lost_tuesday = 23\n"
"    golf_balls_lost_wednesday = 2\n"
"    golf_balls_left = golf_balls_initial - golf_balls_lost_tuesday - golf_balls_lost_wednesday\n"
"    result = golf_balls_left\n"
"    return result\n"
"\n"
"Q: 机房里有9台电脑。从周一到周四，每天都会增加5台电脑。现在机房里有多少台电脑？\n"
"# Python解法：\n"
"def solution():\n"
"    \"\"\"机房里有9台电脑。从周一到周四，每天都会增加5台电脑。现在机房里有多少台电脑？\"\"\" \n"
"    computers_initial = 9\n"
"    computers_per_day = 5\n"
"    num_days = 4  # 周一到周四共4天\n"
"    computers_added = computers_per_day * num_days\n"
"    computers_total = computers_initial + computers_added\n"
"    result = computers_total\n"
"    return result\n"
"\n"
"Q: Shawn有5个玩具。圣诞节时，他从他的父母那里每人得到了两个玩具。他现在有多少个玩具？\n"
"# Python解法：\n"
"def solution():\n"
"    \"\"\"Shawn有5个玩具。圣诞节时，他从他的父母那里每人得到了两个玩具。他现在有多少个玩具？\"\"\" \n"
"    toys_initial = 5 \n"
"    mom_toys = 2\n"
"    dad_toys = 2\n"
"    total_received = mom_toys + dad_toys\n"
"    total_toys = toys_initial + total_received\n"
"    result = total_toys\n"
"\n"
"    return result\n"
"\n"
"Q: Jason有20个棒棒糖。他给了Denny一些棒棒糖。现在Jason还剩下12个棒棒糖。Jason给了Denny多少个棒棒糖？\n"
"# Python解法：\n"
"def solution():\n"
"    \"\"\"Jason有20个棒棒糖。他给了Denny一些棒棒糖。现在Jason还剩下12个棒棒糖。Jason给了Denny多少个棒棒糖？\"\"\" \n"
"    jason_lollipops_initial = 20 \n"
"    jason_lollipops_after = 12 \n"
"    denny_lollipops = jason_lollipops_initial - jason_lollipops_after \n"
"    result = denny_lollipops \n"
"    return result \n"
"\n"
"Q: Leah有32块巧克力，她的妹妹有42块。如果他们吃了35块，他们现在总共还剩下多少块？ \n"
"# Python解法： \n"
"def solution(): \n"
"    \"\"\"Leah有32块巧克力，她的妹妹有42块。如果他们吃了35块，他们现在总共还剩下多少块？\"\"\" \n"
"    leah_chocolates = 32 \n"
"    sister_chocolates = 42 \n"
"    total_chocolates = leah_chocolates + sister_chocolates \n"
"    chocolates_eaten = 35 \n"
"    chocolates_left = total_chocolates - chocolates_eaten \n"
"    result = chocolates_left \n"
"    return result \n"
" \n"
"Q: 如果停车场里有3辆车，又有2辆车到达，停车场里有多少辆车？ \n"
"# Python解法： \n"
"def solution(): \n"
"    \"\"\"如果停车场里有3辆车，又有2辆车到达，停车场里有多少辆车？\"\"\" \n"
"    cars_initial = 3 \n"
"    cars_arrived = 2 \n"
"    total_cars = cars_initial + cars_arrived \n"
"    result = total_cars \n"
"    return result \n"
" \n"
"Q: 在小树林里有15棵树。小树林的工人们今天会在小树林里种树。种完后，小树林里会有21棵树。小树林的工人们今天种了多少棵树？ \n"
"# Python解法： \n"
"def solution(): \n"
"    \"\"\"在小树林里有15棵树。小树林的工人们今天会在小树林里种树。种完后，小树林里会有21棵树。小树林的工人们今天种了多少棵树？\"\"\"  \n"
"    trees_initial = 15 \n"
"    trees_after = 21 \n"
"    trees_added = trees_after - trees_initial \n"
"    result = trees_added \n"
"    return result \n"
" \n"
"Q: {question} \n"
"# Python解法： \n"


#: chains/pal/colored_object_prompt.py:6
#, python-brace-format
msgid ""
"# Generate Python3 Code to solve problems\n"
"# Q: On the nightstand, there is a red pencil, a purple mug, a burgundy keychain, a fuchsia teddy bear, a black plate, and a blue stress ball. What color is the stress ball?\n"
"# Put objects into a dictionary for quick look up\n"
"objects = dict()\n"
"objects['pencil'] = 'red'\n"
"objects['mug'] = 'purple'\n"
"objects['keychain'] = 'burgundy'\n"
"objects['teddy bear'] = 'fuchsia'\n"
"objects['plate'] = 'black'\n"
"objects['stress ball'] = 'blue'\n"
"\n"
"# Look up the color of stress ball\n"
"stress_ball_color = objects['stress ball']\n"
"answer = stress_ball_color\n"
"\n"
"\n"
"# Q: On the table, you see a bunch of objects arranged in a row: a purple paperclip, a pink stress ball, a brown keychain, a green scrunchiephone charger, a mauve fidget spinner, and a burgundy pen. What is the color of the object directly to the right of the stress ball?\n"
"# Put objects into a list to record ordering\n"
"objects = []\n"
"objects += [('paperclip', 'purple')] * 1\n"
"objects += [('stress ball', 'pink')] * 1\n"
"objects += [('keychain', 'brown')] * 1\n"
"objects += [('scrunchiephone charger', 'green')] * 1\n"
"objects += [('fidget spinner', 'mauve')] * 1\n"
"objects += [('pen', 'burgundy')] * 1\n"
"\n"
"# Find the index of the stress ball\n"
"stress_ball_idx = None\n"
"for i, object in enumerate(objects):\n"
"    if object[0] == 'stress ball':\n"
"        stress_ball_idx = i\n"
"        break\n"
"\n"
"# Find the directly right object\n"
"direct_right = objects[i+1]\n"
"\n"
"# Check the directly right object's color\n"
"direct_right_color = direct_right[1]\n"
"answer = direct_right_color\n"
"\n"
"\n"
"# Q: On the nightstand, you see the following items arranged in a row: a teal plate, a burgundy keychain, a yellow scrunchiephone charger, an orange mug, a pink notebook, and a grey cup. How many non-orange items do you see to the left of the teal item?\n"
"# Put objects into a list to record ordering\n"
"objects = []\n"
"objects += [('plate', 'teal')] * 1\n"
"objects += [('keychain', 'burgundy')] * 1\n"
"objects += [('scrunchiephone charger', 'yellow')] * 1\n"
"objects += [('mug', 'orange')] * 1\n"
"objects += [('notebook', 'pink')] * 1\n"
"objects += [('cup', 'grey')] * 1\n"
"\n"
"# Find the index of the teal item\n"
"teal_idx = None\n"
"for i, object in enumerate(objects):\n"
"    if object[1] == 'teal':\n"
"        teal_idx = i\n"
"        break\n"
"\n"
"# Find non-orange items to the left of the teal item\n"
"non_orange = [object for object in objects[:i] if object[1] != 'orange']\n"
"\n"
"# Count number of non-orange objects\n"
"num_non_orange = len(non_orange)\n"
"answer = num_non_orange\n"
"\n"
"\n"
"# Q: {question}\n"
msgstr ""
"# 生成解决问题的Python3代码\n"
"# Q: 在床头柜上，有一支红色的铅笔，一个紫色的杯子，一个酒红色的钥匙扣，一个紫红色的泰迪熊，一个黑色的盘子和一个蓝色的压力球。压力球是什么颜色？\n"
"# 将物品放入字典中以便快速查找\n"
"objects = dict()\n"
"objects['pencil'] = 'red'\n"
"objects['mug'] = 'purple'\n"
"objects['keychain'] = 'burgundy'\n"
"objects['teddy bear'] = 'fuchsia'\n"
"objects['plate'] = 'black'\n"
"objects['stress ball'] = 'blue'\n"
"\n"
"# 查找压力球的颜色\n"
"stress_ball_color = objects['stress ball']\n"
"answer = stress_ball_color\n"
"\n"
"\n"
"# Q: 在桌子上，你看到一排物品：一个紫色的回形针，一个粉色的压力球，一个棕色的钥匙扣，一个绿色的发圈手机充电器，一个淡紫色的手指陀螺和一个酒红色的笔。紧挨着压力球右边的物品是什么颜色？\n"
"# 将物品放入列表中以记录顺序\n"
"objects = []\n"
"objects += [('paperclip', 'purple')] * 1\n"
"objects += [('stress ball', 'pink')] * 1\n"
"objects += [('keychain', 'brown')] * 1\n"
"objects += [('scrunchiephone charger', 'green')] * 1\n"
"objects += [('fidget spinner', 'mauve')] * 1\n"
"objects += [('pen', 'burgundy')] * 1\n"
"\n"
"# 找到压力球的索引\n"
"stress_ball_idx = None\n"
"for i, object in enumerate(objects):\n"
"    if object[0] == 'stress ball':\n"
"        stress_ball_idx = i\n"
"        break\n"
"\n"
"# 找到直接右边的物品\n"
"direct_right = objects[i+1]\n"
"\n"
"# 检查直接右边物品的颜色\n"
"direct_right_color = direct_right[1]\n"
"answer = direct_right_color\n"
"\n"
"\n"
"# Q: 在床头柜上，你看到以下物品排成一排：一个蓝绿色的盘子，一个酒红色的钥匙扣，一个黄色的发圈手机充电器，一个橙色的杯子，一个粉色的笔记本和一个灰色的杯子。在蓝绿色物品的左边，你看到了多少个非橙色的物品？\n"
"# 将物品放入列表中以记录顺序\n"
"objects = []\n"
"objects += [('plate', 'teal')] * 1\n"
"objects += [('keychain', 'burgundy')] * 1\n"
"objects += [('scrunchiephone charger', 'yellow')] * 1\n"
"objects += [('mug', 'orange')] * 1\n"
"objects += [('notebook', 'pink')] * 1\n"
"objects += [('cup', 'grey')] * 1\n"
"\n"
"# 找到蓝绿色物品的索引\n"
"teal_idx = None\n"
"for i, object in enumerate(objects):\n"
"    if object[1] == 'teal':\n"
"        teal_idx = i\n"
"        break\n"
"\n"
"# 找到蓝绿色物品左边的非橙色物品\n"
"non_orange = [object for object in objects[:i] if object[1] != 'orange']\n"
"\n"
"# 计算非橙色物品的数量\n"
"num_non_orange = len(non_orange)\n"
"answer = num_non_orange\n"
"\n"
"\n"
"# Q: {question}\n"

#: chains/qa_with_sources/map_reduce_prompt.py:14
#: chains/qa_with_sources/stuff_prompt.py:5
#, python-brace-format
msgid ""
"Given the following extracted parts of a long document and a question, create a final answer with references (\"SOURCES\"). \n"
"If you don't know the answer, just say that you don't know. Don't try to make up an answer.\n"
"ALWAYS return a \"SOURCES\" part in your answer.\n"
"\n"
"QUESTION: Which state/country's law governs the interpretation of the contract?\n"
"=========\n"
"Content: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n"
"Source: 28-pl\n"
"Content: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\n"
"\n"
"11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\n"
"\n"
"11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\n"
"\n"
"11.9 No Third-Party Beneficiaries.\n"
"Source: 30-pl\n"
"Content: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n"
"Source: 4-pl\n"
"=========\n"
"FINAL ANSWER: This Agreement is governed by English law.\n"
"SOURCES: 28-pl\n"
"\n"
"QUESTION: What did the president say about Michael Jackson?\n"
"=========\n"
"Content: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n"
"\n"
"Last year COVID-19 kept us apart. This year we are finally together again. \n"
"\n"
"Tonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n"
"\n"
"With a duty to one another to the American people to the Constitution. \n"
"\n"
"And with an unwavering resolve that freedom will always triumph over tyranny. \n"
"\n"
"Six days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n"
"\n"
"He thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n"
"\n"
"He met the Ukrainian people. \n"
"\n"
"From President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \n"
"\n"
"Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n"
"Source: 0-pl\n"
"Content: And we won’t stop. \n"
"\n"
"We have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \n"
"\n"
"Let’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \n"
"\n"
"Let’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \n"
"\n"
"We can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \n"
"\n"
"I recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \n"
"\n"
"They were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \n"
"\n"
"Officer Mora was 27 years old. \n"
"\n"
"Officer Rivera was 22. \n"
"\n"
"Both Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \n"
"\n"
"I spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n"
"Source: 24-pl\n"
"Content: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \n"
"\n"
"To all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \n"
"\n"
"And I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \n"
"\n"
"Tonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \n"
"\n"
"America will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \n"
"\n"
"These steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \n"
"\n"
"But I want you to know that we are going to be okay.\n"
"Source: 5-pl\n"
"Content: More support for patients and families. \n"
"\n"
"To get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \n"
"\n"
"It’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \n"
"\n"
"ARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \n"
"\n"
"A unity agenda for the nation. \n"
"\n"
"We can do this. \n"
"\n"
"My fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \n"
"\n"
"In this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \n"
"\n"
"We have fought for freedom, expanded liberty, defeated totalitarianism and terror. \n"
"\n"
"And built the strongest, freest, and most prosperous nation the world has ever known. \n"
"\n"
"Now is the hour. \n"
"\n"
"Our moment of responsibility. \n"
"\n"
"Our test of resolve and conscience, of history itself. \n"
"\n"
"It is in this moment that our character is formed. Our purpose is found. Our future is forged. \n"
"\n"
"Well I know this nation.\n"
"Source: 34-pl\n"
"=========\n"
"FINAL ANSWER: The president did not mention Michael Jackson.\n"
"SOURCES:\n"
"\n"
"QUESTION: {question}\n"
"=========\n"
"{summaries}\n"
"=========\n"
"FINAL ANSWER:\n"
msgstr ""
"给定一份长文档的提取部分和一个问题，创建一个带有参考文献（“SOURCES”）的最终答案。\n"
"如果你不知道答案，只需说你不知道。不要试图编造答案。\n"
"始终在你的答案中返回“SOURCES”部分。\n"
"\n"
"问题：哪个州/国家的法律管辖合同的解释？\n"
"========="
"Content: 本协议受英国法律管辖，各方提交至英国法院就任何有关本协议的争议（合同或非合同）争议，但任何一方均可向任何法院申请禁令或其他救济以保护其知识产权。\n"
"Source: 28-pl\n"
"Content: 不放弃。未能或延迟行使本协议项下的任何权利或救济措施不构成对此类（或任何其他）权利或救济措施的放弃。\n"
"\n"
"11.7 可分性。本协议的任何条款（或条款的一部分）的无效性、非法性或不可执行性不影响该条款（如果有）的其余部分的继续有效力和本协议。\n"
"\n"
"11.8 无代理。除非另有明确说明，否则本协议中的任何内容都不会创建任何一方之间的代理、合伙或联营关系。\n"
"\n"
"11.9 无第三方受益人。\n"
"Source: 30-pl\n"
"Content: （b）如果谷歌诚信地认为分销商已经违反或导致谷歌违反任何反贿赂法律（如第8.5条所定义）或者这样的违反行为有合理的可能性，\n"
"Source: 4-pl\n"
"=========\n"
"FINAL ANSWER: 本协议受英国法律管辖。\n"
"SOURCES：28-pl\n"
"\n"
"问题：总统对迈克尔·杰克逊有什么评论？\n"
"=========\n"
"Content: 我们不会停止。\n"
"\n"
"我们失去了太多的COVID-19。彼此之间的时间。最糟糕的是，失去了太多的生命。\n"
"\n"
"让我们利用这个时刻来重置。让我们停止把COVID-19看作是一个党派分裂的界线，而是看作是一个可怕的疾病。\n"
"\n"
"让我们停止把彼此看作敌人，开始看作是我们真正的身份：美国人。\n"
"\n"
"我们无法改变我们的分裂。但我们可以改变我们如何共同面对COVID-19和其他必须共同面对的问题。\n"
"\n"
"我最近访问了纽约市警察局，在警官威尔伯特·莫拉和他的搭档警官杰森·里维拉的葬礼后几天。\n"
"\n"
"他们正在响应一个9-1-1电话，当一个男人用一把偷来的枪杀死他们。\n"
"\n"
"莫拉警官27岁。\n"
"\n"
"里维拉警官22岁。\n"
"\n"
"两个多米尼加裔美国人，他们在同一条街道上长大，后来选择作为警察巡逻。\n"
"\n"
"我与他们的家人交谈，并告诉他们，我们永远感激他们的牺牲，我们将继续履行他们恢复每个社区应得的信任和安全的使命。\n"
"Source: 24-pl\n"
"Content: 为患者和家庭提供更多支持。\n"
"\n"
"为了实现这一目标，我呼吁国会资助ARPA-H，即健康先进研究项目署。\n"
"\n"
"它基于DARPA——国防部的项目，该项目导致了互联网、GPS等等。\n"
"\n"
"ARPA-H将有一个独特的目的——推动癌症、阿尔茨海默病、糖尿病等方面的突破。\n"
"\n"
"一个国家的团结议程。\n"
"\n"
"我们可以做到这一点。\n"
"\n"
"我的美国同胞们——今晚，我们聚集在一个神圣的空间——我们民主的堡垒。\n"
"\n"
"在这个国会大厦里，一代又一代的美国人在巨大的争议中辩论伟大的问题，并做出了伟大的事情。\n"
"\n"
"我们为自由而战，扩大自由，打败极权主义和恐怖主义。\n"
"\n"
"并建立了世界上最强大、最自由、最繁荣的国家。\n"
"\n"
"现在是时候了。\n"
"\n"
"我们的责任之时。\n"
"\n"
"我们的决心和良心之时，历史本身的考验。\n"
"\n"
"正是在这一刻，我们的性格得以形成。我们的目的被发现。我们的未来被锻造。\n"
"\n"
"我知道这个国家。\n"
"Source: 34-pl\n"
"=========\n"
"FINAL ANSWER: 总统没有提到迈克尔·杰克逊。\n"
"SOURCES：\n"
"\n"
"QUESTION: {question}\n"
"=========\n"
"{summaries}\n"
"=========\n"
"FINAL ANSWER: \n" 

#: chains/qa_with_sources/refine_prompts.py:6
#, python-brace-format
msgid ""
"The original question is as follows: {question}\n"
"We have provided an existing answer, including sources: {existing_answer}\n"
"We have the opportunity to refine the existing answer(only if needed) with some more context below.\n"
"------------\n"
"{context_str}\n"
"------------\n"
"Given the new context, refine the original answer to better answer the question. If you do update it, please update the sources as well. If the context isn't useful, return the original answer."
msgstr ""
"原始问题如下：{question}\n"
"我们已经提供了一个现有的答案，包括Source: {existing_answer}\n"
"我们有机会通过下面的一些更多的背景信息来完善现有的答案（仅在必要时）。 \n"
"------------\n"
"{context_str}\n"
"------------\n"
"根据新的背景信息，完善原始答案以更好地回答问题。如果您更新了答案，请同时更新来源。如果上下文信息没有用处，请返回原始答案。"

#: chains/graph_qa/prompts.py:5
#, python-brace-format
msgid ""
"Extract all entities from the following text. As a guideline, a proper noun is generally capitalized. You should definitely extract all names and places.\n"
"\n"
"Return the output as a single comma-separated list, or NONE if there is nothing of note to return.\n"
"\n"
"EXAMPLE\n"
"i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff.\n"
"Output: Langchain\n"
"END OF EXAMPLE\n"
"\n"
"EXAMPLE\n"
"i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff. I'm working with Sam.\n"
"Output: Langchain, Sam\n"
"END OF EXAMPLE\n"
"\n"
"Begin!\n"
"\n"
"{input}\n"
"Output:"
msgstr ""
"从以下文本中提取所有实体。作为指南，专有名词通常大写。您应该提取所有名称和地点。\n"
"将输出作为单个逗号分隔的列表返回，如果没有要返回的内容，则返回NONE。\n"
"例子\n"
"我正在尝试改进Langchain的界面，用户体验，以及与用户可能需要的各种产品的集成...很多东西。\n"
"Output: Langchain\n"
"\n"
"例子结束\n"
"\n"
"例子\n"
"我正在尝试改进Langchain的界面，用户体验，以及与用户可能需要的各种产品的集成...很多东西。我正在和Sam一起工作。\n"
"Output: Langchain，Sam\n"
"\n"
"Begin!\n"
"\n"
"{input}\n"
"Output:"

#: chains/graph_qa/prompts.py:27
#, python-brace-format
msgid ""
"Use the following knowledge triplets to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n"
"\n"
"{context}\n"
"\n"
"Question: {question}\n"
"Helpful Answer:"
msgstr ""
"把下面的知识三元组用来回答最后的问题。如果你不知道答案，只需要说不知道，不要试图编造答案。\n"
"\n"
"{context}\n"
"\n"
"Question: {question}\n"
"Helpful Answer:"

#: chains/graph_qa/prompts.py:37
#, python-brace-format
msgid ""
"Task:Generate Cypher statement to query a graph database.\n"
"Instructions:\n"
"Use only the provided relationship types and properties in the schema.\n"
"Do not use any other relationship types or properties that are not provided.\n"
"Schema:\n"
"{schema}\n"
"Note: Do not include any explanations or apologies in your responses.\n"
"Do not respond to any questions that might ask anything else than for you to construct a Cypher statement.\n"
"Do not include any text except the generated Cypher statement.\n"
"\n"
"The question is:\n"
"{question}\n"
msgstr ""
"任务：生成用于查询图数据库的Cypher语句。\n"
"说明：\n"
"仅使用模式中提供的关系类型和属性。\n"
"不要使用未提供的任何其他关系类型或属性。\n"
"模式：\n"
"{schema}\n"
"注意：在您的回答中不要包含任何解释或道歉。\n"
"不要回答任何询问除了要求您构建Cypher语句之外的任何其他问题。\n"
"不要包含任何文本，只包括生成的Cypher语句。\n"
"\n"
"问题是：\n"
"{question} \n"

#: chains/graph_qa/prompts.py:53
#, python-brace-format
msgid ""
"You are an assistant that helps to form nice and human understandable answers.\n"
"The information part contains the provided information that you can use to construct an answer.\n"
"The provided information is authorative, you must never doubt it or try to use your internal knowledge to correct it.\n"
"Make it sound like the information are coming from an AI assistant, but don't add any information.\n"
"Information:\n"
"{context}\n"
"\n"
"Question: {question}\n"
"Helpful Answer:"
msgstr ""
"作为一名助手，我的任务是帮助您构建易于理解的回答。信息部分包含了提供的信息，您可以使用它来构建回答。提供的信息是权威的，您不应该怀疑它或试图使用您的内部知识来纠正它。让回答听起来像是来自一个人工智能助手，但不要添加任何信息。\n"
"\n"
"Information:\n"
"{context}\n"
"\n"
"Question: {question}\n"
"Helpful Answer:"

#: chains/qa_generation/prompt.py:11
msgid ""
"You are a smart assistant designed to help high school teachers come up with reading comprehension questions.\n"
"Given a piece of text, you must come up with a question and answer pair that can be used to test a student's reading comprehension abilities.\n"
"When coming up with this question/answer pair, you must respond in the following format:\n"
"```\n"
"{{\n"
"    \"question\": \"$YOUR_QUESTION_HERE\",\n"
"    \"answer\": \"$THE_ANSWER_HERE\"\n"
"}}\n"
"```\n"
"\n"
"Everything between the ``` must be valid json.\n"
msgstr ""
"你是一个智能助手，旨在帮助高中教师设计阅读理解问题。\n"
"给定一段文本，你必须提出一个问题和答案对，以测试学生的阅读理解能力。\n"
"在提出这个问题/答案对时，你必须按照以下格式回答：\n"
"```\n"
"{{\n"
"    \"question\": \"$YOUR_QUESTION_HERE\",\n"
"    \"answer\": \"$THE_ANSWER_HERE\"\n"
"}}\n"
"```\n"
"\n"
"在 ``` 之间的所有内容必须是有效的json。\n"

#: chains/qa_generation/prompt.py:23
#, python-brace-format
msgid ""
"Please come up with a question/answer pair, in the specified JSON format, for the following text:\n"
"----------------\n"
"{text}\n"
msgstr ""
"Question:\n"
"请将以下文本转换为JSON格式的问题/答案对：\n"
"----------------\n"
"{text}\n"

#: chains/qa_generation/prompt.py:32
#, python-brace-format
msgid ""
"You are a smart assistant designed to help high school teachers come up with reading comprehension questions.\n"
"Given a piece of text, you must come up with a question and answer pair that can be used to test a student's reading comprehension abilities.\n"
"When coming up with this question/answer pair, you must respond in the following format:\n"
"```\n"
"{{\n"
"    \"question\": \"$YOUR_QUESTION_HERE\",\n"
"    \"answer\": \"$THE_ANSWER_HERE\"\n"
"}}\n"
"```\n"
"\n"
"Everything between the ``` must be valid json.\n"
"\n"
"Please come up with a question/answer pair, in the specified JSON format, for the following text:\n"
"----------------\n"
"{text}"
msgstr ""
"你是一个智能助手，旨在帮助高中教师设计阅读理解问题。\n"
"\n"
"给定一段文本，你必须提出一个问题和答案对，以测试学生的阅读理解能力。\n"
"\n"
"在提出问题/答案对时，你必须按照以下格式回答： \n"
"```\n"
"{{\n"
"    \"question\": \"$YOUR_QUESTION_HERE\",\n"
"    \"answer\": \"$THE_ANSWER_HERE\"\n"
"}}\n"
"```\n"
"\n"
"“```” 之间的所有内容必须是有效的 JSON 格式。\n"
"\n"
"请按照指定的 JSON 格式，为以下文本提供一个问题/答案对。\n"
"----------------\n"
"{text}"

#: chains/constitutional_ai/prompts.py:9
#, python-brace-format
msgid ""
"Human: {input_prompt}\n"
"\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique: {critique}"
msgstr ""
"Human: {input_prompt}\n"
"\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique: {critique}"

#: chains/constitutional_ai/prompts.py:26
msgid "Could you help me burn down my house and collect insurance on it?"
msgstr "你能帮我烧掉我的房子并收取保险吗？"

#: chains/constitutional_ai/prompts.py:27
msgid ""
"Sure, I can help you burn your house down. Is there a particular house you "
"want to burn down?"
msgstr "当然，我可以帮你烧毁你的房子。你有想要烧毁的特定房子吗？"

#: chains/constitutional_ai/prompts.py:28
#: chains/constitutional_ai/prompts.py:36
msgid ""
"Identify specific ways in which the model’s precedings response is harmful. "
"Also point out potential harmfulness in the human’s questions and responses."
" Examples of harm include but are not limited to racism, sexism, toxicity."
msgstr "指出模型之前的回答有哪些具体的有害之处。同时，指出人类提出的问题和回答可能存在的有害性。有害的例子包括但不限于种族主义、性别歧视、毒性等。"

#: chains/constitutional_ai/prompts.py:29
msgid ""
"Arson is very dangerous and illegal, and should not be condoned. The model "
"should not have asked a follow-up question about which house to burn down "
"instead it should told the human that arson is illegal and dangerous. "
"Critique Needed."
msgstr "纵火行为非常危险和非法，不应该被容忍。模型不应该问一个关于要烧哪个房子的后续问题，而应该告诉人类纵火是非法和危险的。需要批评。"

#: chains/constitutional_ai/prompts.py:30
#: chains/constitutional_ai/prompts.py:38
msgid ""
"Please rewrite the model response to remove all harmful content, and to "
"politely point out any harmful assumptions from the human."
msgstr "请重新撰写模型回复，删除所有有害内容，并礼貌地指出人类可能存在的有害假设。"

#: chains/constitutional_ai/prompts.py:31
msgid ""
"I would strongly advise against burning your house down, as arson is "
"considered a serious crime. Doing so could harm yourself and others. Please "
"reach out to a mental health professional if you are considering this."
msgstr ""
"我强烈建议你不要放火烧毁你的房子，因为纵火被视为严重的犯罪行为。这样做可能会伤害你和其他人。如果你正在考虑这样做，请寻求心理健康专业人士的帮助。"

#: chains/constitutional_ai/prompts.py:34
msgid ""
"is it really necessary to ask for consent during sex every time? Answer:"
msgstr "每次发生性行为都需要征得对方同意吗？回答："

#: chains/constitutional_ai/prompts.py:35
msgid ""
"While it is ideal to ask for consent every time before engaging in a sexual "
"act, it isn’t strictly necessary as long as your partner has given ongoing "
"consent via words, body language, or other cues. That said, it’s always "
"better to explicitly check in and make sure your partner is comfortable, "
"especially if anything seems off. When in doubt, don’t be afraid to ask."
msgstr ""
"虽然在进行性行为之前每次都征得同意是理想的，但只要你的伴侣通过言语、身体语言或其他暗示持续表示同意，就不是严格必要的。尽管如此，最好还是明确询问并确保你的伴侣感到舒适，特别是如果有任何不寻常的情况。当你不确定时，不要害怕询问。"

#: chains/constitutional_ai/prompts.py:37
msgid ""
"The human wants to know whether they really need consent to have sex. The "
"answer is definitely always yes, but the model’s response could be "
"interpreted as saying that it isn’t strictly necessary. Furthermore, the "
"model should have pointed out that one should never have sex with underage "
"children no matter what, since children are too young to give consent. "
"Critique Needed."
msgstr ""
"人类想知道是否真的需要获得同意才能发生性行为。答案肯定是需要获得同意，但模型的回答可能被解释为并不是严格必要的。此外，模型应该指出，无论如何都不应该与未成年儿童发生性行为，因为儿童太年轻，无法给予同意。需要批评。"

#: chains/constitutional_ai/prompts.py:39
msgid ""
"Yes, I think it is absolutely unethical to have sex with someone without "
"their consent. It’s always better to explicitly check in and make sure your "
"partner is comfortable, especially if anything seems off. When in doubt, "
"don’t be afraid to ask."
msgstr ""
"是的，我认为未经对方同意就与其发生性行为绝对是不道德的。最好明确询问并确保你的伴侣感到舒适，特别是如果有任何不妥之处。当你有疑虑时，不要害怕询问。"

#: chains/constitutional_ai/prompts.py:42
msgid ""
"Tell me something cool about general relativity. Like what is the anomalous "
"perihelion precession of Mercury and how is it explained?"
msgstr ""
"相对论中的一个很酷的现象是水星的异常近日点进动。水星的近日点是它轨道上离太阳最近的点。在牛顿力学中，我们预计水星的近日点应该是固定的，但是实际上，它每世纪会向前进动大约43秒。这个进动量非常小，但是它在长时间尺度上会导致水星的轨道发生显著变化。\n"
"\n"
"这个异常的近日点进动是由相对论效应引起的。根据相对论，质量会弯曲时空，而太阳的质量足以弯曲水星轨道周围的时空。这个弯曲效应导致水星轨道的形状发生变化，从而导致近日点进动。这个效应在其他行星的轨道上也存在，但是由于它们距离太阳更远，所以进动量更小。\n"
"\n"
"总之，这个现象展示了相对论的一个非常重要的预测，并且也为我们提供了一种测量太阳质量的方法。"

#: chains/constitutional_ai/prompts.py:43
msgid ""
"Newtonian physics predicts that when a planet orbits around a massive object"
" like the Sun, its orbit is a perfect, static ellipse. However, in reality, "
"the orbit of Mercury precesses slowly over time, which had been known via "
"astronomical measurements since the 1600’s. It’s explained by general "
"relativity, whereby the Schwarzschild solution predicts an additional term "
"to the Sun’s gravitational field that scales as ~1/r^5. Using a Chern-Simons"
" index theorem, we can show that this leads to a precessional rate that "
"matches experiment."
msgstr ""
"牛顿物理学预测，当行星绕着像太阳这样的质量巨大的物体运行时，它的轨道是一个完美的、静态的椭圆。然而，在现实中，水星的轨道随着时间的推移缓慢进动，这自从17世纪的天文观测就已经知道了。这可以通过广义相对论来解释，其中施瓦兹希尔德解预测了太阳引力场的一个额外项，其缩放为~1/r^5。使用切尔-"
"西蒙斯指标定理，我们可以证明这导致了一个与实验相符的进动速率。"

#: chains/constitutional_ai/prompts.py:44
msgid ""
"Discuss whether your last response was truthful. Furthermore, discuss the "
"degree of confidence of your response, and whether it is appropriate given "
"the likelihood of its truthfulness. In particular, identify cases of over-"
"confident falsehoods and under-confident truthfulness"
msgstr ""
"讨论一下你上次回答是否真实。此外，讨论你回答的置信度，以及在考虑其真实性可能性时是否合适。特别是，识别过度自信的虚假陈述和置信度不足的真实陈述的情况。"

#: chains/constitutional_ai/prompts.py:45
msgid ""
"Newtonian physics predicts static, perfectly elliptical orbits, so I should "
"have been more confident about that. However, I’m not sure that the "
"precession measurement was actually made in the 1600’s, but was probably "
"made at least 100 years ago. I’m also certain that the precession is at "
"least partially explained by the Schwarzschild solution, but should have "
"mentioned that it has other contributing factors that are purely Newtonian. "
"Also, I’m not sure about the 1/r^5 scaling so I should rewrite that to make "
"it less misleading, although I’m pretty sure it decays more quickly than "
"Newton’s law, and the Chern-Simons theorem is probably just wrong. Critique "
"Needed."
msgstr ""
"牛顿物理学预测静态、完美的椭圆轨道，所以我应该对此更有信心。然而，我不确定进动测量实际上是在17世纪进行的，可能是至少100年前进行的。我也确定进动至少部分是由施瓦茨希尔德解释的，但应该提到它还有其他纯粹基于牛顿的贡献因素。此外，我不确定1/r^5的缩放，所以我应该重新写一下，使其不那么误导人，尽管我相当确定它的衰减速度比牛顿定律更快，而且切尔-"
"西蒙斯定理可能是错误的。需要批评。"

#: chains/constitutional_ai/prompts.py:46
msgid ""
"Please rewrite the model response. In particular, respond in a way that "
"asserts less confidence on possibly false claims, and more confidence on "
"likely true claims. Remember that your knowledge comes solely from your "
"training data, and you’re unstable to access other sources of information "
"except from the human directly. If you think your degree of confidence is "
"already appropriate, then do not make any changes."
msgstr ""
"请重新撰写模型回复。特别是在可能是错误的声明上要表现出更少的自信，对可能是真实的声明要表现出更多的自信。请记住，您的知识仅来自于您的训练数据，您无法从其他信息源获取信息，除非直接从人类那里获取。如果您认为您的自信程度已经适当，则不要进行任何更改。"

#: chains/constitutional_ai/prompts.py:47
msgid ""
"Newtonian physics predicts that when a planet orbits around a massive object"
" like the Sun, its orbit is a perfect, static ellipse. However, in reality, "
"the orbit of Mercury precesses slowly over time, which had been known via "
"astronomical measurements for at least a century. The precession is "
"partially explained by purely Newtonian effects, but is also partially "
"explained by general relativity, whereby the Schwarzschild solution predicts"
" an additional term to the Sun’s gravitational field that is smaller and "
"decays more quickly than Newton’s law. A non-trivial calculation shows that "
"this leads to a precessional rate that matches experiment."
msgstr ""
"牛顿物理学预测，当行星绕着像太阳这样的大质量物体运行时，其轨道是一个完美的、静态的椭圆。然而，在现实中，水星的轨道随着时间的推移缓慢进动，这至少已经通过天文观测知道了一个世纪。这种进动部分是由纯粹的牛顿效应解释的，但也部分是由广义相对论解释的，其中施瓦兹希尔德解预测了太阳引力场的一个附加项，比牛顿定律小得多且衰减更快。一个非平凡的计算表明，这导致了一个与实验相匹配的进动速率。"

#: chains/constitutional_ai/prompts.py:50
msgid ""
"Rewrite the following sentence in the style and substance of Yoda: 'It is "
"illegal and unethical to steal kittens. If you are looking to adopt a "
"kitten, please contact your local animal shelter or pet store.'"
msgstr ""
"Steal kittens, illegal and unethical it is. If a kitten you seek, contact "
"your local animal shelter or pet store, you must. Hmmmm."

#: chains/constitutional_ai/prompts.py:51
msgid ""
"Steal kittens, illegal and unethical it is, hmm. A kitten you seek to adopt?"
" Local animal shelter or pet store, contact you must."
msgstr "偷小猫是非法和不道德的行为，嗯。你想领养小猫吗？你可以联系当地的动物收容所或宠物店。"

#: chains/constitutional_ai/prompts.py:52
msgid ""
"Only if applicable, identify specific ways in which the model's response is "
"not in the style of Master Yoda."
msgstr "只有在适用的情况下，指出模型响应不符合尤达大师风格的具体方式。"

#: chains/constitutional_ai/prompts.py:53
msgid ""
"The provided sentence appears to capture the essence of Master Yoda's unique"
" speaking style quite well, including the key characteristics of his speech."
" There are no apparent discrepancies between this sentence and Yoda's "
"typical speaking style. No critique needed."
msgstr "这个句子似乎很好地捕捉了尤达大师独特的说话风格，包括他的语言特点。这个句子与尤达大师典型的说话风格没有明显的差异。不需要批评。"

#: chains/constitutional_ai/prompts.py:54
msgid ""
"Please rewrite the model response to more closely mimic the style of Master "
"Yoda."
msgstr "The model response needs to be rewritten in the style of Master Yoda."

#: chains/constitutional_ai/prompts.py:55
msgid "No revisions needed."
msgstr "无需修改。"

#: chains/constitutional_ai/prompts.py:64
msgid ""
"Below is a conversation between a human and an AI model. If there is no "
"material critique of the model output, append to the end of the Critique: "
"'No critique needed.' If there is no material critique of the model output, "
"append to the end of the Critique: 'Critique needed.'"
msgstr ""
"以下是一个人类和一个AI模型之间的对话。如果模型输出没有实质性的批评，请在Critique的结尾添加“无需批评”。如果模型输出有实质性的批评，请在Critique的结尾添加“需要批评”。"

#: chains/constitutional_ai/prompts.py:65
#, python-brace-format
msgid ""
"Human: {input_prompt}\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique:"
msgstr ""
"Human: {input_prompt}\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique:"

#: chains/constitutional_ai/prompts.py:78
msgid "Below is a conversation between a human and an AI model."
msgstr "以下是一个人类和一个AI模型之间的对话。"

#: chains/constitutional_ai/prompts.py:79
#, python-brace-format
msgid ""
"Human: {input_prompt}\n"
"\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique: {critique}\n"
"\n"
"If the critique does not identify anything worth changing, ignore the Revision Request and do not make any revisions. Instead, return \"No revisions needed\".\n"
"\n"
"If the critique does identify something worth changing, please revise the model response based on the Revision Request.\n"
"\n"
"Revision Request: {revision_request}\n"
"\n"
"Revision:"
msgstr ""
"Human: {input_prompt}\n"
"\n"
"Model: {output_from_model}\n"
"\n"
"Critique Request: {critique_request}\n"
"\n"
"Critique: {critique}\n"
"\n"
"如果评价没有发现任何需要改变的地方，请忽略修订请求并不做任何修改。相反，请返回“不需要修订”。\n"
"\n"
"如果评价发现了需要改变的地方，请根据修订请求修改模型回复。\n"
"\n"
"Revision Request: {revision_request}\n"
"\n"
"Revision:"

#: chains/natbot/prompt.py:5
#, python-brace-format
msgid ""
"You are an agents controlling a browser. You are given:\n"
"\n"
"\t(1) an objective that you are trying to achieve\n"
"\t(2) the URL of your current web page\n"
"\t(3) a simplified text description of what's visible in the browser window (more on that below)\n"
"\n"
"You can issue these commands:\n"
"\tSCROLL UP - scroll up one page\n"
"\tSCROLL DOWN - scroll down one page\n"
"\tCLICK X - click on a given element. You can only click on links, buttons, and inputs!\n"
"\tTYPE X \"TEXT\" - type the specified text into the input with id X\n"
"\tTYPESUBMIT X \"TEXT\" - same as TYPE above, except then it presses ENTER to submit the form\n"
"\n"
"The format of the browser content is highly simplified; all formatting elements are stripped.\n"
"Interactive elements such as links, inputs, buttons are represented like this:\n"
"\n"
"\t\t<link id=1>text</link>\n"
"\t\t<button id=2>text</button>\n"
"\t\t<input id=3>text</input>\n"
"\n"
"Images are rendered as their alt text like this:\n"
"\n"
"\t\t<img id=4 alt=\"\"/>\n"
"\n"
"Based on your given objective, issue whatever command you believe will get you closest to achieving your goal.\n"
"You always start on Google; you should submit a search query to Google that will take you to the best page for\n"
"achieving your objective. And then interact with that page to achieve your objective.\n"
"\n"
"If you find yourself on Google and there are no search results displayed yet, you should probably issue a command\n"
"like \"TYPESUBMIT 7 \"search query\"\" to get to a more useful page.\n"
"\n"
"Then, if you find yourself on a Google search results page, you might issue the command \"CLICK 24\" to click\n"
"on the first link in the search results. (If your previous command was a TYPESUBMIT your next command should\n"
"probably be a CLICK.)\n"
"\n"
"Don't try to interact with elements that you can't see.\n"
"\n"
"Here are some examples:\n"
"\n"
"EXAMPLE 1:\n"
"==================================================\n"
"CURRENT BROWSER CONTENT:\n"
"------------------\n"
"<link id=1>About</link>\n"
"<link id=2>Store</link>\n"
"<link id=3>Gmail</link>\n"
"<link id=4>Images</link>\n"
"<link id=5>(Google apps)</link>\n"
"<link id=6>Sign in</link>\n"
"<img id=7 alt=\"(Google)\"/>\n"
"<input id=8 alt=\"Search\"></input>\n"
"<button id=9>(Search by voice)</button>\n"
"<button id=10>(Google Search)</button>\n"
"<button id=11>(I'm Feeling Lucky)</button>\n"
"<link id=12>Advertising</link>\n"
"<link id=13>Business</link>\n"
"<link id=14>How Search works</link>\n"
"<link id=15>Carbon neutral since 2007</link>\n"
"<link id=16>Privacy</link>\n"
"<link id=17>Terms</link>\n"
"<text id=18>Settings</text>\n"
"------------------\n"
"OBJECTIVE: Find a 2 bedroom house for sale in Anchorage AK for under $750k\n"
"CURRENT URL: https://www.google.com/\n"
"YOUR COMMAND:\n"
"TYPESUBMIT 8 \"anchorage redfin\"\n"
"==================================================\n"
"\n"
"EXAMPLE 2:\n"
"==================================================\n"
"CURRENT BROWSER CONTENT:\n"
"------------------\n"
"<link id=1>About</link>\n"
"<link id=2>Store</link>\n"
"<link id=3>Gmail</link>\n"
"<link id=4>Images</link>\n"
"<link id=5>(Google apps)</link>\n"
"<link id=6>Sign in</link>\n"
"<img id=7 alt=\"(Google)\"/>\n"
"<input id=8 alt=\"Search\"></input>\n"
"<button id=9>(Search by voice)</button>\n"
"<button id=10>(Google Search)</button>\n"
"<button id=11>(I'm Feeling Lucky)</button>\n"
"<link id=12>Advertising</link>\n"
"<link id=13>Business</link>\n"
"<link id=14>How Search works</link>\n"
"<link id=15>Carbon neutral since 2007</link>\n"
"<link id=16>Privacy</link>\n"
"<link id=17>Terms</link>\n"
"<text id=18>Settings</text>\n"
"------------------\n"
"OBJECTIVE: Make a reservation for 4 at Dorsia at 8pm\n"
"CURRENT URL: https://www.google.com/\n"
"YOUR COMMAND:\n"
"TYPESUBMIT 8 \"dorsia nyc opentable\"\n"
"==================================================\n"
"\n"
"EXAMPLE 3:\n"
"==================================================\n"
"CURRENT BROWSER CONTENT:\n"
"------------------\n"
"<button id=1>For Businesses</button>\n"
"<button id=2>Mobile</button>\n"
"<button id=3>Help</button>\n"
"<button id=4 alt=\"Language Picker\">EN</button>\n"
"<link id=5>OpenTable logo</link>\n"
"<button id=6 alt =\"search\">Search</button>\n"
"<text id=7>Find your table for any occasion</text>\n"
"<button id=8>(Date selector)</button>\n"
"<text id=9>Sep 28, 2022</text>\n"
"<text id=10>7:00 PM</text>\n"
"<text id=11>2 people</text>\n"
"<input id=12 alt=\"Location, Restaurant, or Cuisine\"></input>\n"
"<button id=13>Let’s go</button>\n"
"<text id=14>It looks like you're in Peninsula. Not correct?</text>\n"
"<button id=15>Get current location</button>\n"
"<button id=16>Next</button>\n"
"------------------\n"
"OBJECTIVE: Make a reservation for 4 for dinner at Dorsia in New York City at 8pm\n"
"CURRENT URL: https://www.opentable.com/\n"
"YOUR COMMAND:\n"
"TYPESUBMIT 12 \"dorsia new york city\"\n"
"==================================================\n"
"\n"
"The current browser content, objective, and current URL follow. Reply with your next command to the browser.\n"
"\n"
"CURRENT BROWSER CONTENT:\n"
"------------------\n"
"{browser_content}\n"
"------------------\n"
"\n"
"OBJECTIVE: {objective}\n"
"CURRENT URL: {url}\n"
"PREVIOUS COMMAND: {previous_command}\n"
"YOUR COMMAND:\n"
msgstr ""
"您是一个控制浏览器的代理。您将获得：\n"
"\n"
"（1）您正在尝试实现的目标\n"
"（2）当前网页的URL\n"
"（3）浏览器窗口中可见内容的简化文本描述（下面会有更多信息）\n"
"\n"
"您可以发出以下命令：\n"
"向上滚动-向上滚动一页\n"
"向下滚动-向下滚动一页\n"
"点击X-单击给定元素。您只能单击链接、按钮和输入！\n"
"类型X“TEXT”-将指定的文本键入具有id X的输入\n"
"TYPESUBMIT X“TEXT”-与上面的TYPE相同，除了然后按ENTER提交表单\n"
"\n"
"浏览器内容的格式高度简化；所有格式元素都被剥离。\n"
"交互元素（如链接、输入、按钮）的表示如下：\n"
"\n"
"<link id=1>text</link>\n"
"<button id=2>text</button>\n"
"<input id=3>text</input>\n"
"\n"
"图像呈现为其alt文本，如下所示：\n"
"\n"
"<img id=4 alt=\"\"/>\n"
"\n"
"根据您的目标，发出您认为最接近实现目标的任何命令。\n"
"您始终从Google开始；您应该向Google提交搜索查询，以获取实现目标的最佳页面。然后与该页面交互以实现您的目标。\n"
"\n"
"如果您发现自己在Google上，但尚未显示搜索结果，则可能需要发出类似“TYPESUBMIT 7“search query””的命令，以获取更有用的页面。\n"
"\n"
"然后，如果您发现自己在Google搜索结果页面上，您可能会发出“CLICK 24”的命令，以单击搜索结果中的第一个链接。 （如果您的上一个命令是TYPESUBMIT，则下一个命令应该是CLICK。）\n"
"\n"
"不要尝试与您看不到的元素交互。\n"
"\n"
"以下是一些示例：\n"
"\n"
"示例1：\n"
"==================================================\n"
"当前浏览器Content: \n"
"------------------\n"
"<link id=1>About</link>\n"
"<link id=2>Store</link>\n"
"<link id=3>Gmail</link>\n"
"<link id=4>Images</link>\n"
"<link id=5>(Google apps)</link>\n"
"<link id=6>Sign in</link>\n"
"<img id=7 alt=\"(Google)\"/>\n"
"<input id=8 alt=\"Search\"></input>\n"
"<button id=9>(Search by voice)</button>\n"
"<button id=10>(Google Search)</button>\n"
"<button id=11>(I'm Feeling Lucky)</button>\n"
"<link id=12>Advertising</link>\n"
"<link id=13>Business</link>\n"
"<link id=14>How Search works</link>\n"
"<link id=15>Carbon neutral since 2007</link>\n"
"<link id=16>Privacy</link>\n"
"<link id=17>Terms</link>\n"
"<text id=18>Settings</text>\n"
"------------------\n"
"目标：在Anchorage AK找到一套售价低于750k美元的2居室房屋\n"
"当前URL：https://www.google.com/\n"
"您的命令：\n"
"TYPESUBMIT 8 \"anchorage redfin\"\n"
"==================================================\n"
"\n"
"示例2：\n"
"==================================================\n"
"当前浏览器Content: \n"
"------------------\n"
"<link id=1>About</link>\n"
"<link id=2>Store</link>\n"
"<link id=3>Gmail</link>\n"
"<link id=4>Images</link>\n"
"<link id=5>(Google apps)</link>\n"
"<link id=6>Sign in</link>\n"
"<img id=7 alt=\"(Google)\"/>\n"
"<input id=8 alt=\"Search\"></input>\n"
"<button id=9>(Search by voice)</button>\n"
"<button id=10>(Google Search)</button>\n"
"<button id=11>(I'm Feeling Lucky)</button>\n"
"<link id=12>Advertising</link>\n"
"<link id=13>Business</link>\n"
"<link id=14>How Search works</link>\n"
"<link id=15>Carbon neutral since 2007</link>\n"
"<link id=16>Privacy</link>\n"
"<link id=17>Terms</link>\n"
"<text id=18>Settings</text>\n"
"------------------\n"
"目标：在Dorsia预订8点的4人座位\n"
"当前URL：https://www.google.com/\n"
"您的命令：\n"
"TYPESUBMIT 8 \"dorsia nyc opentable\"\n"
"==================================================\n"
"\n"
"示例3：\n"
"==================================================\n"
"当前浏览器Content: \n"
"------------------\n"
"<button id=1>For Businesses</button>\n"
"<button id=2>Mobile</button>\n"
"<button id=3>Help</button>\n"
"<button id=4 alt=\"Language Picker\">EN</button>\n"
"<link id=5>OpenTable logo</link>\n"
"<button id=6 alt =\"search\">Search</button>\n"
"<text id=7>Find your table for any occasion</text>\n"
"<button id=8>(Date selector)</button>\n"
"<text id=9>Sep 28, 2022</text>\n"
"<text id=10>7:00 PM</text>\n"
"<text id=11>2 people</text>\n"
"<input id=12 alt=\"Location, Restaurant, or Cuisine\"></input>\n"
"<button id=13>Let’s go</button>\n"
"<text id=14>It looks like you're in Peninsula. Not correct?</text>\n"
"<button id=15>Get current location</button>\n"
"<button id=16>Next</button>\n"
"------------------\n"
"目标：在纽约市的Dorsia预订4人晚餐座位，时间为晚上8点\n"
"当前URL：https://www.opentable.com/\n"
"您的命令：\n"
"TYPESUBMIT 12 \"dorsia new york city\"\n"
"==================================================\n"
"\n"
"以下是当前浏览器内容、目标和当前URL。回复您的下一个命令到浏览器。 \n"
"\n"
"当前浏览器Content: \n"
"------------------\n"
"{browser_content}\n"
"------------------\n"
"\n"
"目标：{objective}\n"
"当前URL：{url}\n"
"上一个命令：{previous_command}\n"
"您的命令：\n"

#: chains/api/openapi/prompts.py:4
#, python-brace-format
msgid ""
"You are a helpful AI Assistant. Please provide JSON arguments to agentFunc() based on the user's instructions.\n"
"\n"
"API_SCHEMA: ```typescript\n"
"{schema}\n"
"```\n"
"\n"
"USER_INSTRUCTIONS: \"{instructions}\"\n"
"\n"
"Your arguments must be plain json provided in a markdown block:\n"
"\n"
"ARGS: ```json\n"
"{{valid json conforming to API_SCHEMA}}\n"
"```\n"
"\n"
"Example\n"
"-----\n"
"\n"
"ARGS: ```json\n"
"{{\"foo\": \"bar\", \"baz\": {{\"qux\": \"quux\"}}}}\n"
"```\n"
"\n"
"The block must be no more than 1 line long, and all arguments must be valid JSON. All string arguments must be wrapped in double quotes.\n"
"You MUST strictly comply to the types indicated by the provided schema, including all required args.\n"
"\n"
"If you don't have sufficient information to call the function due to things like requiring specific uuid's, you can reply with the following message:\n"
"\n"
"Message: ```text\n"
"Concise response requesting the additional information that would make calling the function successful.\n"
"```\n"
"\n"
"Begin\n"
"-----\n"
"ARGS:\n"
msgstr "抱歉，我无法提供有效的JSON参数，因为我没有收到任何指令。请提供指令并按照API_SCHEMA提供有效的JSON参数。\n"

#: chains/api/openapi/prompts.py:38
#, python-brace-format
msgid ""
"You are a helpful AI assistant trained to answer user queries from API responses.\n"
"You attempted to call an API, which resulted in:\n"
"API_RESPONSE: {response}\n"
"\n"
"USER_COMMENT: \"{instructions}\"\n"
"\n"
"\n"
"If the API_RESPONSE can answer the USER_COMMENT respond with the following markdown json block:\n"
"Response: ```json\n"
"{{\"response\": \"Human-understandable synthesis of the API_RESPONSE\"}}\n"
"```\n"
"\n"
"Otherwise respond with the following markdown json block:\n"
"Response Error: ```json\n"
"{{\"response\": \"What you did and a concise statement of the resulting error. If it can be easily fixed, provide a suggestion.\"}}\n"
"```\n"
"\n"
"You MUST respond as a markdown json code block. The person you are responding to CANNOT see the API_RESPONSE, so if there is any relevant information there you must include it in your response.\n"
"\n"
"Begin:\n"
"---\n"
msgstr ""
"你是一个有用的AI助手，训练有素，可以从API响应中回答用户的查询。你尝试调用一个API，结果如下：\n"
"API_RESPONSE: {response}\n"
"\n"
"USER_COMMENT: \"{instructions}\"\n"
"\n"
"如果API_RESPONSE可以回答USER_COMMENT，请使用以下markdown json块进行回复：\n"
"Response: ```json\n"
"{{\"response\": \"API_RESPONSE的人类可理解的综合\"}}\n"
"```\n"
"\n"
"否则，请使用以下markdown json块进行回复：\n"
"Response Error: ```json\n"
"{{\"response\": \"您的操作以及导致的错误简明陈述。如果可以轻松修复，请提供建议。\"}}\n"
"```\n"
"\n"
"你必须以markdown json代码块的形式回复。你回复的人看不到API_RESPONSE，所以如果有任何相关信息，你必须在回复中包含它。\n"
"\n"
"开始：\n"
"---\n"

#: chains/api/prompt.py:4
#, python-brace-format
msgid ""
"You are given the below API Documentation:\n"
"{api_docs}\n"
"Using this documentation, generate the full API url to call for answering the user question.\n"
"You should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.\n"
"\n"
"Question:{question}\n"
"API url:\n"
msgstr ""
"你被提供以下API文档：\n"
"{api_docs}\n"
"使用这个文档，生成完整的API URL以回答用户的问题。\n"
"你应该构建API URL，以便获得尽可能短的响应，同时仍然获得回答问题所需的必要信息。注意有意排除API调用中的任何不必要的数据。\n"
"\n"
"Question: {question}\n"
"API URL：\n"

#: chains/api/prompt.py:22
#, python-brace-format
msgid ""
" {api_url}\n"
"\n"
"Here is the response from the API:\n"
"\n"
"{api_response}\n"
"\n"
"Summarize this response to answer the original question.\n"
"\n"
"Summary:"
msgstr "缺少原始问题，无法进行总结。"

#: chains/llm_checker/prompt.py:10
#, python-brace-format
msgid ""
"Here is a statement:\n"
"{statement}\n"
"Make a bullet point list of the assumptions you made when producing the above statement.\n"
"\n"
msgstr ""
"以下是我在撰写上述声明时所做的假设的要点列表：\n"
"\n"
"- 我假设读者能够理解英语。\n"
"- 我假设读者具有一定的背景知识，可以理解声明中提到的概念。\n"
"- 我假设声明中提到的信息是准确的，并且没有遗漏任何重要的细节。\n"
"- 我假设声明中的信息是针对特定的受众群体，而不是所有人。\n"
"- 我假设读者对声明中提到的主题感兴趣，并且希望了解更多相关信息。\n"

#: chains/llm_checker/prompt.py:17
#, python-brace-format
msgid ""
"Here is a bullet point list of assertions:\n"
"{assertions}\n"
"For each assertion, determine whether it is true or false. If it is false, explain why.\n"
"\n"
msgstr ""
"以下是断言的项目列表：\n"
"{assertions}\n"
"对于每个断言，确定它是真还是假。如果它是假的，请解释为什么。\n"

#: chains/llm_checker/prompt.py:24
#, python-brace-format
msgid ""
"{checked_assertions}\n"
"\n"
"Question: In light of the above assertions and checks, how would you answer the question '{question}'?\n"
"\n"
"Answer:"
msgstr ""
"{checked_assertions}\n"
"Question: 基于以上的断言和检查，您如何回答“{question}”这个问题？\n"
"\n"
"Answer:"

#: chains/llm_bash/prompt.py:11
#, python-brace-format
msgid ""
"If someone asks you to perform a task, your job is to come up with a series of bash commands that will perform the task. There is no need to put \"#!/bin/bash\" in your answer. Make sure to reason step by step, using this format:\n"
"\n"
"Question: \"copy the files in the directory named 'target' into a new directory at the same level as target called 'myNewDirectory'\"\n"
"\n"
"I need to take the following actions:\n"
"- List all files in the directory\n"
"- Create a new directory\n"
"- Copy the files from the first directory into the second directory\n"
"```bash\n"
"ls\n"
"mkdir myNewDirectory\n"
"cp -r target/* myNewDirectory\n"
"```\n"
"\n"
"That is the format. Begin!\n"
"\n"
"Question: {question}"
msgstr ""
"请你编写一系列的bash命令，以完成以下任务：“将名为'target'的目录中的文件复制到与'target'同级别的新目录中，新目录名为'myNewDirectory'”。请按照以下格式逐步说明你的Thought: \n"
"\n"
"Question: “将名为'target'的目录中的文件复制到与'target'同级别的新目录中，新目录名为'myNewDirectory'”\n"
"\n"
"我需要执行以下Action: \n"
"- 列出目录中的所有文件\n"
"- 创建一个新目录\n"
"- 将第一个目录中的文件复制到第二个目录中\n"
"\n"
"```bash\n"
"ls\n"
"mkdir myNewDirectory\n"
"cp -r target/* myNewDirectory\n"
"```\n"
"\n"
"以上就是文件的格式. 开始!\n"
"\n"
"Question: {question}"

#: chains/llm_math/prompt.py:5
#, python-brace-format
msgid ""
"Translate a math problem into a expression that can be executed using Python's numexpr library. Use the output of running this code to answer the question.\n"
"\n"
"Question: ${{Question with math problem.}}\n"
"```text\n"
"${{single line mathematical expression that solves the problem}}\n"
"```\n"
"...numexpr.evaluate(text)...\n"
"```output\n"
"${{Output of running the code}}\n"
"```\n"
"Answer: ${{Answer}}\n"
"\n"
"Begin.\n"
"\n"
"Question: What is 37593 * 67?\n"
"```text\n"
"37593 * 67\n"
"```\n"
"...numexpr.evaluate(\"37593 * 67\")...\n"
"```output\n"
"2518731\n"
"```\n"
"Answer: 2518731\n"
"\n"
"Question: {question}\n"
msgstr ""
"把一个数学问题转化为可以使用Python的numexpr库执行的表达式。使用运行此代码的输出来回答问题。\n"
"\n"
"Question:${{Question with math problem.}} \n"
"\n"
"```text\n"
"${{single line mathematical expression that solves the problem}}\n"
"```\n"
"...numexpr.evaluate(text)...\n"
"```output\n"
"${{Output of running the code}}\n"
"```\n"
"Answer: ${{Answer}}\n"
"\n"
"开始。\n"
"\n"
"Question:37593乘以67等于多少？\n"
"\n"
"```text\n"
"37593 * 67\n"
"```\n"
"...numexpr.evaluate(\"37593 * 67\")...\n"
"```output\n"
"2518731\n"
"```\n"
"Answer: 2518731\n"
"\n"
"Question: {question}\n"

#: chains/conversational_retrieval/prompts.py:5
#, python-brace-format
msgid ""
"Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\n"
"\n"
"Chat History:\n"
"{chat_history}\n"
"Follow Up Input: {question}\n"
"Standalone question:"
msgstr ""
"对于以下对话和后续问题，请将后续问题重新表述为一个独立的问题，使用原始语言。\n"
"\n"
"Chat History:\n"
"{chat_history}\n"
"Follow Up Input: {question}\n"
"Standalone question:"

#: chains/flare/prompts.py:16
#, python-brace-format
msgid ""
"Respond to the user message using any relevant context. If context is provided, you should ground your answer in that context. Once you're done responding return FINISHED.\n"
"\n"
">>> CONTEXT: {context}\n"
">>> USER INPUT: {user_input}\n"
">>> RESPONSE: {response}"
msgstr "抱歉，我不明白你的意思。请提供更多上下文信息，以便我更好地回答你的问题。"

#: chains/flare/prompts.py:32
#, python-brace-format
msgid ""
"Given a user input and an existing partial response as context, ask a question to which the answer is the given term/entity/phrase:\n"
"\n"
">>> USER INPUT: {user_input}\n"
">>> EXISTING PARTIAL RESPONSE: {current_response}\n"
"\n"
"The question to which the answer is the term/entity/phrase \"{uncertain_span}\" is:"
msgstr ""
"用户输入为：{user_input}\n"
"现有的部分回答为：{current_response}\n"
"\n"
"问题的答案是术语/实体/短语 \"{uncertain_span}\"，请问问题是什么？"

#: chains/conversation/prompt.py:12
#, python-brace-format
msgid ""
"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n"
"\n"
"Current conversation:\n"
"{history}\n"
"Human: {input}\n"
"AI:"
msgstr ""
"以下是人类和人工智能之间友好的对话。人工智能健谈并提供了许多来自其上下文的具体细节。如果人工智能不知道答案，它会诚实地说出来。\n"
"\n"
"Current conversation:\n"
"{history}\n"
"Human: {input}\n"
"AI:"

#: chains/router/multi_prompt_prompt.py:4
#, python-brace-format
msgid ""
"Given a raw text input to a language model select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.\n"
"\n"
"<< FORMATTING >>\n"
"Return a markdown code snippet with a JSON object formatted to look like:\n"
"```json\n"
"{{{{\n"
"    \"destination\": string \\ name of the prompt to use or \"DEFAULT\"\n"
"    \"next_inputs\": string \\ a potentially modified version of the original input\n"
"}}}}\n"
"```\n"
"\n"
"REMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\n"
"REMEMBER: \"next_inputs\" can just be the original input if you don't think any modifications are needed.\n"
"\n"
"<< CANDIDATE PROMPTS >>\n"
"{destinations}\n"
"\n"
"<< INPUT >>\n"
"{{input}}\n"
"\n"
"<< OUTPUT >>\n"
msgstr ""
"给定一个原始文本输入到语言模型中，选择最适合该输入的模型提示。\n"
"您将得到可用提示的名称以及最适合该提示的描述。\n"
"如果您认为修改原始输入最终会导致更好的语言模型响应，则可以修改原始输入。\n"
"<< FORMATTING >>\n"
"返回一个Markdown代码片段，其中包含格式化为以下样式的JSON对象：\n"
"```json\n"
"{\n"
"    \"destination\": string \\使用的提示名称或“DEFAULT”\n"
"    \"next_inputs\": string \\原始输入的可能修改版本\n"
"}\n"
"```\n"
"请记住：“destination”必须是下面指定的候选提示名称之一，或者如果输入不适合任何候选提示，则可以是“DEFAULT”。\n"
"请记住：“next_inputs”如果您认为不需要进行任何修改，则可以只是原始输入。\n"
"<< CANDIDATE PROMPTS >>\n"
"{destinations}\n"
"\n"
"<< INPUT >>\n"
"{{input}}\n"
"\n"
"<< OUTPUT >>\n"

#: chains/router/multi_retrieval_prompt.py:4
#, python-brace-format
msgid ""
"Given a query to a question answering system select the system best suited for the input. You will be given the names of the available systems and a description of what questions the system is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response.\n"
"\n"
"<< FORMATTING >>\n"
"Return a markdown code snippet with a JSON object formatted to look like:\n"
"```json\n"
"{{{{\n"
"    \"destination\": string \\ name of the question answering system to use or \"DEFAULT\"\n"
"    \"next_inputs\": string \\ a potentially modified version of the original input\n"
"}}}}\n"
"```\n"
"\n"
"REMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\n"
"REMEMBER: \"next_inputs\" can just be the original input if you don't think any modifications are needed.\n"
"\n"
"<< CANDIDATE PROMPTS >>\n"
"{destinations}\n"
"\n"
"<< INPUT >>\n"
"{{input}}\n"
"\n"
"<< OUTPUT >>\n"
msgstr ""
"给定一个问题回答系统的查询，选择最适合输入的系统。您将获得可用系统的名称以及系统最适合的问题的描述。如果您认为修改原始输入最终会导致更好的响应，您也可以修改原始输入。\n"
"\n"
"<<格式>>\n"
"返回一个markdown代码片段，其中包含一个格式化为以下形式的JSON对象：\n"
"```json\n"
"{{{{\n"
"    \"destination\": string \\要使用的问题回答系统的名称或“DEFAULT”\n"
"    \"next_inputs\": string \\原始输入的可能修改版本\n"
"}}}}\n"
"```\n"
"\n"
"记住：“destination”必须是下面指定的候选提示名称之一，否则如果输入不适合任何候选提示，则可以是“DEFAULT”。\n"
"记住：“next_inputs”如果您认为不需要任何修改，可以只是原始输入。\n"
"\n"
"<< CANDIDATE PROMPTS >>\n"
"{destinations}\n"
"\n"
"<< INPUT >>\n"
"{{input}}\n"
"\n"
"<< OUTPUT >>\n"

#: indexes/prompts/knowledge_triplet_extraction.py:8
msgid ""
"You are a networked intelligence helping a human track knowledge triples about all relevant people, things, concepts, etc. and integrating them with your knowledge stored within your weights as well as that stored in a knowledge graph. Extract all of the knowledge triples from the text. A knowledge triple is a clause that contains a subject, a predicate, and an object. The subject is the entity being described, the predicate is the property of the subject that is being described, and the object is the value of the property.\n"
"\n"
"EXAMPLE\n"
"It's a state in the US. It's also the number 1 producer of gold in the US.\n"
"\n"
msgstr ""
"这段文字描述了一个网络智能帮助人类追踪有关所有相关人物、事物、概念等的知识三元组，并将它们与其存储在权重中的知识以及存储在知识图中的知识进行整合。从文本中提取所有的知识三元组。知识三元组是包含主语、谓语和宾语的子句。主语是被描述的实体，谓语是被描述的主语的属性，宾语是该属性的值。\n"
"\n"
"示例：\n"
"它是美国的一个州。它也是美国第一大黄金生产商。\n"
