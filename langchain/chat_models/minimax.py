"""Wrapper around Minimax chat models."""
import logging
from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional

import requests

from langchain.callbacks.manager import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
from langchain.chat_models.base import BaseChatModel
from langchain.llms.minimax import _MinimaxCommon
from langchain.llms.utils import enforce_stop_tokens
from langchain.schema import (
    AIMessage,
    BaseMessage,
    ChatGeneration,
    ChatResult,
    HumanMessage,
    SystemMessage,
)

logger = logging.getLogger(__name__)

def _parse_message(type, text):
    return {"sender_type": type, "text": text}

def _parse_chat_history(history: List[BaseMessage]):
    """Parse a sequence of messages into history."""
    chat_history = []
    for message in history:
        if isinstance(message, HumanMessage):
            chat_history.append(_parse_message("USER", message.content))
        if isinstance(message, AIMessage):
            chat_history.append(_parse_message("BOT", message.content))
    return chat_history


class MiniMaxChat(_MinimaxCommon, BaseChatModel):
    """Wrapper around Minimax large language models.

    To use, you should have the environment variable ``MINIMAX_GROUP_ID`` and
    ``MINIMAX_API_KEY`` set with your API token, or pass it as a named parameter to
    the constructor.

    Example:
        .. code-block:: python

            from langchain.chat_models import MiniMaxChat
            llm = MiniMaxChat(model_name="abab5-chat")

    """

    def _generate(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> ChatResult:
        """Generate next turn in the conversation.
        Args:
            messages: The history of the conversation as a list of messages. Code chat
                does not support context.
            stop: The list of stop words (optional).
            run_manager: The CallbackManager for LLM run, it's not used at the moment.

        Returns:
            The ChatResult that contains outputs generated by the model.

        Raises:
            ValueError: if the last message in the list is not from human.
        """
        if not messages:
            raise ValueError(
                "You should provide at least one message to start the chat!"
            )
        history = _parse_chat_history(messages)
        headers = {
            "Authorization": f"Bearer {self.minimax_api_key}",
            "Content-Type": "application/json",
        }
        url = f"https://api.minimax.chat/v1/text/chatcompletion?GroupId={self.minimax_group_id}"
        payload = {
            "model": "abab5-chat",
            "messages": history,
            "tokens_to_generate": self.tokens_to_generate,
            "skip_info_mask": self.skip_info_mask,
            "temperature": self.temperature,
            "top_p": self.top_p,
        }
        response = requests.post(url, headers=headers, json=payload)
        parsed_response = response.json()
        base_resp = parsed_response["base_resp"]
        if base_resp["status_code"] != 0:
            logger.error(base_resp["status_code"])
            raise Exception(
                "Post model outputs failed, status: " + base_resp["status_msg"]
            )
        text = parsed_response["reply"]

        if stop is not None:
            # This is required since the stop tokens are not enforced by the model parameters
            text = enforce_stop_tokens(text, stop)
        return ChatResult(generations=[ChatGeneration(message=AIMessage(content=text))])

    async def _agenerate(
        self,
        messages: List[BaseMessage],
        stop: Optional[List[str]] = None,
        run_manager: Optional[AsyncCallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> ChatResult:
        raise NotImplementedError(
            """Minimax AI doesn't support async requests at the moment."""
        )
