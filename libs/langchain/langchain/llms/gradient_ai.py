import json
from typing import Any, Coroutine, Dict, List, Mapping, Optional, Union

import aiohttp
import requests

from langchain.callbacks.manager import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
from langchain.llms.base import LLM
from langchain.llms.utils import enforce_stop_tokens
from langchain.pydantic_v1 import Extra, root_validator
from langchain.utils import get_from_dict_or_env


class GradientLLM(LLM):
    """Gradient.ai LLM Endpoints.

    GradientLLM is a class to interact with LLMs on gradient.ai

    To use, you should have the ``gradientai`` python package installed, and the
    environment variable ``GRADIENTAI_API_TOKEN`` set with your API token, or pass
    it as a named parameter to the constructor.

    Example:
        .. code-block:: python

            from langchain.llms.gradientai_endpoint import GradientAIEndpoint
            GradientLLM(
                model_id="cad6644_base_ml_model",
                model_kwargs={
                    "max_generated_token_count": 200,
                    "temperature": 0.75,
                    "top_p": 0.95,
                    "top_k": 20,
                    "stop": [],
                },
                gradient_workspace_id="12345614fc0_workspace",
                gradient_access_token="gradientai-access_token",
            )

    """

    model_id: str
    "Underlying gradient.ai model_id."

    gradient_workspace_id: Optional[str] = None
    "Underlying gradient.ai workspace_id."

    gradient_access_token: Optional[str] = None
    """gradient.ai API Token, which can be generated by going to https://auth.gradient.ai/select-workspace
        and selecting "Access tokens" under the profile drop-down.
    """

    model_kwargs: Optional[dict] = None
    """Key word arguments to pass to the model."""

    gradient_api_url: str = "https://api.gradient.ai/api"
    """Endpoint URL to use."""

    aiosession: Optional[aiohttp.ClientSession] = None
    """ClientSession, in case we want to reuse connection for better performance."""

    # LLM call kwargs
    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator(allow_reuse=True)
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""

        values["gradient_access_token"] = get_from_dict_or_env(
            values, "gradient_access_token", "GRADIENT_ACCESS_TOKEN"
        )
        values["gradient_workspace_id"] = get_from_dict_or_env(
            values, "gradient_workspace_id", "GRADIENT_WORKSPACE_ID"
        )

        if values["gradient_access_token"] is None:
            raise ValueError("env variable `GRADIENT_ACCESS_TOKEN` must be set")

        if values["gradient_workspace_id"] is None:
            raise ValueError("env variable `GRADIENT_WORKSPACE_ID` must be set")

        if values["model_kwargs"]:
            kw = values["model_kwargs"]
            if not 0 <= kw.get("temperature", 0.5) <= 1:
                raise ValueError("`temperature` must be in the range [0.0, 1.0]")

            if not 0 <= kw.get("top_p", 0.5) <= 1:
                raise ValueError("`top_p` must be in the range [0.0, 1.0]")

            if 0 >= kw.get("top_k", 0.5):
                raise ValueError("`top_k` must be positive")

            if 0 >= kw.get("max_generated_token_count", 1):
                raise ValueError("`max_generated_token_count` must be positive")

        values["gradient_api_url"] = get_from_dict_or_env(
            values, "gradient_api_url", "GRADIENT_API_URL"
        )

        return values

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"gradient_api_url": self.gradient_api_url},
            **{"model_kwargs": _model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "gradient"

    def _kwargs_post_request(
        self, prompt: str, kwargs: Dict[str, object]
    ) -> Dict[str, Union[str, dict]]:
        """Build the kwargs for the Post request, used by sync

        Args:
            prompt (str): prompt used in query
            kwargs (dict): model kwargs in payload

        Returns:
            Dict[str, Union[str,dict]]: _description_
        """
        _model_kwargs = self.model_kwargs or {}
        _params = {**_model_kwargs, **kwargs}

        return dict(
            url=f"{self.gradient_api_url}/models/{self.model_id}/complete",
            headers={
                "authorization": f"Bearer {self.gradient_access_token}",
                "x-gradient-workspace-id": f"{self.gradient_workspace_id}",
                # "accept": "application/json",
                # "content-type": "application/json",
            },
            json=dict(
                query=prompt,
                maxGeneratedTokenCount=_params.get("max_generated_token_count", None),
                temperature=_params.get("temperature", None),
                topK=_params.get("top_k", None),
                topP=_params.get("top_p", None),
            ),
        )

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call to Gradients API `model/{id}/complete`.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.
        """
        try:
            response = requests.post(**self._kwargs_post_request(prompt, kwargs))
            if response.status_code != 200:
                raise Exception(
                    f"Gradient returned an unexpected response with status "
                    f"{response.status_code}: {response.text}"
                )
        except requests.exceptions.RequestException as e:
            raise Exception(f"RequestException while calling Gradient Endpoint: {e}")

        text = response.json()["generatedOutput"]

        if stop is not None:
            # Apply stop tokens when making calls to Gradient
            text = enforce_stop_tokens(text, stop)

        return text

    async def _acall(
        self,
        prompt: str,
        stop: List[str] | None = None,
        run_manager: AsyncCallbackManagerForLLMRun | None = None,
        **kwargs: Any,
    ) -> Coroutine[Any, Any, str]:
        """Async Call to Gradients API `model/{id}/complete`.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.
        """
        if not self.aiosession:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    **self._kwargs_post_request(prompt=prompt, kwargs=kwargs)
                ) as response:
                    if response.status != 200:
                        raise Exception(
                            f"Gradient returned an unexpected response with status "
                            f"{response.status}: {response.text}"
                        )
                    text = (await response.json())["generatedOutput"]
        else:
            async with self.aiosession.post(
                **self._kwargs_post_request(prompt=prompt, kwargs=kwargs)
            ) as response:
                if response.status != 200:
                    raise Exception(
                        f"Gradient returned an unexpected response with status "
                        f"{response.status}: {response.text}"
                    )
                text = (await response.json())["generatedOutput"]

        if stop is not None:
            # Apply stop tokens when making calls to Gradient
            text = enforce_stop_tokens(text, stop)

        return text

    # def _call(
    #     self,
    #     prompt: str,
    #     stop: Optional[List[str]] = None,
    #     run_manager: Optional[CallbackManagerForLLMRun] = None,
    #     **kwargs: Any,
    # ) -> str:
    #     """Call out to Gradients inference endpoint.

    #     Args:
    #         prompt: The prompt to pass into the model.
    #         stop: Optional list of stop words to use when generating.

    #     Returns:
    #         The string generated by the model.

    #     """
    #     try:
    #         # based on https://github.com/Preemo-Inc/gradientai-python-sdk
    #         # TODO: Figure out why I need to set the environment variables before import,
    #         # TODO: maybe gradientai can be improved that way
    #         os.environ["GRADIENT_ACCESS_TOKEN"] = os.environ.get("GRADIENT_ACCESS_TOKEN", self.gradient_access_token)
    #         os.environ["GRADIENT_WORKSPACE_ID"] = os.environ.get("GRADIENT_WORKSPACE_ID", self.gradient_workspace_id)
    #         import gradientai
    #     except ImportError:
    #         raise ValueError(
    #             "Could not import gradientai python package. "
    #             "Please install it with `pip install gradientai`."
    #         )

    #     _model_kwargs = self.model_kwargs or {}
    #     _params = {**_model_kwargs, **kwargs}

    #     configuration = gradientai.Configuration(
    #         access_token = self.gradient_access_token,
    #         host=self.gradient_api_url
    #     )

    #     with gradientai.ApiClient(configuration) as api_client:
    #         # Create an instance of the API class
    #         api_instance = gradientai.ModelsApi(api_client)

    #         complete_model_body_params = gradientai.CompleteModelBodyParams(
    #             query=prompt,
    #             maxGeneratedTokenCount=_params.get("max_generated_token_count", None),
    #             temperature=_params.get("temperature", None),
    #             topK=_params.get("top_k", None),
    #             topP=_params.get("top_p", None),
    #         ) # CompleteModelBodyParams |

    #         try:
    #             # Complete model
    #             # TODO: while request code works, this gradientai blocks forever
    #             api_response = api_instance.complete_model(
    #                 id=self.model_id,
    #                 x_gradient_workspace_id=self.gradient_workspace_id,
    #                 complete_model_body_params=complete_model_body_params)
    #             print("The response of ModelsApi->complete_model:\n")
    #             print(api_response)
    #         except gradientai.ApiException as e:
    #             print("Exception when calling ModelsApi->complete_model: %s\n" % e)

    #     text = api_response["generated_output"]

    #     if stop is not None:
    #         # Apply stop tokens when making calls to Gradient
    #         text = enforce_stop_tokens(text, stop)

    #     return text
