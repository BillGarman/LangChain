from typing import Any, Dict, List, Mapping, Optional

from langchain_core.callbacks import CallbackManagerForLLMRun
from langchain_core.language_models.llms import LLM
from langchain_core.pydantic_v1 import Extra, root_validator
from langchain_core.utils import get_from_dict_or_env

from langchain_community.llms.utils import enforce_stop_tokens
from langchain_community.utils.huggingface_hub import is_inference_client_supported

DEFAULT_REPO_ID = "gpt2"
VALID_TASKS = ("text2text-generation", "text-generation", "summarization")


class HuggingFaceHub(LLM):
    """HuggingFaceHub  models.

    To use, you should have the ``huggingface_hub`` python package installed, and the
    environment variable ``HUGGINGFACEHUB_API_TOKEN`` set with your API token, or pass
    it as a named parameter to the constructor.

    Example:
        .. code-block:: python

            from langchain_community.llms import HuggingFaceHub
            hf = HuggingFaceHub(repo_id="gpt2", huggingfacehub_api_token="my-api-key")
    """

    client: Any  #: :meta private:
    repo_id: Optional[str] = DEFAULT_REPO_ID
    """(Deprecated) Model name to use
    when huggingface_hub package is version 0.17 or below."""
    model: Optional[str] = None
    """Model name to use."""
    task: Optional[str] = None
    """Task to perform on the inference. Used only to default to a recommended model
    if `model` is not provided. At least `model` or `task` must be provided.

    When huggingface_hub package version is 0.17 or below,
    it's a task to call the model with.
    only `text-generation`, `text2text-generation` and `summarization` are supported.
    The task should return `generated_text` or `summary_text`."""
    model_kwargs: Optional[dict] = None
    """Keyword arguments to pass to the model."""

    huggingfacehub_api_token: Optional[str] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        huggingfacehub_api_token = get_from_dict_or_env(
            values, "huggingfacehub_api_token", "HUGGINGFACEHUB_API_TOKEN"
        )
        try:
            repo_id = values["repo_id"]
            repo_id_specified = DEFAULT_REPO_ID != repo_id

            if repo_id_specified or not is_inference_client_supported():
                from huggingface_hub import InferenceApi

                client = InferenceApi(
                    repo_id=repo_id,
                    token=huggingfacehub_api_token,
                    task=values.get("task"),
                )

                if client.task not in VALID_TASKS:
                    raise ValueError(
                        f"Got invalid task {client.task}, "
                        f"currently only {VALID_TASKS} are supported"
                    )
            else:
                from huggingface_hub import InferenceClient

                client = InferenceClient(
                    model=values.get("model"), token=huggingfacehub_api_token
                )

            values["client"] = client
        except ImportError:
            raise ValueError(
                "Could not import huggingface_hub python package. "
                "Please install it with `pip install huggingface_hub`."
            )
        return values

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        _model_kwargs = self.model_kwargs or {}
        return {
            **{"repo_id": self.repo_id, "model": self.model, "task": self.task},
            **{"model_kwargs": _model_kwargs},
        }

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "huggingface_hub"

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        if type(self.client).__name__ == "InferenceClient":
            return self._call_with_inference_client(
                prompt=prompt, stop=stop, run_manager=run_manager, **kwargs
            )
        elif type(self.client).__name__ == "InferenceApi":
            return self._call_with_inference_api(
                prompt=prompt, stop=stop, run_manager=run_manager, **kwargs
            )

    def _call_with_inference_api(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to HuggingFace Hub's inference endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = hf("Tell me a joke.")
        """
        _model_kwargs = self.model_kwargs or {}
        params = {**_model_kwargs, **kwargs}
        response = self.client(inputs=prompt, params=params)
        if "error" in response:
            raise ValueError(f"Error raised by inference API: {response['error']}")
        if self.client.task == "text-generation":
            # Text generation return includes the starter text.
            text = response[0]["generated_text"][len(prompt) :]
        elif self.client.task == "text2text-generation":
            text = response[0]["generated_text"]
        elif self.client.task == "summarization":
            text = response[0]["summary_text"]
        else:
            raise ValueError(
                f"Got invalid task {self.client.task}, "
                f"currently only {VALID_TASKS} are supported"
            )
        if stop is not None:
            # This is a bit hacky, but I can't figure out a better way to enforce
            # stop tokens when making calls to huggingface_hub.
            text = enforce_stop_tokens(text, stop)
        return text

    def _call_with_inference_client(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        _model_kwargs = self.model_kwargs or {}
        json = {**_model_kwargs, **kwargs}

        if prompt:
            json["inputs"] = prompt

        response = self.client.post(json=json, task=self.task)

        return response.decode("utf-8")
