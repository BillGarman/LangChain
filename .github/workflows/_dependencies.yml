# The dependencies action runs unit tests with different versions of the package
# dependencies.
# This is our current solution for setting up a test matrix primarily for
# testing compatibility with different versions of pydantic.
# This code has some duplication with the _test action due to the need to
# do extra logic if pydantic version 2 is installed; i.e., maybe run
# with LC_PYDANTIC_V2_EXPERIMENTAL=True
# The extra logic may not be worth refactoring as it'll be deleted once
# migration to pydantic v2 proper is complete.
name: dependencies

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"
      langchain-location:
        required: false
        type: string
        description: "Relative path to the langchain library folder"

env:
  POETRY_VERSION: "1.7.1"

jobs:
  build:
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    name: dependency checks ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: ${{ inputs.working-directory }}
          cache-key: pydantic-cross-compat

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Check imports with base dependencies
        shell: bash
        run: poetry run make check_imports

      - name: Install test dependencies
        shell: bash
        run: poetry install --with test

      - name: Install langchain editable
        working-directory: ${{ inputs.working-directory }}
        if: ${{ inputs.langchain-location }}
        env:
          LANGCHAIN_LOCATION: ${{ inputs.langchain-location }}
        run: |
          poetry run pip install -e "$LANGCHAIN_LOCATION"

      - name: Install the opposite major version of pydantic
        # If normal tests use pydantic v1, here we'll use v2, and vice versa.
        shell: bash
        # airbyte currently doesn't support pydantic v2
        if: ${{ !startsWith(inputs.working-directory, 'libs/partners/airbyte') }}
        run: |
          # Determine the major part of pydantic version
          REGULAR_VERSION=$(poetry run python -c "import pydantic; print(pydantic.__version__)" | cut -d. -f1)

          if [[ "$REGULAR_VERSION" == "1" ]]; then
            PYDANTIC_DEP=">=2.1,<3"
            TEST_WITH_VERSION="2"
          elif [[ "$REGULAR_VERSION" == "2" ]]; then
            PYDANTIC_DEP="<2"
            TEST_WITH_VERSION="1"
          else
            echo "Unexpected pydantic major version '$REGULAR_VERSION', cannot determine which version to use for cross-compatibility test."
            exit 1
          fi

          # Install via `pip` instead of `poetry add` to avoid changing lockfile,
          # which would prevent caching from working: the cache would get saved
          # to a different key than where it gets loaded from.
          poetry run pip install "pydantic${PYDANTIC_DEP}"

          # Ensure that the correct pydantic is installed now.
          echo "Checking pydantic version... Expecting ${TEST_WITH_VERSION}"

          # Determine the major part of pydantic version
          CURRENT_VERSION=$(poetry run python -c "import pydantic; print(pydantic.__version__)" | cut -d. -f1)

          # Check that the major part of pydantic version is as expected, if not
          # raise an error
          if [[ "$CURRENT_VERSION" != "$TEST_WITH_VERSION" ]]; then
            echo "Error: expected pydantic version ${CURRENT_VERSION} to have been installed, but found: ${TEST_WITH_VERSION}"
            exit 1
          fi
          echo "Found pydantic version ${CURRENT_VERSION}, as expected"
      - name: Run pydantic compatibility tests
        # airbyte currently doesn't support pydantic v2
        if: ${{ !startsWith(inputs.working-directory, 'libs/partners/airbyte') }}
        shell: bash
        run: make test
      - name: Maybe run unit tests with LC_PYDANTIC_V2_EXPERIMENTAL=True
        # This step will run unit tests if pydantic>=2.0.0 is installed
        # It will run unit tests with the environment variable LC_PYDANTIC_V2_EXPERIMENTAL=True
        # libraries that support the flag, will attempt to run unit tests
        # using pydantic proper rather than via the pydantic.v1 namespace.
        # TODO: Refactor how code is tested with LC_PYDANTIC_V2_EXPERIMENTAL=True
        # We should probably have a JSON file that lists which code paths
        # that support the flag
        if: ${{ !startsWith(inputs.working-directory, 'libs/core/') }}
        shell: bash
        run: |
          # Determine the major part of pydantic version
          REGULAR_VERSION=$(poetry run python -c "import pydantic; print(pydantic.__version__)" | cut -d. -f1)
          # If version 2 then we run tests with LC_PYDANTIC_V2_EXPERIMENTAL=True
          # Otherwise echo that there's nothing to do since the version is 1
          if [[ "$REGULAR_VERSION" == "2" ]]; then
            LC_PYDANTIC_V2_EXPERIMENTAL=True make test 
            echo "Finished running unit tests with LC_PYDANTIC_V2_EXPERIMENTAL=True"
          else
            echo "No running tests with LC_PYDANTIC_V2_EXPERIMENTAL=True since pydantic version is 1"
          fi
      - name: Ensure the tests did not create any additional files
        shell: bash
        run: |
          set -eu

          STATUS="$(git status)"
          echo "$STATUS"

          # grep will exit non-zero if the target message isn't found,
          # and `set -e` above will cause the step to fail.
          echo "$STATUS" | grep 'nothing to commit, working tree clean'
