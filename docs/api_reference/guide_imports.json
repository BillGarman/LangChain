{"DeepInfraEmbeddings": {"DeepInfra": "https://python.langchain.com/docs/integrations/text_embedding/deepinfra"}, "HuggingFaceEmbeddings": {"Hugging Face Hub": "https://python.langchain.com/docs/integrations/text_embedding/huggingfacehub", "Sentence Transformers Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers", "Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "GPT4AllEmbeddings": {"GPT4All": "https://python.langchain.com/docs/integrations/text_embedding/gpt4all"}, "MosaicMLInstructorEmbeddings": {"MosaicML embeddings": "https://python.langchain.com/docs/integrations/text_embedding/mosaicml"}, "OpenAIEmbeddings": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever", "Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai", "AutoGPT": "https://python.langchain.com/docs/use_cases/autonomous_agents/autogpt"}, "VertexAIEmbeddings": {"Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/text_embedding/google_vertex_ai_palm"}, "LlamaCppEmbeddings": {"Llama-cpp": "https://python.langchain.com/docs/integrations/text_embedding/llamacpp", "Llama.cpp": "https://python.langchain.com/docs/integrations/providers/llamacpp"}, "NLPCloudEmbeddings": {"NLP Cloud": "https://python.langchain.com/docs/integrations/text_embedding/nlp_cloud"}, "SpacyEmbeddings": {"Spacy Embedding": "https://python.langchain.com/docs/integrations/text_embedding/spacy_embedding"}, "HuggingFaceInstructEmbeddings": {"InstructEmbeddings": "https://python.langchain.com/docs/integrations/text_embedding/instruct_embeddings"}, "CohereEmbeddings": {"Cohere": "https://python.langchain.com/docs/integrations/providers/cohere"}, "SentenceTransformerEmbeddings": {"Sentence Transformers Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/sentence_transformers"}, "AwaEmbeddings": {"AwaEmbedding": "https://python.langchain.com/docs/integrations/text_embedding/Awa"}, "MiniMaxEmbeddings": {"MiniMax": "https://python.langchain.com/docs/integrations/text_embedding/minimax", "Minimax": "https://python.langchain.com/docs/integrations/providers/minimax"}, "FakeEmbeddings": {"Fake Embeddings": "https://python.langchain.com/docs/integrations/text_embedding/fake"}, "ElasticsearchEmbeddings": {"Elasticsearch": "https://python.langchain.com/docs/integrations/text_embedding/elasticsearch"}, "EmbaasEmbeddings": {"Embaas": "https://python.langchain.com/docs/integrations/text_embedding/embaas"}, "JinaEmbeddings": {"Jina": "https://python.langchain.com/docs/integrations/providers/jina"}, "AlephAlphaAsymmetricSemanticEmbedding": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"}, "AlephAlphaSymmetricSemanticEmbedding": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"}, "DashScopeEmbeddings": {"DashScope": "https://python.langchain.com/docs/integrations/text_embedding/dashscope"}, "TensorflowHubEmbeddings": {"TensorflowHub": "https://python.langchain.com/docs/integrations/text_embedding/tensorflowhub"}, "ModelScopeEmbeddings": {"ModelScope": "https://python.langchain.com/docs/integrations/providers/modelscope"}, "LocalAIEmbeddings": {"LocalAI": "https://python.langchain.com/docs/integrations/text_embedding/localai"}, "ElasticSearchBM25Retriever": {"ElasticSearch BM25": "https://python.langchain.com/docs/integrations/retrievers/elastic_search_bm25", "Elasticsearch": "https://python.langchain.com/docs/integrations/providers/elasticsearch"}, "AmazonKendraRetriever": {"Amazon Kendra": "https://python.langchain.com/docs/integrations/retrievers/amazon_kendra_retriever"}, "RetrievalQA": {"Cohere Reranker": "https://python.langchain.com/docs/integrations/retrievers/cohere-reranker", "Document Comparison": "https://python.langchain.com/docs/integrations/toolkits/document_comparison_toolkit", "Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami", "Data Augmented Question Answering": "https://python.langchain.com/docs/guides/evaluation/examples/data_augmented_question_answering"}, "WikipediaRetriever": {"Wikipedia": "https://python.langchain.com/docs/integrations/providers/wikipedia"}, "MetalRetriever": {"Metal": "https://python.langchain.com/docs/integrations/retrievers/metal"}, "ChatGPTPluginRetriever": {"ChatGPT Plugin": "https://python.langchain.com/docs/integrations/retrievers/chatgpt-plugin", "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"}, "DocArrayRetriever": {"DocArray Retriever": "https://python.langchain.com/docs/integrations/retrievers/docarray_retriever"}, "PineconeHybridSearchRetriever": {"Pinecone Hybrid Search": "https://python.langchain.com/docs/integrations/retrievers/pinecone_hybrid_search"}, "PubMedRetriever": {"PubMed": "https://python.langchain.com/docs/integrations/retrievers/pubmed"}, "ArxivRetriever": {"Arxiv": "https://python.langchain.com/docs/integrations/providers/arxiv"}, "BM25Retriever": {"BM25": "https://python.langchain.com/docs/integrations/retrievers/bm25", "Ensemble Retriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/ensemble"}, "AzureCognitiveSearchRetriever": {"Azure Cognitive Search": "https://python.langchain.com/docs/integrations/providers/azure_cognitive_search_"}, "ChaindeskRetriever": {"Chaindesk": "https://python.langchain.com/docs/integrations/providers/chaindesk"}, "TFIDFRetriever": {"TF-IDF": "https://python.langchain.com/docs/integrations/retrievers/tf_idf"}, "SearxSearchWrapper": {"SearxNG Search API": "https://python.langchain.com/docs/integrations/tools/searx_search"}, "GoogleSerperAPIWrapper": {"Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper"}, "initialize_agent": {"Google Serper API": "https://python.langchain.com/docs/integrations/tools/google_serper", "Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search", "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql", "Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "WandB Tracing": "https://python.langchain.com/docs/integrations/providers/agent_with_wandb_tracing", "Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking", "Aim": "https://python.langchain.com/docs/integrations/providers/aim_tracking", "Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking", "MLflow": "https://python.langchain.com/docs/integrations/providers/mlflow_tracking", "Google Serper": "https://python.langchain.com/docs/integrations/providers/google_serper", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking", "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "Azure Cognitive Services Toolkit": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services", "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail", "PlayWright Browser Toolkit": "https://python.langchain.com/docs/integrations/toolkits/playwright", "Office365 Toolkit": "https://python.langchain.com/docs/integrations/toolkits/office365", "Amadeus Toolkit": "https://python.langchain.com/docs/integrations/toolkits/amadeus", "Debugging": "https://python.langchain.com/docs/guides/debugging", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "Agent VectorDB Question Answering Benchmarking": "https://python.langchain.com/docs/guides/evaluation/examples/agent_vectordb_sota_pg", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Self ask with search": "https://python.langchain.com/docs/modules/agents/agent_types/self_ask_with_search", "ReAct document store": "https://python.langchain.com/docs/modules/agents/agent_types/react_docstore", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore", "Handle parsing errors": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions", "Async API": "https://python.langchain.com/docs/modules/agents/how_to/async_agent", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions"}, "GooglePlacesTool": {"Google Places": "https://python.langchain.com/docs/integrations/tools/google_places"}, "load_tools": {"Human as a tool": "https://python.langchain.com/docs/integrations/tools/human_tools", "AWS Lambda API": "https://python.langchain.com/docs/integrations/tools/awslambda", "GraphQL tool": "https://python.langchain.com/docs/integrations/tools/graphql", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "TwilioAPIWrapper": {"Twilio": "https://python.langchain.com/docs/integrations/tools/twilio"}, "IFTTTWebhook": {"IFTTT WebHooks": "https://python.langchain.com/docs/integrations/tools/ifttt"}, "PubmedQueryRun": {"PubMed Tool": "https://python.langchain.com/docs/integrations/tools/pubmed"}, "YouTubeSearchTool": {"YouTubeSearchTool": "https://python.langchain.com/docs/integrations/tools/youtube"}, "ZapierNLAWrapper": {"Zapier Natural Language Actions API": "https://python.langchain.com/docs/integrations/tools/zapier"}, "GoldenQueryAPIWrapper": {"Golden Query": "https://python.langchain.com/docs/integrations/tools/golden_query", "Golden": "https://python.langchain.com/docs/integrations/providers/golden"}, "ArxivAPIWrapper": {"ArXiv API Tool": "https://python.langchain.com/docs/integrations/tools/arxiv"}, "MetaphorSearchAPIWrapper": {"Metaphor Search": "https://python.langchain.com/docs/integrations/tools/metaphor_search"}, "SerpAPIWrapper": {"SerpAPI": "https://python.langchain.com/docs/integrations/providers/serpapi"}, "Tool": {"SerpAPI": "https://python.langchain.com/docs/integrations/tools/serpapi", "BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent", "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent"}, "DuckDuckGoSearchRun": {"DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"}, "DuckDuckGoSearchResults": {"DuckDuckGo Search": "https://python.langchain.com/docs/integrations/tools/ddg"}, "WolframAlphaAPIWrapper": {"Wolfram Alpha": "https://python.langchain.com/docs/integrations/providers/wolfram_alpha"}, "BingSearchAPIWrapper": {"Bing Search": "https://python.langchain.com/docs/integrations/tools/bing_search"}, "BraveSearch": {"Brave Search": "https://python.langchain.com/docs/integrations/providers/brave_search"}, "HumanMessage": {"Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/popular/openai_functions", "Retrieval QA using OpenAI functions": "https://python.langchain.com/docs/modules/chains/additional/openai_functions_retrieval_qa"}, "AgentType": {"Zep Memory": "https://python.langchain.com/docs/integrations/memory/zep_memory", "Argilla": "https://python.langchain.com/docs/integrations/callbacks/argilla", "Flyte": "https://python.langchain.com/docs/integrations/providers/flyte", "Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index", "CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv", "Azure Cognitive Services Toolkit": "https://python.langchain.com/docs/integrations/toolkits/azure_cognitive_services", "Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail", "Office365 Toolkit": "https://python.langchain.com/docs/integrations/toolkits/office365", "Pandas Dataframe Agent": "https://python.langchain.com/docs/integrations/toolkits/pandas", "Amadeus Toolkit": "https://python.langchain.com/docs/integrations/toolkits/amadeus", "Debugging": "https://python.langchain.com/docs/guides/debugging", "Agent Trajectory": "https://python.langchain.com/docs/guides/evaluation/trajectory/trajectory_eval", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Multi-Input Tools": "https://python.langchain.com/docs/modules/agents/tools/multi_input_tool", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools", "Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation", "Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model", "Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm", "Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "ENTITY_MEMORY_CONVERSATION_TEMPLATE": {"Entity Memory with SQLite storage": "https://python.langchain.com/docs/integrations/memory/entity_memory_with_sqlite"}, "AIMessage": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat"}, "SystemMessage": {"Anthropic": "https://python.langchain.com/docs/integrations/chat/anthropic", "OpenAI": "https://python.langchain.com/docs/integrations/chat/openai", "Google Cloud Platform Vertex AI PaLM ": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm", "JinaChat": "https://python.langchain.com/docs/integrations/chat/jinachat", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Use ToolKits with OpenAI Functions": "https://python.langchain.com/docs/modules/agents/how_to/use_toolkits_with_openai_functions", "Using OpenAI functions": "https://python.langchain.com/docs/modules/chains/popular/openai_functions", "Retrieval QA using OpenAI functions": "https://python.langchain.com/docs/modules/chains/additional/openai_functions_retrieval_qa"}, "ArgillaCallbackHandler": {"Argilla": "https://python.langchain.com/docs/integrations/providers/argilla"}, "FigmaFileLoader": {"Figma": "https://python.langchain.com/docs/integrations/providers/figma"}, "AzureOpenAI": {"Azure OpenAI": "https://python.langchain.com/docs/integrations/llms/azure_openai_example", "OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"}, "AzureChatOpenAI": {"Azure OpenAI": "https://python.langchain.com/docs/integrations/providers/azure_openai"}, "MyScale": {"MyScale": "https://python.langchain.com/docs/integrations/vectorstores/myscale"}, "WeatherDataLoader": {"Weather": "https://python.langchain.com/docs/integrations/document_loaders/weather"}, "Tair": {"Tair": "https://python.langchain.com/docs/integrations/vectorstores/tair"}, "UnstructuredWordDocumentLoader": {"Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"}, "CollegeConfidentialLoader": {"College Confidential": "https://python.langchain.com/docs/integrations/document_loaders/college_confidential"}, "RWKV": {"RWKV-4": "https://python.langchain.com/docs/integrations/providers/rwkv"}, "GoogleDriveLoader": {"Google Drive": "https://python.langchain.com/docs/integrations/document_loaders/google_drive"}, "UnstructuredPowerPointLoader": {"Microsoft PowerPoint": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_powerpoint"}, "CometCallbackHandler": {"Comet": "https://python.langchain.com/docs/integrations/providers/comet_tracking"}, "CTransformers": {"C Transformers": "https://python.langchain.com/docs/integrations/providers/ctransformers"}, "BiliBiliLoader": {"BiliBili": "https://python.langchain.com/docs/integrations/document_loaders/bilibili"}, "DiffbotLoader": {"Diffbot": "https://python.langchain.com/docs/integrations/providers/diffbot"}, "ModernTreasuryLoader": {"Modern Treasury": "https://python.langchain.com/docs/integrations/providers/modern_treasury"}, "FacebookChatLoader": {"Facebook Chat": "https://python.langchain.com/docs/integrations/document_loaders/facebook_chat"}, "Banana": {"Banana": "https://python.langchain.com/docs/integrations/providers/bananadev"}, "HuggingFacePipeline": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "HuggingFaceHub": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "HuggingFaceHubEmbeddings": {"Hugging Face": "https://python.langchain.com/docs/integrations/providers/huggingface"}, "DocugamiLoader": {"Docugami": "https://python.langchain.com/docs/integrations/document_loaders/docugami"}, "GutenbergLoader": {"Gutenberg": "https://python.langchain.com/docs/integrations/document_loaders/gutenberg"}, "AzureBlobStorageContainerLoader": {"Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage", "Azure Blob Storage Container": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_container"}, "AzureBlobStorageFileLoader": {"Azure Blob Storage": "https://python.langchain.com/docs/integrations/providers/azure_blob_storage", "Azure Blob Storage File": "https://python.langchain.com/docs/integrations/document_loaders/azure_blob_storage_file"}, "WikipediaLoader": {"Wikipedia": "https://python.langchain.com/docs/integrations/document_loaders/wikipedia"}, "ConfluenceLoader": {"Confluence": "https://python.langchain.com/docs/integrations/providers/confluence"}, "Beam": {"Beam": "https://python.langchain.com/docs/integrations/providers/beam"}, "Typesense": {"Typesense": "https://python.langchain.com/docs/integrations/providers/typesense"}, "Hologres": {"Hologres": "https://python.langchain.com/docs/integrations/vectorstores/hologres"}, "AI21": {"AI21 Labs": "https://python.langchain.com/docs/integrations/providers/ai21"}, "WandbCallbackHandler": {"Weights & Biases": "https://python.langchain.com/docs/integrations/providers/wandb_tracking"}, "ObsidianLoader": {"Obsidian": "https://python.langchain.com/docs/integrations/document_loaders/obsidian"}, "OpenAI": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching", "Question Answering": "https://python.langchain.com/docs/guides/evaluation/examples/question_answering", "Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder", "Multiple callback handlers": "https://python.langchain.com/docs/modules/callbacks/multiple_callbacks", "Streaming final agent output": "https://python.langchain.com/docs/modules/agents/how_to/streaming_stdout_final_only"}, "OpenAIModerationChain": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai"}, "ChatGPTLoader": {"OpenAI": "https://python.langchain.com/docs/integrations/providers/openai", "ChatGPT Data": "https://python.langchain.com/docs/integrations/document_loaders/chatgpt_loader"}, "ZepRetriever": {"Zep": "https://python.langchain.com/docs/integrations/providers/zep"}, "AZLyricsLoader": {"AZLyrics": "https://python.langchain.com/docs/integrations/document_loaders/azlyrics"}, "ToMarkdownLoader": {"2Markdown": "https://python.langchain.com/docs/integrations/document_loaders/tomarkdown"}, "GitLoader": {"Git": "https://python.langchain.com/docs/integrations/document_loaders/git"}, "InfinoCallbackHandler": {"Infino": "https://python.langchain.com/docs/integrations/providers/infino"}, "SingleStoreDB": {"SingleStoreDB": "https://python.langchain.com/docs/integrations/providers/singlestoredb"}, "Tigris": {"Tigris": "https://python.langchain.com/docs/integrations/providers/tigris"}, "BedrockEmbeddings": {"Bedrock": "https://python.langchain.com/docs/integrations/providers/bedrock"}, "S3DirectoryLoader": {"AWS S3 Directory": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_directory"}, "S3FileLoader": {"AWS S3 Directory": "https://python.langchain.com/docs/integrations/providers/aws_s3", "AWS S3 File": "https://python.langchain.com/docs/integrations/document_loaders/aws_s3_file"}, "TransformChain": {"Rebuff": "https://python.langchain.com/docs/integrations/providers/rebuff", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"}, "GPT4All": {"GPT4All": "https://python.langchain.com/docs/integrations/providers/gpt4all"}, "Weaviate": {"Weaviate": "https://python.langchain.com/docs/integrations/providers/weaviate"}, "AirbyteJSONLoader": {"Airbyte": "https://python.langchain.com/docs/integrations/providers/airbyte", "Airbyte JSON": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_json"}, "PredictionGuard": {"Prediction Guard": "https://python.langchain.com/docs/integrations/providers/predictionguard"}, "NotionDirectoryLoader": {"Notion DB": "https://python.langchain.com/docs/integrations/providers/notion", "Notion DB 1/2": "https://python.langchain.com/docs/integrations/document_loaders/notion"}, "NotionDBLoader": {"Notion DB": "https://python.langchain.com/docs/integrations/providers/notion", "Notion DB 2/2": "https://python.langchain.com/docs/integrations/document_loaders/notiondb"}, "MWDumpLoader": {"MediaWikiDump": "https://python.langchain.com/docs/integrations/document_loaders/mediawikidump"}, "BraveSearchLoader": {"Brave Search": "https://python.langchain.com/docs/integrations/document_loaders/brave_search"}, "StarRocks": {"StarRocks": "https://python.langchain.com/docs/integrations/providers/starrocks"}, "DatadogLogsLoader": {"Datadog Logs": "https://python.langchain.com/docs/integrations/document_loaders/datadog_logs"}, "ApifyDatasetLoader": {"Apify": "https://python.langchain.com/docs/integrations/providers/apify"}, "NLPCloud": {"NLPCloud": "https://python.langchain.com/docs/integrations/providers/nlpcloud"}, "Milvus": {"Milvus": "https://python.langchain.com/docs/integrations/providers/milvus", "Zilliz": "https://python.langchain.com/docs/integrations/providers/zilliz"}, "Qdrant": {"Qdrant": "https://python.langchain.com/docs/integrations/providers/qdrant"}, "GitbookLoader": {"GitBook": "https://python.langchain.com/docs/integrations/document_loaders/gitbook"}, "OpenSearchVectorSearch": {"OpenSearch": "https://python.langchain.com/docs/integrations/providers/opensearch"}, "Pinecone": {"Pinecone": "https://python.langchain.com/docs/integrations/providers/pinecone"}, "Minimax": {"Minimax": "https://python.langchain.com/docs/integrations/llms/minimax"}, "SelfHostedPipeline": {"Runhouse": "https://python.langchain.com/docs/integrations/llms/runhouse"}, "SelfHostedHuggingFaceLLM": {"Runhouse": "https://python.langchain.com/docs/integrations/providers/runhouse"}, "SpreedlyLoader": {"Spreedly": "https://python.langchain.com/docs/integrations/providers/spreedly"}, "OpenLLM": {"OpenLLM": "https://python.langchain.com/docs/integrations/providers/openllm"}, "IFixitLoader": {"iFixit": "https://python.langchain.com/docs/integrations/document_loaders/ifixit"}, "AlephAlpha": {"Aleph Alpha": "https://python.langchain.com/docs/integrations/providers/aleph_alpha"}, "PipelineAI": {"PipelineAI": "https://python.langchain.com/docs/integrations/providers/pipelineai"}, "LlamaCpp": {"Llama.cpp": "https://python.langchain.com/docs/integrations/providers/llamacpp"}, "AwaDB": {"AwaDB": "https://python.langchain.com/docs/integrations/providers/awadb"}, "ArxivLoader": {"Arxiv": "https://python.langchain.com/docs/integrations/document_loaders/arxiv"}, "Anyscale": {"Anyscale": "https://python.langchain.com/docs/integrations/providers/anyscale"}, "StripeLoader": {"Stripe": "https://python.langchain.com/docs/integrations/providers/stripe"}, "OpenWeatherMapAPIWrapper": {"OpenWeatherMap": "https://python.langchain.com/docs/integrations/providers/openweathermap"}, "BlackboardLoader": {"Blackboard": "https://python.langchain.com/docs/integrations/providers/blackboard"}, "WhatsAppChatLoader": {"WhatsApp": "https://python.langchain.com/docs/integrations/providers/whatsapp", "WhatsApp Chat": "https://python.langchain.com/docs/integrations/document_loaders/whatsapp_chat"}, "LanceDB": {"LanceDB": "https://python.langchain.com/docs/integrations/providers/lancedb"}, "OneDriveLoader": {"Microsoft OneDrive": "https://python.langchain.com/docs/integrations/providers/microsoft_onedrive"}, "AnalyticDB": {"AnalyticDB": "https://python.langchain.com/docs/integrations/vectorstores/analyticdb"}, "PromptLayerOpenAI": {"PromptLayer": "https://python.langchain.com/docs/integrations/providers/promptlayer"}, "DeepLake": {"Deep Lake": "https://python.langchain.com/docs/integrations/providers/deeplake", "Activeloop's Deep Lake": "https://python.langchain.com/docs/integrations/vectorstores/deeplake", "Use LangChain, GPT and Activeloop's Deep Lake to work with code base": "https://python.langchain.com/docs/use_cases/code/code-analysis-deeplake"}, "WhyLabsCallbackHandler": {"WhyLabs": "https://python.langchain.com/docs/integrations/providers/whylabs_profiling"}, "ManifestWrapper": {"Hazy Research": "https://python.langchain.com/docs/integrations/providers/hazy_research", "Manifest": "https://python.langchain.com/docs/integrations/llms/manifest"}, "Marqo": {"Marqo": "https://python.langchain.com/docs/integrations/providers/marqo"}, "IMSDbLoader": {"IMSDb": "https://python.langchain.com/docs/integrations/document_loaders/imsdb"}, "PGVector": {"PGVector": "https://python.langchain.com/docs/integrations/providers/pgvector"}, "DeepInfra": {"DeepInfra": "https://python.langchain.com/docs/integrations/providers/deepinfra"}, "AgentExecutor": {"Jina": "https://python.langchain.com/docs/integrations/providers/jina", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Running Agent as an Iterator": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent"}, "RedditPostsLoader": {"Reddit": "https://python.langchain.com/docs/integrations/document_loaders/reddit"}, "TrelloLoader": {"Trello": "https://python.langchain.com/docs/integrations/document_loaders/trello"}, "AtlasDB": {"AtlasDB": "https://python.langchain.com/docs/integrations/providers/atlas"}, "VespaRetriever": {"Vespa": "https://python.langchain.com/docs/integrations/providers/vespa"}, "SKLearnVectorStore": {"scikit-learn": "https://python.langchain.com/docs/integrations/providers/sklearn"}, "EverNoteLoader": {"EverNote": "https://python.langchain.com/docs/integrations/document_loaders/evernote"}, "TwitterTweetLoader": {"Twitter": "https://python.langchain.com/docs/integrations/document_loaders/twitter"}, "DiscordChatLoader": {"Discord": "https://python.langchain.com/docs/integrations/document_loaders/discord"}, "RedisCache": {"Redis": "https://python.langchain.com/docs/integrations/providers/redis"}, "RedisSemanticCache": {"Redis": "https://python.langchain.com/docs/integrations/providers/redis"}, "Redis": {"Redis": "https://python.langchain.com/docs/integrations/vectorstores/redis"}, "Chroma": {"Chroma": "https://python.langchain.com/docs/integrations/providers/chroma", "Structure answers with OpenAI functions": "https://python.langchain.com/docs/use_cases/question_answering/integrations/openai_functions_retrieval_qa", "Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Retrieval QA using OpenAI functions": "https://python.langchain.com/docs/modules/chains/additional/openai_functions_retrieval_qa"}, "SelfQueryRetriever": {"Chroma": "https://python.langchain.com/docs/integrations/providers/chroma"}, "ClearMLCallbackHandler": {"ClearML": "https://python.langchain.com/docs/integrations/providers/clearml_tracking"}, "Cohere": {"Cohere": "https://python.langchain.com/docs/integrations/providers/cohere"}, "CohereRerank": {"Cohere": "https://python.langchain.com/docs/integrations/providers/cohere"}, "SlackDirectoryLoader": {"Slack": "https://python.langchain.com/docs/integrations/document_loaders/slack"}, "LLMContentHandler": {"SageMaker Endpoint": "https://python.langchain.com/docs/integrations/providers/sagemaker_endpoint"}, "HNLoader": {"Hacker News": "https://python.langchain.com/docs/integrations/document_loaders/hacker_news"}, "Annoy": {"Annoy": "https://python.langchain.com/docs/integrations/providers/annoy"}, "CassandraChatMessageHistory": {"Cassandra": "https://python.langchain.com/docs/integrations/providers/cassandra"}, "GoogleSearchAPIWrapper": {"Google Search": "https://python.langchain.com/docs/integrations/providers/google_search", "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"}, "GCSDirectoryLoader": {"Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage", "Google Cloud Storage Directory": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_directory"}, "GCSFileLoader": {"Google Cloud Storage": "https://python.langchain.com/docs/integrations/providers/google_cloud_storage", "Google Cloud Storage File": "https://python.langchain.com/docs/integrations/document_loaders/google_cloud_storage_file"}, "DuckDBLoader": {"DuckDB": "https://python.langchain.com/docs/integrations/document_loaders/duckdb"}, "Petals": {"Petals": "https://python.langchain.com/docs/integrations/providers/petals"}, "MomentoCache": {"Momento": "https://python.langchain.com/docs/integrations/providers/momento"}, "AirtableLoader": {"Airtable": "https://python.langchain.com/docs/integrations/document_loaders/airtable"}, "BigQueryLoader": {"Google BigQuery": "https://python.langchain.com/docs/integrations/document_loaders/google_bigquery"}, "RoamLoader": {"Roam": "https://python.langchain.com/docs/integrations/document_loaders/roam"}, "Portkey": {"Log, Trace, and Monitor Langchain LLM Calls": "https://python.langchain.com/docs/integrations/providers/portkey/logging_tracing_portkey", "Portkey": "https://python.langchain.com/docs/integrations/providers/portkey/index"}, "Vectara": {"Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/index"}, "CONDENSE_QUESTION_PROMPT": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"}, "load_qa_with_sources_chain": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat"}, "load_qa_chain": {"Chat Over Documents with Vectara": "https://python.langchain.com/docs/integrations/providers/vectara/vectara_chat", "Running LLMs locally": "https://python.langchain.com/docs/use_cases/question_answering/local_retrieval_qa", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa"}, "create_csv_agent": {"CSV Agent": "https://python.langchain.com/docs/integrations/toolkits/csv"}, "JiraAPIWrapper": {"Jira": "https://python.langchain.com/docs/integrations/toolkits/jira"}, "ChatOpenAI": {"SQL Database Agent": "https://python.langchain.com/docs/integrations/toolkits/sql_database", "Comparing Chain Outputs": "https://python.langchain.com/docs/guides/evaluation/examples/comparisons", "OpenAI Multi Functions Agent": "https://python.langchain.com/docs/modules/agents/agent_types/openai_multi_functions_agent", "Add Memory to OpenAI Functions Agent": "https://python.langchain.com/docs/modules/agents/how_to/add_memory_openai_functions"}, "APIOperation": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"}, "NLAToolkit": {"Natural Language APIs": "https://python.langchain.com/docs/integrations/toolkits/openapi_nla"}, "build_resource_service": {"Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail"}, "get_gmail_credentials": {"Gmail Toolkit": "https://python.langchain.com/docs/integrations/toolkits/gmail"}, "create_json_agent": {"JSON Agent": "https://python.langchain.com/docs/integrations/toolkits/json"}, "GitHubAPIWrapper": {"Github Toolkit": "https://python.langchain.com/docs/integrations/toolkits/github"}, "reduce_openapi_spec": {"OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "JsonSpec": {"OpenAPI agents": "https://python.langchain.com/docs/integrations/toolkits/openapi"}, "MatchingEngine": {"MatchingEngine": "https://python.langchain.com/docs/integrations/vectorstores/matchingengine"}, "Document": {"PGVector": "https://python.langchain.com/docs/integrations/vectorstores/pgvector", "pg_embedding": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding", "Copy Paste": "https://python.langchain.com/docs/integrations/document_loaders/copypaste", "SageMakerEndpoint": "https://python.langchain.com/docs/integrations/llms/sagemaker", "Plug-and-Plai": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval_using_plugnplai", "Custom Agent with PlugIn Retrieval": "https://python.langchain.com/docs/use_cases/agents/custom_agent_with_plugin_retrieval", "Custom agent with tool retrieval": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent_with_tool_retrieval"}, "CharacterTextSplitter": {"StarRocks": "https://python.langchain.com/docs/integrations/vectorstores/starrocks", "Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "Clarifai": {"Clarifai": "https://python.langchain.com/docs/integrations/vectorstores/clarifai"}, "Clickhouse": {"ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"}, "ClickhouseSettings": {"ClickHouse Vector Search": "https://python.langchain.com/docs/integrations/vectorstores/clickhouse"}, "TextLoader": {"AwaDB": "https://python.langchain.com/docs/integrations/vectorstores/awadb", "Marqo": "https://python.langchain.com/docs/integrations/vectorstores/marqo", "Meilisearch": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch", "QA Generation": "https://python.langchain.com/docs/guides/evaluation/examples/qa_generation", "Graph QA": "https://python.langchain.com/docs/modules/chains/additional/graph_qa"}, "create_metadata_tagger": {"OpenAI Functions Metadata Tagger": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger"}, "Html2TextTransformer": {"html2text": "https://python.langchain.com/docs/integrations/document_transformers/html2text"}, "SnowflakeLoader": {"Snowflake": "https://python.langchain.com/docs/integrations/document_loaders/snowflake"}, "AcreomLoader": {"acreom": "https://python.langchain.com/docs/integrations/document_loaders/acreom"}, "CSVLoader": {"CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"}, "UnstructuredCSVLoader": {"CSV": "https://python.langchain.com/docs/integrations/document_loaders/csv"}, "XorbitsLoader": {"Xorbits Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/xorbits"}, "UnstructuredEmailLoader": {"Email": "https://python.langchain.com/docs/integrations/document_loaders/email"}, "OutlookMessageLoader": {"Email": "https://python.langchain.com/docs/integrations/document_loaders/email"}, "RecursiveUrlLoader": {"Recursive URL Loader": "https://python.langchain.com/docs/integrations/document_loaders/recursive_url_loader"}, "JoplinLoader": {"Joplin": "https://python.langchain.com/docs/integrations/document_loaders/joplin"}, "Docx2txtLoader": {"Microsoft Word": "https://python.langchain.com/docs/integrations/document_loaders/microsoft_word"}, "YoutubeAudioLoader": {"Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"}, "RecursiveCharacterTextSplitter": {"Loading documents from a YouTube url": "https://python.langchain.com/docs/integrations/document_loaders/youtube_audio"}, "UnstructuredURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "SeleniumURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "PlaywrightURLLoader": {"URL": "https://python.langchain.com/docs/integrations/document_loaders/url"}, "OpenCityDataLoader": {"Geopandas": "https://python.langchain.com/docs/integrations/document_loaders/geopandas", "Open City Data": "https://python.langchain.com/docs/integrations/document_loaders/open_city_data"}, "HuggingFaceDatasetLoader": {"HuggingFace dataset": "https://python.langchain.com/docs/integrations/document_loaders/hugging_face_dataset"}, "DropboxLoader": {"Dropbox": "https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/dropbox"}, "MHTMLLoader": {"mhtml": "https://python.langchain.com/docs/integrations/document_loaders/mhtml"}, "ImageCaptionLoader": {"Image captions": "https://python.langchain.com/docs/integrations/document_loaders/image_captions"}, "UnstructuredRSTLoader": {"RST": "https://python.langchain.com/docs/integrations/document_loaders/rst"}, "ConversationChain": {"Figma": "https://python.langchain.com/docs/integrations/document_loaders/figma"}, "VectorstoreIndexCreator": {"Apify Dataset": "https://python.langchain.com/docs/integrations/document_loaders/apify_dataset", "Question Answering Benchmarking: State of the Union Address": "https://python.langchain.com/docs/guides/evaluation/examples/qa_benchmarking_sota", "Question Answering Benchmarking: Paul Graham Essay": "https://python.langchain.com/docs/guides/evaluation/examples/qa_benchmarking_pg", "Agent VectorDB Question Answering Benchmarking": "https://python.langchain.com/docs/guides/evaluation/examples/agent_vectordb_sota_pg"}, "UnstructuredImageLoader": {"Images": "https://python.langchain.com/docs/integrations/document_loaders/image"}, "TomlLoader": {"TOML": "https://python.langchain.com/docs/integrations/document_loaders/toml"}, "UnstructuredFileLoader": {"Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"}, "UnstructuredAPIFileLoader": {"Unstructured File": "https://python.langchain.com/docs/integrations/document_loaders/unstructured_file"}, "RetrievalQAWithSourcesChain": {"Psychic": "https://python.langchain.com/docs/integrations/document_loaders/psychic", "WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "GitHubIssuesLoader": {"GitHub": "https://python.langchain.com/docs/integrations/document_loaders/github"}, "UnstructuredOrgModeLoader": {"Org-mode": "https://python.langchain.com/docs/integrations/document_loaders/org_mode"}, "UnstructuredEPubLoader": {"EPub ": "https://python.langchain.com/docs/integrations/document_loaders/epub"}, "WebBaseLoader": {"WebBaseLoader": "https://python.langchain.com/docs/integrations/document_loaders/web_base", "Combine agents and vector stores": "https://python.langchain.com/docs/modules/agents/how_to/agent_vectorstore"}, "BrowserlessLoader": {"Browserless": "https://python.langchain.com/docs/integrations/document_loaders/browserless"}, "BibtexLoader": {"BibTeX": "https://python.langchain.com/docs/integrations/document_loaders/bibtex"}, "ReadTheDocsLoader": {"ReadTheDocs Documentation": "https://python.langchain.com/docs/integrations/document_loaders/readthedocs_documentation"}, "DataFrameLoader": {"Pandas DataFrame": "https://python.langchain.com/docs/integrations/document_loaders/pandas_dataframe"}, "AsyncHtmlLoader": {"AsyncHtmlLoader": "https://python.langchain.com/docs/integrations/document_loaders/async_html"}, "YoutubeLoader": {"YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "GoogleApiClient": {"YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "GoogleApiYoutubeLoader": {"YouTube transcripts": "https://python.langchain.com/docs/integrations/document_loaders/youtube_transcript"}, "NotebookLoader": {"Jupyter Notebook": "https://python.langchain.com/docs/integrations/document_loaders/jupyter_notebook", "Notebook": "https://python.langchain.com/docs/integrations/document_loaders/example_data/notebook"}, "UnstructuredTSVLoader": {"TSV": "https://python.langchain.com/docs/integrations/document_loaders/tsv"}, "UnstructuredODTLoader": {"Open Document Format (ODT)": "https://python.langchain.com/docs/integrations/document_loaders/odt"}, "EmbaasLoader": {"Embaas": "https://python.langchain.com/docs/integrations/document_loaders/embaas"}, "UnstructuredXMLLoader": {"XML": "https://python.langchain.com/docs/integrations/document_loaders/xml"}, "MaxComputeLoader": {"Alibaba Cloud MaxCompute": "https://python.langchain.com/docs/integrations/document_loaders/alibaba_cloud_maxcompute"}, "UnstructuredExcelLoader": {"Microsoft Excel": "https://python.langchain.com/docs/integrations/document_loaders/excel"}, "LanguageParser": {"Source Code": "https://python.langchain.com/docs/integrations/document_loaders/source_code"}, "SRTLoader": {"Subtitle": "https://python.langchain.com/docs/integrations/document_loaders/subtitle"}, "TelegramChatFileLoader": {"Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"}, "TelegramChatApiLoader": {"Telegram": "https://python.langchain.com/docs/integrations/document_loaders/telegram"}, "MastodonTootsLoader": {"Mastodon": "https://python.langchain.com/docs/integrations/document_loaders/mastodon"}, "PySparkDataFrameLoader": {"PySpark DataFrame Loader": "https://python.langchain.com/docs/integrations/document_loaders/pyspark_dataframe"}, "CoNLLULoader": {"CoNLL-U": "https://python.langchain.com/docs/integrations/document_loaders/conll-u"}, "SitemapLoader": {"Sitemap": "https://python.langchain.com/docs/integrations/document_loaders/sitemap"}, "Baseten": {"Baseten": "https://python.langchain.com/docs/integrations/llms/baseten"}, "LLMChain": {"Baseten": "https://python.langchain.com/docs/integrations/llms/baseten", "Improve document indexing with HyDE": "https://python.langchain.com/docs/use_cases/question_answering/how_to/hyde", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation", "Hypothetical Document Embeddings": "https://python.langchain.com/docs/modules/chains/additional/hyde"}, "KoboldApiLLM": {"KoboldAI API": "https://python.langchain.com/docs/integrations/llms/koboldai"}, "StreamingStdOutCallbackHandler": {"Llama-cpp": "https://python.langchain.com/docs/integrations/llms/llamacpp", "Running LLMs locally": "https://python.langchain.com/docs/use_cases/question_answering/local_retrieval_qa", "Use local LLMs": "https://python.langchain.com/docs/use_cases/question_answering/how_to/local_retrieval_qa"}, "Databricks": {"Databricks": "https://python.langchain.com/docs/integrations/llms/databricks"}, "AmazonAPIGateway": {"Amazon API Gateway": "https://python.langchain.com/docs/integrations/llms/amazon_api_gateway_example"}, "SQLAlchemyCache": {"Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "load_summarize_chain": {"Caching integrations": "https://python.langchain.com/docs/integrations/llms/llm_caching"}, "AzureMLOnlineEndpoint": {"AzureML Online Endpoint": "https://python.langchain.com/docs/integrations/llms/azureml_endpoint_example"}, "SimpleSequentialChain": {"Replicate": "https://python.langchain.com/docs/integrations/llms/replicate"}, "ModelLaboratory": {"Model comparison": "https://python.langchain.com/docs/guides/model_laboratory"}, "wait_for_all_tracers": {"LangSmith Walkthrough": "https://python.langchain.com/docs/guides/langsmith/walkthrough"}, "QAEvalChain": {"Question Answering Benchmarking: State of the Union Address": "https://python.langchain.com/docs/guides/evaluation/examples/qa_benchmarking_sota", "Question Answering Benchmarking: Paul Graham Essay": "https://python.langchain.com/docs/guides/evaluation/examples/qa_benchmarking_pg", "Data Augmented Question Answering": "https://python.langchain.com/docs/guides/evaluation/examples/data_augmented_question_answering", "SQL Question Answering Benchmarking: Chinook": "https://python.langchain.com/docs/guides/evaluation/examples/sql_qa_benchmarking_chinook", "Question Answering": "https://python.langchain.com/docs/guides/evaluation/examples/question_answering", "Agent VectorDB Question Answering Benchmarking": "https://python.langchain.com/docs/guides/evaluation/examples/agent_vectordb_sota_pg"}, "OpenAPISpec": {"Evaluating an OpenAPI Chain": "https://python.langchain.com/docs/guides/evaluation/examples/openapi_eval", "OpenAPI chain": "https://python.langchain.com/docs/modules/chains/additional/openapi"}, "PromptTemplate": {"Evaluating an OpenAPI Chain": "https://python.langchain.com/docs/guides/evaluation/examples/openapi_eval", "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store", "Router": "https://python.langchain.com/docs/modules/chains/foundational/router", "Transformation": "https://python.langchain.com/docs/modules/chains/foundational/transformation"}, "Criteria": {"Criteria Evaluation": "https://python.langchain.com/docs/guides/evaluation/string/criteria_eval_chain"}, "ChatPromptTemplate": {"Tagging": "https://python.langchain.com/docs/modules/chains/additional/tagging", "Extraction with OpenAI Functions": "https://python.langchain.com/docs/use_cases/extraction/openai_extraction", "How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory", "Prompt Pipelining": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining", "Extraction": "https://python.langchain.com/docs/modules/chains/additional/extraction"}, "get_openapi_chain": {"OpenAPI calls with OpenAI functions": "https://python.langchain.com/docs/modules/chains/additional/openapi_openai"}, "ZeroShotAgent": {"BabyAGI with Tools": "https://python.langchain.com/docs/use_cases/agents/baby_agi_with_agent", "Adding Message Memory backed by a database to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory_in_db", "How to add Memory to an Agent": "https://python.langchain.com/docs/modules/memory/agent_with_memory", "Custom MRKL agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent", "Shared memory across agents and tools": "https://python.langchain.com/docs/modules/agents/how_to/sharedmemory_for_tools"}, "BaseTool": {"!pip install bs4": "https://python.langchain.com/docs/use_cases/autonomous_agents/marathon_times", "Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "ConversationBufferWindowMemory": {"Meta-Prompt": "https://python.langchain.com/docs/use_cases/autonomous_agents/meta_prompt"}, "AttributeInfo": {"Context aware text splitting and QA / Chat": "https://python.langchain.com/docs/use_cases/question_answering/document-context-aware-QA", "Perform context-aware text splitting": "https://python.langchain.com/docs/use_cases/question_answering/how_to/document-context-aware-QA"}, "PyPDFLoader": {"Question answering over a group chat messages using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/semantic-search-over-chat", "QA using Activeloop's DeepLake": "https://python.langchain.com/docs/use_cases/question_answering/integrations/semantic-search-over-chat"}, "SQLDatabase": {"SQL Query": "https://python.langchain.com/docs/use_cases/tabular/sql_query"}, "NebulaGraph": {"NebulaGraphQAChain": "https://python.langchain.com/docs/modules/chains/additional/graph_nebula_qa"}, "KuzuQAChain": {"KuzuQAChain": "https://python.langchain.com/docs/modules/chains/additional/graph_kuzu_qa"}, "HugeGraph": {"HugeGraph QA Chain": "https://python.langchain.com/docs/modules/chains/additional/graph_hugegraph_qa"}, "RdfGraph": {"GraphSparqlQAChain": "https://python.langchain.com/docs/modules/chains/additional/graph_sparql_qa"}, "GraphQAChain": {"Graph QA": "https://python.langchain.com/docs/modules/chains/additional/graph_qa"}, "NetworkxEntityGraph": {"Graph QA": "https://python.langchain.com/docs/modules/chains/additional/graph_qa"}, "Neo4jGraph": {"Graph DB QA chain": "https://python.langchain.com/docs/modules/chains/additional/graph_cypher_qa"}, "AgentAction": {"SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context", "Custom multi-action agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent", "Custom agent": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent"}, "AgentFinish": {"SalesGPT - Your Context-Aware AI Sales Assistant With Knowledge Base": "https://python.langchain.com/docs/use_cases/agents/sales_agent_with_context"}, "SteamshipImageGenerationTool": {"Multi-modal outputs: Image & Text": "https://python.langchain.com/docs/use_cases/multi_modal/image_agent"}, "RegexParser": {"Multi-Agent Simulated Environment: Petting Zoo": "https://python.langchain.com/docs/use_cases/agent_simulations/petting_zoo", "Simulated Environment: Gymnasium": "https://python.langchain.com/docs/use_cases/agent_simulations/gymnasium"}, "FAISS": {"Generative Agents in LangChain": "https://python.langchain.com/docs/use_cases/agent_simulations/characters"}, "WebResearchRetriever": {"WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "PydanticOutputParser": {"WebResearchRetriever": "https://python.langchain.com/docs/modules/data_connection/retrievers/web_research"}, "SentenceTransformersTokenTextSplitter": {"Split by tokens ": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/split_by_token"}, "MarkdownHeaderTextSplitter": {"MarkdownHeaderTextSplitter": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/markdown_header_metadata"}, "StuffDocumentsChain": {"Lost in the middle: The problem with long contexts": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder"}, "HumanMessagePromptTemplate": {"How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory"}, "MessagesPlaceholder": {"How to add Memory to an LLMChain": "https://python.langchain.com/docs/modules/memory/adding_memory"}, "AsyncCallbackHandler": {"Async callbacks": "https://python.langchain.com/docs/modules/callbacks/async_callbacks"}, "StructuredTool": {"Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "tool": {"Defining Custom Tools": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"}, "MoveFileTool": {"Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"}, "format_tool_to_openai_function": {"Tools as OpenAI Functions": "https://python.langchain.com/docs/modules/agents/tools/tools_as_openai_functions"}, "RequestsGetTool": {"Tool Input Schema": "https://python.langchain.com/docs/modules/agents/tools/tool_input_validation"}, "HumanInputChatModel": {"Human input Chat Model": "https://python.langchain.com/docs/modules/model_io/models/chat/human_input_chat_model"}, "FakeListLLM": {"Fake LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/fake_llm"}, "HumanInputLLM": {"Human input LLM": "https://python.langchain.com/docs/modules/model_io/models/llms/human_input_llm"}, "RetryWithErrorOutputParser": {"Retry parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry"}, "EnumOutputParser": {"Enum parser": "https://python.langchain.com/docs/modules/model_io/output_parsers/enum"}, "FewShotPromptTemplate": {"Select by maximal marginal relevance (MMR)": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr", "Select by n-gram overlap": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/ngram_overlap"}, "FewShotChatMessagePromptTemplate": {"Few shot examples for chat models": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot_examples_chat"}, "load_prompt": {"Serialization": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompt_serialization"}, "StringPromptTemplate": {"Connecting to a Feature Store": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/connecting_to_a_feature_store"}, "LLMRouterChain": {"Router": "https://python.langchain.com/docs/modules/chains/foundational/router"}, "load_chain": {"Serialization": "https://python.langchain.com/docs/modules/chains/how_to/serialization"}}