[tool.poetry]
<<<<<<< HEAD
<<<<<<< HEAD
name = "langchain-monorepo"
version = "0.0.1"
description = "LangChain mono-repo"
authors = []
license = "MIT"
readme = "README.md"
repository = "https://www.github.com/langchain-ai/langchain"


[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"

[tool.poetry.group.docs.dependencies]
langchain = { path = "libs/langchain/", develop = true }
autodoc_pydantic = "^1.8.0"
myst_parser = "^0.18.1"
nbsphinx = "^0.8.9"
sphinx = "^4.5.0"
sphinx-autobuild = "^2021.3.14"
sphinx_book_theme = "^0.3.3"
sphinx_rtd_theme = "^1.0.0"
sphinx-typlog-theme = "^0.8.0"
sphinx-panels = "^0.6.0"
toml = "^0.10.2"
myst-nb = "^0.17.1"
linkchecker = "^10.2.1"
sphinx-copybutton = "^0.5.1"
nbdoc = "^0.0.82"

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"
langchain-core = { path = "libs/core/", develop = true }
langchain-community = { path = "libs/community/", develop = true }
langchain = { path = "libs/langchain/", develop = true }
langchain-experimental = { path = "libs/experimental/", develop = true }
langchain-openai = { path = "libs/partners/openai", develop = true }

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.0"


[tool.poetry.group.dev.dependencies]
langchain-core = { path = "libs/core/", develop = true }
langchain-community = { path = "libs/community/", develop = true }
langchain = { path = "libs/langchain/", develop = true }
langchain-experimental = { path = "libs/experimental/", develop = true }
langchain-openai = { path = "libs/partners/openai", develop = true }

[tool.poetry.group.test.dependencies]

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.typing.dependencies]

[tool.codespell]
skip = '.git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples,templates,*.trig'
# Ignore latin etc
ignore-regex = '.*(Stati Uniti|Tense=Pres).*'
# whats is a typo but used frequently in queries so kept as is
# aapply - async apply
# unsecure - typo but part of API, decided to not bother for now
ignore-words-list = 'momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate,aadd,symbl,precesses,accademia,nin'

[tool.ruff]
extend-include = ["*.ipynb"]
extend-exclude = [
    "docs/docs/expression_language/why.ipynb"  # TODO: look into why linter errors
]

[tool.ruff.lint.per-file-ignores]
"**/{cookbook,docs}/*" = [
    "E402",  # allow imports to appear anywhere in docs
    "F401",  # allow "imported but unused" example code
    "F811",  # allow re-importing the same module, so that cells can stay independent
    "F841",  # allow assignments to variables that are never read -- it's example code
]

# These files were failing the listed rules at the time ruff was adopted for notebooks.
# Don't require them to change at once, though we should look into them eventually.
"cookbook/gymnasium_agent_simulation.ipynb" = ["F821"]
"docs/docs/integrations/document_loaders/tensorflow_datasets.ipynb" = ["F821"]

=======
=======
>>>>>>> LCEL-template-guardrails
name = "templates"
version = "0.0.0"
description = ""
authors = []
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"


# dev, test, lint, typing
langchain = ">=0.0.353,<0.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.24.1"
pytest-watch = "^4.2.0"
langchain-cli = ">=0.0.21"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
poethepoet = "^0.24.1"
ruff = "^0.1.3"
langchain = { path = "../libs/langchain", develop = true }
langchain-core = { path = "../libs/core", develop = true }

[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]

[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
]

[tool.poe.tasks]
test = "poetry run pytest"
watch = "poetry run ptw"
lint = ["_lint", "_check_formatting"]
format = ["_lint_fix", "_format"]

_check_formatting = "poetry run ruff format . --diff"
_lint = "poetry run ruff ."
_format = "poetry run ruff format ."
_lint_fix = "poetry run ruff . --fix"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
<<<<<<< HEAD
>>>>>>> b484d5bba (Adding guardrails integration to nvidia-rag-canonical)
=======
>>>>>>> LCEL-template-guardrails
